{"id":"83830add2c46adba69e4806448b13090","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"contracts/ISqudyToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title ISqudyToken\n * @dev Interface for the SQUDY token contract (BEP-20)\n */\ninterface ISqudyToken {\n    /**\n     * @dev Returns the name of the token\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals of the token\n     */\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the total supply of the token\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the balance of the specified account\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Transfers tokens from the caller to the specified recipient\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the allowance given to spender by owner\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Approves the specified address to spend the specified amount of tokens\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Transfers tokens from one address to another using the allowance mechanism\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Burns tokens from the caller's account\n     */\n    function burn(uint256 amount) external;\n\n    /**\n     * @dev Burns tokens from the specified account (requires allowance)\n     */\n    function burnFrom(address account, uint256 amount) external;\n\n    /**\n     * @dev Emitted when tokens are transferred\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when allowance is set\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Emitted when tokens are burned\n     */\n    event Burn(address indexed from, uint256 value);\n} "},"contracts/MockSqudyToken.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title MockSqudyToken\n * @dev Mock SQUDY token for testing purposes\n * @author Squdy Team\n */\ncontract MockSqudyToken is ERC20, ERC20Burnable, Ownable {\n    uint8 private _decimals = 18;\n    \n    constructor() ERC20(\"Squdy Token\", \"SQUDY\") Ownable(msg.sender) {\n        // Mint initial supply to deployer\n        _mint(msg.sender, 1000000000 * 10**decimals()); // 1 billion tokens\n    }\n    \n    /**\n     * @dev Returns the number of decimals used to get its user representation\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n    \n    /**\n     * @dev Mints tokens to the specified address (for testing)\n     */\n    function mint(address to, uint256 amount) external onlyOwner {\n        _mint(to, amount);\n    }\n    \n    /**\n     * @dev Burns tokens from the specified account (requires allowance)\n     */\n    function burnFrom(address account, uint256 amount) public virtual override {\n        require(allowance(account, msg.sender) >= amount, \"MockSqudyToken: insufficient allowance\");\n        _burn(account, amount);\n    }\n} "},"contracts/SqudyCampaignManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"./ISqudyToken.sol\";\n\n/**\n * @title SqudyCampaignManager\n * @dev Manages burn-to-win campaigns for SQUDY tokens\n * @author Squdy Team\n */\ncontract SqudyCampaignManager is AccessControl, ReentrancyGuard, Pausable, VRFConsumerBaseV2 {\n\n    // ============ CONSTANTS ============\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n    \n    // Chainlink VRF Configuration\n    VRFCoordinatorV2Interface private immutable COORDINATOR;\n    bytes32 private immutable KEY_HASH;\n    uint64 private immutable SUBSCRIPTION_ID;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant CALLBACK_GAS_LIMIT = 100000;\n\n    // ============ STATE VARIABLES ============\n    ISqudyToken public immutable squdyToken;\n    uint256 private _campaignIds;\n    \n    // Campaign storage\n    mapping(uint256 => Campaign) public campaigns;\n    mapping(uint256 => mapping(address => Participant)) public participants;\n    mapping(uint256 => address[]) public campaignParticipants;\n    mapping(uint256 => mapping(uint256 => address)) public participantIndexes;\n    \n    // VRF request tracking\n    mapping(uint256 => uint256) public vrfRequests; // requestId => campaignId\n    \n    // ============ STRUCTS ============\n    struct Campaign {\n        uint256 id;\n        string name;\n        string description;\n        string imageUrl;\n        uint256 softCap;\n        uint256 hardCap;\n        uint256 ticketAmount;\n        uint256 currentAmount;\n        uint256 startDate;\n        uint256 endDate;\n        uint256 participantCount;\n        string[] prizes;\n        address[] winners;\n        CampaignStatus status;\n        bool tokensAreBurned;\n        uint256 totalBurned;\n        bytes32 winnerSelectionTxHash;\n        uint256 createdAt;\n        uint256 updatedAt;\n    }\n    \n    struct Participant {\n        uint256 stakedAmount;\n        uint256 ticketCount;\n        bool hasCompletedSocial;\n        bool isWinner;\n        uint256 prizeIndex;\n        uint256 joinedAt;\n    }\n    \n    enum CampaignStatus {\n        PENDING,\n        ACTIVE,\n        PAUSED,\n        FINISHED,\n        BURNED\n    }\n\n    // ============ EVENTS ============\n    event CampaignCreated(\n        uint256 indexed campaignId,\n        string name,\n        uint256 startDate,\n        uint256 endDate,\n        uint256 ticketAmount\n    );\n    \n    event UserStaked(\n        uint256 indexed campaignId,\n        address indexed user,\n        uint256 amount,\n        uint256 tickets\n    );\n    \n    event SocialTasksCompleted(\n        uint256 indexed campaignId,\n        address indexed user\n    );\n    \n    event CampaignPaused(uint256 indexed campaignId);\n    event CampaignResumed(uint256 indexed campaignId);\n    event CampaignClosed(uint256 indexed campaignId);\n    \n    event WinnersSelected(\n        uint256 indexed campaignId,\n        address[] winners,\n        bytes32 requestId\n    );\n    \n    event TokensBurned(\n        uint256 indexed campaignId,\n        uint256 totalBurned\n    );\n    \n    event PrizeClaimed(\n        uint256 indexed campaignId,\n        address indexed winner,\n        uint256 prizeIndex\n    );\n    \n    event AdminAdded(address indexed admin);\n    event AdminRemoved(address indexed admin);\n\n    // ============ MODIFIERS ============\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"SqudyCampaignManager: admin role required\");\n        _;\n    }\n    \n    modifier onlyOperator() {\n        require(hasRole(OPERATOR_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender), \n                \"SqudyCampaignManager: operator role required\");\n        _;\n    }\n    \n    modifier campaignExists(uint256 campaignId) {\n        require(campaigns[campaignId].id != 0, \"SqudyCampaignManager: campaign does not exist\");\n        _;\n    }\n    \n    modifier campaignActive(uint256 campaignId) {\n        require(campaigns[campaignId].status == CampaignStatus.ACTIVE, \n                \"SqudyCampaignManager: campaign not active\");\n        _;\n    }\n    \n    modifier campaignNotBurned(uint256 campaignId) {\n        require(!campaigns[campaignId].tokensAreBurned, \n                \"SqudyCampaignManager: tokens already burned\");\n        _;\n    }\n\n    // ============ CONSTRUCTOR ============\n    constructor(\n        address _squdyToken,\n        address _vrfCoordinator,\n        bytes32 _keyHash,\n        uint64 _subscriptionId\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\n        squdyToken = ISqudyToken(_squdyToken);\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\n        KEY_HASH = _keyHash;\n        SUBSCRIPTION_ID = _subscriptionId;\n        \n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(ADMIN_ROLE, msg.sender);\n        _grantRole(OPERATOR_ROLE, msg.sender);\n    }\n\n    // ============ ADMIN FUNCTIONS ============\n    \n    /**\n     * @dev Creates a new campaign\n     * @param name Campaign name\n     * @param description Campaign description\n     * @param imageUrl Campaign image URL\n     * @param softCap Minimum amount of tokens required\n     * @param hardCap Maximum amount of tokens that can be staked\n     * @param ticketAmount Amount of tokens per ticket\n     * @param startDate Campaign start timestamp\n     * @param endDate Campaign end timestamp\n     * @param prizes Array of prize descriptions\n     */\n    function createCampaign(\n        string memory name,\n        string memory description,\n        string memory imageUrl,\n        uint256 softCap,\n        uint256 hardCap,\n        uint256 ticketAmount,\n        uint256 startDate,\n        uint256 endDate,\n        string[] memory prizes\n    ) external onlyOperator returns (uint256) {\n        require(bytes(name).length > 0, \"SqudyCampaignManager: name cannot be empty\");\n        require(softCap > 0, \"SqudyCampaignManager: soft cap must be greater than 0\");\n        require(hardCap > softCap, \"SqudyCampaignManager: hard cap must be greater than soft cap\");\n        require(ticketAmount > 0, \"SqudyCampaignManager: ticket amount must be greater than 0\");\n        require(startDate > block.timestamp, \"SqudyCampaignManager: start date must be in the future\");\n        require(endDate > startDate, \"SqudyCampaignManager: end date must be after start date\");\n        require(prizes.length > 0, \"SqudyCampaignManager: must have at least one prize\");\n        \n        _campaignIds++;\n        uint256 campaignId = _campaignIds;\n        \n        campaigns[campaignId] = Campaign({\n            id: campaignId,\n            name: name,\n            description: description,\n            imageUrl: imageUrl,\n            softCap: softCap,\n            hardCap: hardCap,\n            ticketAmount: ticketAmount,\n            currentAmount: 0,\n            startDate: startDate,\n            endDate: endDate,\n            participantCount: 0,\n            prizes: prizes,\n            winners: new address[](0),\n            status: CampaignStatus.PENDING,\n            tokensAreBurned: false,\n            totalBurned: 0,\n            winnerSelectionTxHash: bytes32(0),\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp\n        });\n        \n        emit CampaignCreated(campaignId, name, startDate, endDate, ticketAmount);\n        return campaignId;\n    }\n    \n    /**\n     * @dev Activates a pending campaign\n     */\n    function activateCampaign(uint256 campaignId) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.PENDING, \n                \"SqudyCampaignManager: campaign not pending\");\n        require(block.timestamp >= campaign.startDate, \n                \"SqudyCampaignManager: campaign not ready to start\");\n        \n        campaign.status = CampaignStatus.ACTIVE;\n        campaign.updatedAt = block.timestamp;\n    }\n    \n    /**\n     * @dev Pauses an active campaign\n     */\n    function pauseCampaign(uint256 campaignId) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.ACTIVE, \n                \"SqudyCampaignManager: campaign not active\");\n        \n        campaign.status = CampaignStatus.PAUSED;\n        campaign.updatedAt = block.timestamp;\n        \n        emit CampaignPaused(campaignId);\n    }\n    \n    /**\n     * @dev Resumes a paused campaign\n     */\n    function resumeCampaign(uint256 campaignId) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.PAUSED, \n                \"SqudyCampaignManager: campaign not paused\");\n        require(block.timestamp < campaign.endDate, \n                \"SqudyCampaignManager: campaign has ended\");\n        \n        campaign.status = CampaignStatus.ACTIVE;\n        campaign.updatedAt = block.timestamp;\n        \n        emit CampaignResumed(campaignId);\n    }\n    \n    /**\n     * @dev Closes a campaign and prepares for winner selection\n     */\n    function closeCampaign(uint256 campaignId) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.ACTIVE || campaign.status == CampaignStatus.PAUSED, \n                \"SqudyCampaignManager: campaign not active or paused\");\n        require(block.timestamp >= campaign.endDate, \n                \"SqudyCampaignManager: campaign not ended yet\");\n        \n        campaign.status = CampaignStatus.FINISHED;\n        campaign.updatedAt = block.timestamp;\n        \n        emit CampaignClosed(campaignId);\n    }\n    \n    /**\n     * @dev Initiates winner selection using Chainlink VRF\n     */\n    function selectWinners(uint256 campaignId) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n        campaignNotBurned(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.FINISHED, \n                \"SqudyCampaignManager: campaign not finished\");\n        require(campaign.participantCount > 0, \n                \"SqudyCampaignManager: no participants\");\n        \n        // Request random number from Chainlink VRF\n        uint256 requestId = COORDINATOR.requestRandomWords(\n            KEY_HASH,\n            SUBSCRIPTION_ID,\n            REQUEST_CONFIRMATIONS,\n            CALLBACK_GAS_LIMIT,\n            uint32(campaign.participantCount) // number of random words needed\n        );\n        \n        vrfRequests[requestId] = campaignId;\n    }\n    \n    /**\n     * @dev Burns all staked tokens after winner selection\n     */\n    function burnAllTokens(uint256 campaignId) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n        campaignNotBurned(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.FINISHED, \n                \"SqudyCampaignManager: campaign not finished\");\n        require(campaign.winners.length > 0, \n                \"SqudyCampaignManager: winners not selected\");\n        require(campaign.currentAmount > 0, \n                \"SqudyCampaignManager: no tokens to burn\");\n        \n        // Burn all staked tokens\n        squdyToken.burnFrom(address(this), campaign.currentAmount);\n        \n        campaign.tokensAreBurned = true;\n        campaign.totalBurned = campaign.currentAmount;\n        campaign.updatedAt = block.timestamp;\n        \n        emit TokensBurned(campaignId, campaign.currentAmount);\n    }\n    \n    /**\n     * @dev Adds a new admin\n     */\n    function addAdmin(address admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(admin != address(0), \"SqudyCampaignManager: invalid admin address\");\n        _grantRole(ADMIN_ROLE, admin);\n        emit AdminAdded(admin);\n    }\n    \n    /**\n     * @dev Removes an admin\n     */\n    function removeAdmin(address admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(admin != msg.sender, \"SqudyCampaignManager: cannot remove self\");\n        _revokeRole(ADMIN_ROLE, admin);\n        emit AdminRemoved(admin);\n    }\n\n    // ============ USER FUNCTIONS ============\n    \n    /**\n     * @dev Allows users to stake SQUDY tokens in a campaign\n     * @param campaignId The campaign ID to stake in\n     * @param amount Amount of tokens to stake (must be multiple of ticketAmount)\n     */\n    function stakeSQUDY(uint256 campaignId, uint256 amount) \n        external \n        nonReentrant \n        campaignExists(campaignId) \n        campaignActive(campaignId) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        require(amount > 0, \"SqudyCampaignManager: amount must be greater than 0\");\n        require(amount % campaign.ticketAmount == 0, \n                \"SqudyCampaignManager: amount must be multiple of ticket amount\");\n        require(campaign.currentAmount + amount <= campaign.hardCap, \n                \"SqudyCampaignManager: would exceed hard cap\");\n        \n        // Check if user already participated\n        Participant storage participant = participants[campaignId][msg.sender];\n        uint256 ticketCount = amount / campaign.ticketAmount;\n        \n        if (participant.stakedAmount == 0) {\n            // New participant\n            participant.stakedAmount = amount;\n            participant.ticketCount = ticketCount;\n            participant.joinedAt = block.timestamp;\n            \n            campaignParticipants[campaignId].push(msg.sender);\n            participantIndexes[campaignId][campaign.participantCount] = msg.sender;\n            campaign.participantCount++;\n        } else {\n            // Existing participant - add to existing stake\n            participant.stakedAmount += amount;\n            participant.ticketCount += ticketCount;\n        }\n        \n        campaign.currentAmount += amount;\n        campaign.updatedAt = block.timestamp;\n        \n        // Transfer tokens from user to contract\n        require(squdyToken.transferFrom(msg.sender, address(this), amount), \n                \"SqudyCampaignManager: token transfer failed\");\n        \n        emit UserStaked(campaignId, msg.sender, amount, ticketCount);\n    }\n    \n    /**\n     * @dev Marks social media tasks as completed for a user\n     * @param campaignId The campaign ID\n     * @param user The user address\n     */\n    function confirmSocialTasks(uint256 campaignId, address user) \n        external \n        onlyOperator \n        campaignExists(campaignId) \n    {\n        require(participants[campaignId][user].stakedAmount > 0, \n                \"SqudyCampaignManager: user not participating\");\n        require(!participants[campaignId][user].hasCompletedSocial, \n                \"SqudyCampaignManager: social tasks already completed\");\n        \n        participants[campaignId][user].hasCompletedSocial = true;\n        \n        emit SocialTasksCompleted(campaignId, user);\n    }\n    \n    /**\n     * @dev Gets the ticket count for a user in a campaign\n     */\n    function getTicketCount(uint256 campaignId, address user) \n        external \n        view \n        campaignExists(campaignId) \n        returns (uint256) \n    {\n        return participants[campaignId][user].ticketCount;\n    }\n    \n    /**\n     * @dev Checks if a user is eligible for winning (has completed social tasks)\n     */\n    function isEligibleForWinning(uint256 campaignId, address user) \n        external \n        view \n        campaignExists(campaignId) \n        returns (bool) \n    {\n        Participant storage participant = participants[campaignId][user];\n        return participant.stakedAmount > 0 && participant.hasCompletedSocial;\n    }\n\n    // ============ VRF CALLBACK ============\n    \n    /**\n     * @dev Callback function used by VRF Coordinator to return random numbers\n     */\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) \n        internal \n        override \n    {\n        uint256 campaignId = vrfRequests[requestId];\n        require(campaignId != 0, \"SqudyCampaignManager: invalid request ID\");\n        \n        Campaign storage campaign = campaigns[campaignId];\n        require(campaign.status == CampaignStatus.FINISHED, \n                \"SqudyCampaignManager: campaign not finished\");\n        \n        // Select winners based on random numbers and ticket counts\n        address[] memory winners = _selectWinners(campaignId, randomWords);\n        campaign.winners = winners;\n        campaign.winnerSelectionTxHash = bytes32(requestId);\n        campaign.updatedAt = block.timestamp;\n        \n        emit WinnersSelected(campaignId, winners, bytes32(requestId));\n    }\n    \n    /**\n     * @dev Internal function to select winners using weighted lottery\n     */\n    function _selectWinners(uint256 campaignId, uint256[] memory randomWords) \n        internal \n        returns (address[] memory) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        uint256 totalTickets = 0;\n        uint256 eligibleParticipants = 0;\n        \n        // Count total tickets and eligible participants\n        for (uint256 i = 0; i < campaign.participantCount; i++) {\n            address participant = participantIndexes[campaignId][i];\n            Participant storage p = participants[campaignId][participant];\n            if (p.hasCompletedSocial) {\n                totalTickets += p.ticketCount;\n                eligibleParticipants++;\n            }\n        }\n        \n        require(totalTickets > 0, \"SqudyCampaignManager: no eligible participants\");\n        \n        // Select winners based on prize count\n        uint256 winnerCount = campaign.prizes.length;\n        address[] memory winners = new address[](winnerCount);\n        uint256 winnersSelected = 0;\n        \n        for (uint256 i = 0; i < randomWords.length && winnersSelected < winnerCount; i++) {\n            uint256 randomTicket = randomWords[i] % totalTickets;\n            address selectedWinner = _findWinnerByTicket(campaignId, randomTicket);\n            \n            // Check if this winner was already selected\n            bool alreadySelected = false;\n            for (uint256 j = 0; j < winnersSelected; j++) {\n                if (winners[j] == selectedWinner) {\n                    alreadySelected = true;\n                    break;\n                }\n            }\n            \n            if (!alreadySelected) {\n                winners[winnersSelected] = selectedWinner;\n                participants[campaignId][selectedWinner].isWinner = true;\n                participants[campaignId][selectedWinner].prizeIndex = winnersSelected;\n                winnersSelected++;\n            }\n        }\n        \n        return winners;\n    }\n    \n    /**\n     * @dev Internal function to find winner by ticket number\n     */\n    function _findWinnerByTicket(uint256 campaignId, uint256 targetTicket) \n        internal \n        view \n        returns (address) \n    {\n        Campaign storage campaign = campaigns[campaignId];\n        uint256 currentTicket = 0;\n        \n        for (uint256 i = 0; i < campaign.participantCount; i++) {\n            address participant = participantIndexes[campaignId][i];\n            Participant storage p = participants[campaignId][participant];\n            \n            if (p.hasCompletedSocial) {\n                currentTicket += p.ticketCount;\n                if (targetTicket < currentTicket) {\n                    return participant;\n                }\n            }\n        }\n        \n        // Fallback (should not happen if totalTickets is correct)\n        return participantIndexes[campaignId][0];\n    }\n\n    // ============ VIEW FUNCTIONS ============\n    \n    /**\n     * @dev Gets campaign details\n     */\n    function getCampaign(uint256 campaignId) \n        external \n        view \n        campaignExists(campaignId) \n        returns (Campaign memory) \n    {\n        return campaigns[campaignId];\n    }\n    \n    /**\n     * @dev Gets participant details\n     */\n    function getParticipant(uint256 campaignId, address user) \n        external \n        view \n        campaignExists(campaignId) \n        returns (Participant memory) \n    {\n        return participants[campaignId][user];\n    }\n    \n    /**\n     * @dev Gets all participants for a campaign\n     */\n    function getCampaignParticipants(uint256 campaignId) \n        external \n        view \n        campaignExists(campaignId) \n        returns (address[] memory) \n    {\n        return campaignParticipants[campaignId];\n    }\n    \n    /**\n     * @dev Gets total number of campaigns\n     */\n    function getCampaignCount() external view returns (uint256) {\n        return _campaignIds;\n    }\n    \n    /**\n     * @dev Gets campaigns by status\n     */\n    function getCampaignsByStatus(CampaignStatus status) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        uint256 count = 0;\n        uint256 totalCampaigns = _campaignIds;\n        \n        // Count campaigns with the specified status\n        for (uint256 i = 1; i <= totalCampaigns; i++) {\n            if (campaigns[i].status == status) {\n                count++;\n            }\n        }\n        \n        // Create array with campaigns of the specified status\n        uint256[] memory result = new uint256[](count);\n        uint256 index = 0;\n        \n        for (uint256 i = 1; i <= totalCampaigns; i++) {\n            if (campaigns[i].status == status) {\n                result[index] = i;\n                index++;\n            }\n        }\n        \n        return result;\n    }\n\n    // ============ EMERGENCY FUNCTIONS ============\n    \n    /**\n     * @dev Emergency pause function\n     */\n    function emergencyPause() external onlyAdmin {\n        _pause();\n    }\n    \n    /**\n     * @dev Emergency unpause function\n     */\n    function emergencyUnpause() external onlyAdmin {\n        _unpause();\n    }\n    \n    /**\n     * @dev Emergency function to recover tokens (only if not burned)\n     */\n    function emergencyRecoverTokens(address token, address to) \n        external \n        onlyAdmin \n    {\n        require(token != address(squdyToken), \"SqudyCampaignManager: cannot recover SQUDY tokens\");\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        require(balance > 0, \"SqudyCampaignManager: no tokens to recover\");\n        \n        IERC20(token).transfer(to, balance);\n    }\n} "}},"settings":{"viaIR":true,"optimizer":{"enabled":true,"runs":200},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[95]},"id":96,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"VRFCoordinatorV2Interface","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":95,"linearizedBaseContracts":[95],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"97:267:0","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":12,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:0","nodeType":"FunctionDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"392:2:0"},"returnParameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12,"src":"418:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4,"name":"uint16","nodeType":"ElementaryTypeName","src":"418:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12,"src":"426:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":6,"name":"uint32","nodeType":"ElementaryTypeName","src":"426:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":10,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":12,"src":"434:16:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"434:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":9,"nodeType":"ArrayTypeName","src":"434:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"417:34:0"},"scope":95,"src":"367:85:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"456:1511:0","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":28,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"1979:18:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"keyHash","nameLocation":"2011:7:0","nodeType":"VariableDeclaration","scope":28,"src":"2003:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":14,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2003:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":17,"mutability":"mutable","name":"subId","nameLocation":"2031:5:0","nodeType":"VariableDeclaration","scope":28,"src":"2024:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":16,"name":"uint64","nodeType":"ElementaryTypeName","src":"2024:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":19,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2049:27:0","nodeType":"VariableDeclaration","scope":28,"src":"2042:34:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":18,"name":"uint16","nodeType":"ElementaryTypeName","src":"2042:6:0","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":21,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2089:16:0","nodeType":"VariableDeclaration","scope":28,"src":"2082:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":20,"name":"uint32","nodeType":"ElementaryTypeName","src":"2082:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"numWords","nameLocation":"2118:8:0","nodeType":"VariableDeclaration","scope":28,"src":"2111:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":22,"name":"uint32","nodeType":"ElementaryTypeName","src":"2111:6:0","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"1997:133:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"requestId","nameLocation":"2157:9:0","nodeType":"VariableDeclaration","scope":28,"src":"2149:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":25,"name":"uint256","nodeType":"ElementaryTypeName","src":"2149:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2148:19:0"},"scope":95,"src":"1970:198:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"2172:384:0","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":34,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2568:18:0","nodeType":"FunctionDefinition","parameters":{"id":30,"nodeType":"ParameterList","parameters":[],"src":"2586:2:0"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"mutability":"mutable","name":"subId","nameLocation":"2614:5:0","nodeType":"VariableDeclaration","scope":34,"src":"2607:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":31,"name":"uint64","nodeType":"ElementaryTypeName","src":"2607:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2606:14:0"},"scope":95,"src":"2559:62:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"2625:381:0","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":49,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3018:15:0","nodeType":"FunctionDefinition","parameters":{"id":38,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"subId","nameLocation":"3046:5:0","nodeType":"VariableDeclaration","scope":49,"src":"3039:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":36,"name":"uint64","nodeType":"ElementaryTypeName","src":"3039:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3033:22:0"},"returnParameters":{"id":48,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"balance","nameLocation":"3086:7:0","nodeType":"VariableDeclaration","scope":49,"src":"3079:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":39,"name":"uint96","nodeType":"ElementaryTypeName","src":"3079:6:0","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":42,"mutability":"mutable","name":"reqCount","nameLocation":"3102:8:0","nodeType":"VariableDeclaration","scope":49,"src":"3095:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":41,"name":"uint64","nodeType":"ElementaryTypeName","src":"3095:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":44,"mutability":"mutable","name":"owner","nameLocation":"3120:5:0","nodeType":"VariableDeclaration","scope":49,"src":"3112:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":43,"name":"address","nodeType":"ElementaryTypeName","src":"3112:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":47,"mutability":"mutable","name":"consumers","nameLocation":"3144:9:0","nodeType":"VariableDeclaration","scope":49,"src":"3127:26:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"3127:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":46,"nodeType":"ArrayTypeName","src":"3127:9:0","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3078:76:0"},"scope":95,"src":"3009:146:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"3159:164:0","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":57,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3335:32:0","nodeType":"FunctionDefinition","parameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":52,"mutability":"mutable","name":"subId","nameLocation":"3375:5:0","nodeType":"VariableDeclaration","scope":57,"src":"3368:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":51,"name":"uint64","nodeType":"ElementaryTypeName","src":"3368:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":54,"mutability":"mutable","name":"newOwner","nameLocation":"3390:8:0","nodeType":"VariableDeclaration","scope":57,"src":"3382:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"3382:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3367:32:0"},"returnParameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"3408:0:0"},"scope":95,"src":"3326:83:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"3413:212:0","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":63,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3637:31:0","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[{"constant":false,"id":60,"mutability":"mutable","name":"subId","nameLocation":"3676:5:0","nodeType":"VariableDeclaration","scope":63,"src":"3669:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":59,"name":"uint64","nodeType":"ElementaryTypeName","src":"3669:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3668:14:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"3691:0:0"},"scope":95,"src":"3628:64:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"3696:170:0","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":71,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3878:11:0","nodeType":"FunctionDefinition","parameters":{"id":69,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"subId","nameLocation":"3897:5:0","nodeType":"VariableDeclaration","scope":71,"src":"3890:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":65,"name":"uint64","nodeType":"ElementaryTypeName","src":"3890:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":68,"mutability":"mutable","name":"consumer","nameLocation":"3912:8:0","nodeType":"VariableDeclaration","scope":71,"src":"3904:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3889:32:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[],"src":"3930:0:0"},"scope":95,"src":"3869:62:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":72,"nodeType":"StructuredDocumentation","src":"3935:172:0","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":79,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4119:14:0","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":74,"mutability":"mutable","name":"subId","nameLocation":"4141:5:0","nodeType":"VariableDeclaration","scope":79,"src":"4134:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":73,"name":"uint64","nodeType":"ElementaryTypeName","src":"4134:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":76,"mutability":"mutable","name":"consumer","nameLocation":"4156:8:0","nodeType":"VariableDeclaration","scope":79,"src":"4148:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"4148:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4133:32:0"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[],"src":"4174:0:0"},"scope":95,"src":"4110:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"4179:140:0","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":87,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4331:18:0","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"subId","nameLocation":"4357:5:0","nodeType":"VariableDeclaration","scope":87,"src":"4350:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":81,"name":"uint64","nodeType":"ElementaryTypeName","src":"4350:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"to","nameLocation":"4372:2:0","nodeType":"VariableDeclaration","scope":87,"src":"4364:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"4364:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4349:26:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"4384:0:0"},"scope":95,"src":"4322:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":94,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4690:20:0","nodeType":"FunctionDefinition","parameters":{"id":90,"nodeType":"ParameterList","parameters":[{"constant":false,"id":89,"mutability":"mutable","name":"subId","nameLocation":"4718:5:0","nodeType":"VariableDeclaration","scope":94,"src":"4711:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":88,"name":"uint64","nodeType":"ElementaryTypeName","src":"4711:6:0","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4710:14:0"},"returnParameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":94,"src":"4748:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":91,"name":"bool","nodeType":"ElementaryTypeName","src":"4748:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4747:6:0"},"scope":95,"src":"4681:73:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":96,"src":"57:4699:0","usedErrors":[],"usedEvents":[]}],"src":"32:4725:0"},"id":0},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[153]},"id":154,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":97,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":true,"baseContracts":[],"canonicalName":"VRFConsumerBaseV2","contractDependencies":[],"contractKind":"contract","documentation":{"id":98,"nodeType":"StructuredDocumentation","src":"57:5275:1","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":153,"linearizedBaseContracts":[153],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:1","nodeType":"ContractDefinition","nodes":[{"errorSelector":"1cf993f4","id":104,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:1","nodeType":"ErrorDefinition","parameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"have","nameLocation":"5413:4:1","nodeType":"VariableDeclaration","scope":104,"src":"5405:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"want","nameLocation":"5427:4:1","nodeType":"VariableDeclaration","scope":104,"src":"5419:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:1"},"src":"5373:60:1"},{"constant":false,"id":106,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:1","nodeType":"VariableDeclaration","scope":153,"src":"5436:40:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":116,"nodeType":"Block","src":"5593:43:1","statements":[{"expression":{"id":114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":112,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"5599:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":113,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":109,"src":"5616:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":115,"nodeType":"ExpressionStatement","src":"5599:32:1"}]},"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"5481:72:1","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":117,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:1","nodeType":"VariableDeclaration","scope":117,"src":"5568:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:1"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"5593:0:1"},"scope":153,"src":"5556:80:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":118,"nodeType":"StructuredDocumentation","src":"5640:686:1","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":126,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:1","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":120,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:1","nodeType":"VariableDeclaration","scope":126,"src":"6357:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":119,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":123,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:1","nodeType":"VariableDeclaration","scope":126,"src":"6376:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":121,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":122,"nodeType":"ArrayTypeName","src":"6376:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:1"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"6422:0:1"},"scope":153,"src":"6329:94:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":151,"nodeType":"Block","src":"6707:167:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":134,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6721:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6717:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":136,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"6731:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":145,"nodeType":"IfStatement","src":"6713:109:1","trueBody":{"id":144,"nodeType":"Block","src":"6747:75:1","statements":[{"errorCall":{"arguments":[{"expression":{"id":139,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6792:6:1","memberName":"sender","nodeType":"MemberAccess","src":"6788:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":141,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"6800:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":138,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"6762:25:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":142,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6762:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":143,"nodeType":"RevertStatement","src":"6755:60:1"}]}},{"expression":{"arguments":[{"id":147,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"6846:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":148,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"6857:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":146,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"6827:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6827:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":150,"nodeType":"ExpressionStatement","src":"6827:42:1"}]},"functionSelector":"1fe543e3","id":152,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:1","nodeType":"FunctionDefinition","parameters":{"id":132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":128,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:1","nodeType":"VariableDeclaration","scope":152,"src":"6649:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":127,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":131,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:1","nodeType":"VariableDeclaration","scope":152,"src":"6668:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":129,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":130,"nodeType":"ArrayTypeName","src":"6668:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:1"},"returnParameters":{"id":133,"nodeType":"ParameterList","parameters":[],"src":"6707:0:1"},"scope":153,"src":"6618:256:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":154,"src":"5333:1543:1","usedErrors":[104],"usedEvents":[]}],"src":"32:6845:1"},"id":1},"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[450],"Context":[1513],"ERC165":[1714],"IAccessControl":[533],"IERC165":[1726]},"id":451,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":155,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"108:24:2"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":451,"sourceUnit":534,"src":"134:52:2","symbolAliases":[{"foreign":{"id":156,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"142:14:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":451,"sourceUnit":1514,"src":"187:45:2","symbolAliases":[{"foreign":{"id":158,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"195:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":162,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":451,"sourceUnit":1715,"src":"233:66:2","symbolAliases":[{"foreign":{"id":160,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"241:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":161,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"250:6:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":164,"name":"Context","nameLocations":["1997:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":1513,"src":"1997:7:2"},"id":165,"nodeType":"InheritanceSpecifier","src":"1997:7:2"},{"baseName":{"id":166,"name":"IAccessControl","nameLocations":["2006:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":533,"src":"2006:14:2"},"id":167,"nodeType":"InheritanceSpecifier","src":"2006:14:2"},{"baseName":{"id":168,"name":"ERC165","nameLocations":["2022:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":1714,"src":"2022:6:2"},"id":169,"nodeType":"InheritanceSpecifier","src":"2022:6:2"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":163,"nodeType":"StructuredDocumentation","src":"301:1660:2","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":450,"linearizedBaseContracts":[450,1714,1726,533,1513],"name":"AccessControl","nameLocation":"1980:13:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":176,"members":[{"constant":false,"id":173,"mutability":"mutable","name":"hasRole","nameLocation":"2094:7:2","nodeType":"VariableDeclaration","scope":176,"src":"2061:40:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":172,"keyName":"account","keyNameLocation":"2077:7:2","keyType":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"2069:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2061:32:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":171,"name":"bool","nodeType":"ElementaryTypeName","src":"2088:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":175,"mutability":"mutable","name":"adminRole","nameLocation":"2119:9:2","nodeType":"VariableDeclaration","scope":176,"src":"2111:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":174,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2042:8:2","nodeType":"StructDefinition","scope":450,"src":"2035:100:2","visibility":"public"},{"constant":false,"id":181,"mutability":"mutable","name":"_roles","nameLocation":"2183:6:2","nodeType":"VariableDeclaration","scope":450,"src":"2141:48:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":180,"keyName":"role","keyNameLocation":"2157:4:2","keyType":{"id":177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2149:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2141:33:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":179,"nodeType":"UserDefinedTypeName","pathNode":{"id":178,"name":"RoleData","nameLocations":["2165:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":176,"src":"2165:8:2"},"referencedDeclaration":176,"src":"2165:8:2","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$176_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":184,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2220:18:2","nodeType":"VariableDeclaration","scope":450,"src":"2196:49:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2196:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2241:4:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":194,"nodeType":"Block","src":"2463:44:2","statements":[{"expression":{"arguments":[{"id":190,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"2484:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":189,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[248,269],"referencedDeclaration":248,"src":"2473:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2473:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":192,"nodeType":"ExpressionStatement","src":"2473:16:2"},{"id":193,"nodeType":"PlaceholderStatement","src":"2499:1:2"}]},"documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"2252:174:2","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with an {AccessControlUnauthorizedAccount} error including the required role."},"id":195,"name":"onlyRole","nameLocation":"2440:8:2","nodeType":"ModifierDefinition","parameters":{"id":188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"role","nameLocation":"2457:4:2","nodeType":"VariableDeclaration","scope":195,"src":"2449:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2449:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2448:14:2"},"src":"2431:76:2","virtual":false,"visibility":"internal"},{"baseFunctions":[1713],"body":{"id":216,"nodeType":"Block","src":"2632:111:2","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":204,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"2649:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":206,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"2669:14:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$533_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$533_$","typeString":"type(contract IAccessControl)"}],"id":205,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2664:4:2","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2664:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$533","typeString":"type(contract IAccessControl)"}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2685:11:2","memberName":"interfaceId","nodeType":"MemberAccess","src":"2664:32:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2649:47:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":212,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":198,"src":"2724:11:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":210,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2700:5:2","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$450_$","typeString":"type(contract super AccessControl)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2706:17:2","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1713,"src":"2700:23:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2700:36:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2649:87:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":203,"id":215,"nodeType":"Return","src":"2642:94:2"}]},"documentation":{"id":196,"nodeType":"StructuredDocumentation","src":"2513:23:2","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":217,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2550:17:2","nodeType":"FunctionDefinition","overrides":{"id":200,"nodeType":"OverrideSpecifier","overrides":[],"src":"2608:8:2"},"parameters":{"id":199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":198,"mutability":"mutable","name":"interfaceId","nameLocation":"2575:11:2","nodeType":"VariableDeclaration","scope":217,"src":"2568:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":197,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2568:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2567:20:2"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":217,"src":"2626:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":201,"name":"bool","nodeType":"ElementaryTypeName","src":"2626:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2625:6:2"},"scope":450,"src":"2541:202:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[500],"body":{"id":234,"nodeType":"Block","src":"2913:53:2","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":227,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"2930:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":229,"indexExpression":{"id":228,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":220,"src":"2937:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2930:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$176_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2943:7:2","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":173,"src":"2930:20:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":232,"indexExpression":{"id":231,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":222,"src":"2951:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2930:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":226,"id":233,"nodeType":"Return","src":"2923:36:2"}]},"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"2749:76:2","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":235,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2839:7:2","nodeType":"FunctionDefinition","parameters":{"id":223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"role","nameLocation":"2855:4:2","nodeType":"VariableDeclaration","scope":235,"src":"2847:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":219,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2847:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":222,"mutability":"mutable","name":"account","nameLocation":"2869:7:2","nodeType":"VariableDeclaration","scope":235,"src":"2861:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":221,"name":"address","nodeType":"ElementaryTypeName","src":"2861:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2846:31:2"},"returnParameters":{"id":226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":235,"src":"2907:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":224,"name":"bool","nodeType":"ElementaryTypeName","src":"2907:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2906:6:2"},"scope":450,"src":"2830:136:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":247,"nodeType":"Block","src":"3231:47:2","statements":[{"expression":{"arguments":[{"id":242,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":238,"src":"3252:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":243,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"3258:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3258:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":241,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[248,269],"referencedDeclaration":269,"src":"3241:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3241:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":246,"nodeType":"ExpressionStatement","src":"3241:30:2"}]},"documentation":{"id":236,"nodeType":"StructuredDocumentation","src":"2972:198:2","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier."},"id":248,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3184:10:2","nodeType":"FunctionDefinition","parameters":{"id":239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":238,"mutability":"mutable","name":"role","nameLocation":"3203:4:2","nodeType":"VariableDeclaration","scope":248,"src":"3195:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3195:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3194:14:2"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[],"src":"3231:0:2"},"scope":450,"src":"3175:103:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":268,"nodeType":"Block","src":"3481:124:2","statements":[{"condition":{"id":260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3495:23:2","subExpression":{"arguments":[{"id":257,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"3504:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":258,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"3510:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":256,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3496:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3496:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":267,"nodeType":"IfStatement","src":"3491:108:2","trueBody":{"id":266,"nodeType":"Block","src":"3520:79:2","statements":[{"errorCall":{"arguments":[{"id":262,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":253,"src":"3574:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":263,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":251,"src":"3583:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":261,"name":"AccessControlUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"3541:32:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,bytes32) pure"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3541:47:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":265,"nodeType":"RevertStatement","src":"3534:54:2"}]}}]},"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"3284:119:2","text":" @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n is missing `role`."},"id":269,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3417:10:2","nodeType":"FunctionDefinition","parameters":{"id":254,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"role","nameLocation":"3436:4:2","nodeType":"VariableDeclaration","scope":269,"src":"3428:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":250,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3428:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":253,"mutability":"mutable","name":"account","nameLocation":"3450:7:2","nodeType":"VariableDeclaration","scope":269,"src":"3442:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":252,"name":"address","nodeType":"ElementaryTypeName","src":"3442:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3427:31:2"},"returnParameters":{"id":255,"nodeType":"ParameterList","parameters":[],"src":"3481:0:2"},"scope":450,"src":"3408:197:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[508],"body":{"id":282,"nodeType":"Block","src":"3860:46:2","statements":[{"expression":{"expression":{"baseExpression":{"id":277,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"3877:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":279,"indexExpression":{"id":278,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"3884:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3877:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$176_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3890:9:2","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":175,"src":"3877:22:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":276,"id":281,"nodeType":"Return","src":"3870:29:2"}]},"documentation":{"id":270,"nodeType":"StructuredDocumentation","src":"3611:170:2","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":283,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"3795:12:2","nodeType":"FunctionDefinition","parameters":{"id":273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":272,"mutability":"mutable","name":"role","nameLocation":"3816:4:2","nodeType":"VariableDeclaration","scope":283,"src":"3808:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":271,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3808:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3807:14:2"},"returnParameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":283,"src":"3851:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":274,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3851:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3850:9:2"},"scope":450,"src":"3786:120:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[516],"body":{"id":301,"nodeType":"Block","src":"4296:42:2","statements":[{"expression":{"arguments":[{"id":297,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"4317:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":298,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"4323:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":296,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"4306:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4306:25:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":300,"nodeType":"ExpressionStatement","src":"4306:25:2"}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"3912:285:2","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":302,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":292,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"4289:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":291,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4276:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4276:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":294,"kind":"modifierInvocation","modifierName":{"id":290,"name":"onlyRole","nameLocations":["4267:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"4267:8:2"},"nodeType":"ModifierInvocation","src":"4267:28:2"}],"name":"grantRole","nameLocation":"4211:9:2","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"role","nameLocation":"4229:4:2","nodeType":"VariableDeclaration","scope":302,"src":"4221:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4221:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"account","nameLocation":"4243:7:2","nodeType":"VariableDeclaration","scope":302,"src":"4235:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"4235:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4220:31:2"},"returnParameters":{"id":295,"nodeType":"ParameterList","parameters":[],"src":"4296:0:2"},"scope":450,"src":"4202:136:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[524],"body":{"id":320,"nodeType":"Block","src":"4713:43:2","statements":[{"expression":{"arguments":[{"id":316,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"4735:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":317,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4741:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":315,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"4723:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4723:26:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":319,"nodeType":"ExpressionStatement","src":"4723:26:2"}]},"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"4344:269:2","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":321,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":311,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"4706:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":310,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4693:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4693:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":313,"kind":"modifierInvocation","modifierName":{"id":309,"name":"onlyRole","nameLocations":["4684:8:2"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"4684:8:2"},"nodeType":"ModifierInvocation","src":"4684:28:2"}],"name":"revokeRole","nameLocation":"4627:10:2","nodeType":"FunctionDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"role","nameLocation":"4646:4:2","nodeType":"VariableDeclaration","scope":321,"src":"4638:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4638:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":307,"mutability":"mutable","name":"account","nameLocation":"4660:7:2","nodeType":"VariableDeclaration","scope":321,"src":"4652:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"4652:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4637:31:2"},"returnParameters":{"id":314,"nodeType":"ParameterList","parameters":[],"src":"4713:0:2"},"scope":450,"src":"4618:138:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[532],"body":{"id":343,"nodeType":"Block","src":"5383:166:2","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":329,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"5397:18:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":330,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"5419:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5419:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5397:34:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":337,"nodeType":"IfStatement","src":"5393:102:2","trueBody":{"id":336,"nodeType":"Block","src":"5433:62:2","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":333,"name":"AccessControlBadConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"5454:28:2","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5454:30:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":335,"nodeType":"RevertStatement","src":"5447:37:2"}]}},{"expression":{"arguments":[{"id":339,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":324,"src":"5517:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":340,"name":"callerConfirmation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"5523:18:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":338,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"5505:11:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5505:37:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":342,"nodeType":"ExpressionStatement","src":"5505:37:2"}]},"documentation":{"id":322,"nodeType":"StructuredDocumentation","src":"4762:537:2","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":344,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"5313:12:2","nodeType":"FunctionDefinition","parameters":{"id":327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":324,"mutability":"mutable","name":"role","nameLocation":"5334:4:2","nodeType":"VariableDeclaration","scope":344,"src":"5326:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5326:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":326,"mutability":"mutable","name":"callerConfirmation","nameLocation":"5348:18:2","nodeType":"VariableDeclaration","scope":344,"src":"5340:26:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":325,"name":"address","nodeType":"ElementaryTypeName","src":"5340:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5325:42:2"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[],"src":"5383:0:2"},"scope":450,"src":"5304:245:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":371,"nodeType":"Block","src":"5747:174:2","statements":[{"assignments":[353],"declarations":[{"constant":false,"id":353,"mutability":"mutable","name":"previousAdminRole","nameLocation":"5765:17:2","nodeType":"VariableDeclaration","scope":371,"src":"5757:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5757:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":357,"initialValue":{"arguments":[{"id":355,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"5798:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":354,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"5785:12:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5785:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5757:46:2"},{"expression":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":358,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"5813:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":360,"indexExpression":{"id":359,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"5820:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5813:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$176_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":361,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5826:9:2","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":175,"src":"5813:22:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":362,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"5838:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5813:34:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":364,"nodeType":"ExpressionStatement","src":"5813:34:2"},{"eventCall":{"arguments":[{"id":366,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"5879:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":367,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"5885:17:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":368,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"5904:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":365,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"5862:16:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5862:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":370,"nodeType":"EmitStatement","src":"5857:57:2"}]},"documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"5555:114:2","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":372,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"5683:13:2","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"role","nameLocation":"5705:4:2","nodeType":"VariableDeclaration","scope":372,"src":"5697:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":346,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5697:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"adminRole","nameLocation":"5719:9:2","nodeType":"VariableDeclaration","scope":372,"src":"5711:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5711:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5696:33:2"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[],"src":"5747:0:2"},"scope":450,"src":"5674:247:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":410,"nodeType":"Block","src":"6238:233:2","statements":[{"condition":{"id":386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6252:23:2","subExpression":{"arguments":[{"id":383,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"6261:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":384,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"6267:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":382,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"6253:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6253:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":408,"nodeType":"Block","src":"6428:37:2","statements":[{"expression":{"hexValue":"66616c7365","id":406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6449:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":381,"id":407,"nodeType":"Return","src":"6442:12:2"}]},"id":409,"nodeType":"IfStatement","src":"6248:217:2","trueBody":{"id":405,"nodeType":"Block","src":"6277:145:2","statements":[{"expression":{"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":387,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"6291:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":389,"indexExpression":{"id":388,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"6298:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6291:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$176_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":390,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6304:7:2","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":173,"src":"6291:20:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":392,"indexExpression":{"id":391,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"6312:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6291:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6323:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"6291:36:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":395,"nodeType":"ExpressionStatement","src":"6291:36:2"},{"eventCall":{"arguments":[{"id":397,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"6358:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":398,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"6364:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":399,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"6373:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6373:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":396,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"6346:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6346:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"EmitStatement","src":"6341:45:2"},{"expression":{"hexValue":"74727565","id":403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6407:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":381,"id":404,"nodeType":"Return","src":"6400:11:2"}]}}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"5927:223:2","text":" @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":411,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"6164:10:2","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"role","nameLocation":"6183:4:2","nodeType":"VariableDeclaration","scope":411,"src":"6175:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6175:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"account","nameLocation":"6197:7:2","nodeType":"VariableDeclaration","scope":411,"src":"6189:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"6189:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6174:31:2"},"returnParameters":{"id":381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":411,"src":"6232:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":379,"name":"bool","nodeType":"ElementaryTypeName","src":"6232:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6231:6:2"},"scope":450,"src":"6155:316:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":448,"nodeType":"Block","src":"6792:233:2","statements":[{"condition":{"arguments":[{"id":422,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"6814:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":423,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"6820:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":421,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"6806:7:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6806:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":446,"nodeType":"Block","src":"6982:37:2","statements":[{"expression":{"hexValue":"66616c7365","id":444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7003:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":420,"id":445,"nodeType":"Return","src":"6996:12:2"}]},"id":447,"nodeType":"IfStatement","src":"6802:217:2","trueBody":{"id":443,"nodeType":"Block","src":"6830:146:2","statements":[{"expression":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":425,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":181,"src":"6844:6:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$176_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":427,"indexExpression":{"id":426,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"6851:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6844:12:2","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$176_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6857:7:2","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":173,"src":"6844:20:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":430,"indexExpression":{"id":429,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"6865:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6844:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6876:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"6844:37:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":433,"nodeType":"ExpressionStatement","src":"6844:37:2"},{"eventCall":{"arguments":[{"id":435,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"6912:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":436,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"6918:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":437,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"6927:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6927:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":434,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"6900:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":439,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6900:40:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":440,"nodeType":"EmitStatement","src":"6895:45:2"},{"expression":{"hexValue":"74727565","id":441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6961:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":420,"id":442,"nodeType":"Return","src":"6954:11:2"}]}}]},"documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"6477:226:2","text":" @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":449,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"6717:11:2","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"role","nameLocation":"6737:4:2","nodeType":"VariableDeclaration","scope":449,"src":"6729:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":413,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6729:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"account","nameLocation":"6751:7:2","nodeType":"VariableDeclaration","scope":449,"src":"6743:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"6743:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6728:31:2"},"returnParameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":449,"src":"6786:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":418,"name":"bool","nodeType":"ElementaryTypeName","src":"6786:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6785:6:2"},"scope":450,"src":"6708:317:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":451,"src":"1962:5065:2","usedErrors":[460,463],"usedEvents":[472,481,490]}],"src":"108:6920:2"},"id":2},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[533]},"id":534,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":452,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"109:24:3"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"135:90:3","text":" @dev External interface of AccessControl declared to support ERC-165 detection."},"fullyImplemented":false,"id":533,"linearizedBaseContracts":[533],"name":"IAccessControl","nameLocation":"236:14:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":454,"nodeType":"StructuredDocumentation","src":"257:56:3","text":" @dev The `account` is missing a role."},"errorSelector":"e2517d3f","id":460,"name":"AccessControlUnauthorizedAccount","nameLocation":"324:32:3","nodeType":"ErrorDefinition","parameters":{"id":459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":456,"mutability":"mutable","name":"account","nameLocation":"365:7:3","nodeType":"VariableDeclaration","scope":460,"src":"357:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":455,"name":"address","nodeType":"ElementaryTypeName","src":"357:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":458,"mutability":"mutable","name":"neededRole","nameLocation":"382:10:3","nodeType":"VariableDeclaration","scope":460,"src":"374:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"374:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:37:3"},"src":"318:76:3"},{"documentation":{"id":461,"nodeType":"StructuredDocumentation","src":"400:148:3","text":" @dev The caller of a function is not the expected one.\n NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."},"errorSelector":"6697b232","id":463,"name":"AccessControlBadConfirmation","nameLocation":"559:28:3","nodeType":"ErrorDefinition","parameters":{"id":462,"nodeType":"ParameterList","parameters":[],"src":"587:2:3"},"src":"553:37:3"},{"anonymous":false,"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"596:254:3","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted to signal this."},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":472,"name":"RoleAdminChanged","nameLocation":"861:16:3","nodeType":"EventDefinition","parameters":{"id":471,"nodeType":"ParameterList","parameters":[{"constant":false,"id":466,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"894:4:3","nodeType":"VariableDeclaration","scope":472,"src":"878:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"878:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":468,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"916:17:3","nodeType":"VariableDeclaration","scope":472,"src":"900:33:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":467,"name":"bytes32","nodeType":"ElementaryTypeName","src":"900:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":470,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"951:12:3","nodeType":"VariableDeclaration","scope":472,"src":"935:28:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"935:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"877:87:3"},"src":"855:110:3"},{"anonymous":false,"documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"971:295:3","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":481,"name":"RoleGranted","nameLocation":"1277:11:3","nodeType":"EventDefinition","parameters":{"id":480,"nodeType":"ParameterList","parameters":[{"constant":false,"id":475,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1305:4:3","nodeType":"VariableDeclaration","scope":481,"src":"1289:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":474,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1289:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":477,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1327:7:3","nodeType":"VariableDeclaration","scope":481,"src":"1311:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":476,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":479,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1352:6:3","nodeType":"VariableDeclaration","scope":481,"src":"1336:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"1336:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1288:71:3"},"src":"1271:89:3"},{"anonymous":false,"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"1366:275:3","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":490,"name":"RoleRevoked","nameLocation":"1652:11:3","nodeType":"EventDefinition","parameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1680:4:3","nodeType":"VariableDeclaration","scope":490,"src":"1664:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1664:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":486,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1702:7:3","nodeType":"VariableDeclaration","scope":490,"src":"1686:23:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":485,"name":"address","nodeType":"ElementaryTypeName","src":"1686:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":488,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1727:6:3","nodeType":"VariableDeclaration","scope":490,"src":"1711:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"1711:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1663:71:3"},"src":"1646:89:3"},{"documentation":{"id":491,"nodeType":"StructuredDocumentation","src":"1741:76:3","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":500,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1831:7:3","nodeType":"FunctionDefinition","parameters":{"id":496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"role","nameLocation":"1847:4:3","nodeType":"VariableDeclaration","scope":500,"src":"1839:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":492,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1839:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":495,"mutability":"mutable","name":"account","nameLocation":"1861:7:3","nodeType":"VariableDeclaration","scope":500,"src":"1853:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":494,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1838:31:3"},"returnParameters":{"id":499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":500,"src":"1893:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":497,"name":"bool","nodeType":"ElementaryTypeName","src":"1893:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1892:6:3"},"scope":533,"src":"1822:77:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":501,"nodeType":"StructuredDocumentation","src":"1905:184:3","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":508,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"2103:12:3","nodeType":"FunctionDefinition","parameters":{"id":504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"role","nameLocation":"2124:4:3","nodeType":"VariableDeclaration","scope":508,"src":"2116:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2116:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2115:14:3"},"returnParameters":{"id":507,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":508,"src":"2153:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":505,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2152:9:3"},"scope":533,"src":"2094:68:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":509,"nodeType":"StructuredDocumentation","src":"2168:239:3","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":516,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2421:9:3","nodeType":"FunctionDefinition","parameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":511,"mutability":"mutable","name":"role","nameLocation":"2439:4:3","nodeType":"VariableDeclaration","scope":516,"src":"2431:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2431:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":513,"mutability":"mutable","name":"account","nameLocation":"2453:7:3","nodeType":"VariableDeclaration","scope":516,"src":"2445:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":512,"name":"address","nodeType":"ElementaryTypeName","src":"2445:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2430:31:3"},"returnParameters":{"id":515,"nodeType":"ParameterList","parameters":[],"src":"2470:0:3"},"scope":533,"src":"2412:59:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"2477:223:3","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":524,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2714:10:3","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"role","nameLocation":"2733:4:3","nodeType":"VariableDeclaration","scope":524,"src":"2725:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":518,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2725:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"account","nameLocation":"2747:7:3","nodeType":"VariableDeclaration","scope":524,"src":"2739:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":520,"name":"address","nodeType":"ElementaryTypeName","src":"2739:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2724:31:3"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[],"src":"2764:0:3"},"scope":533,"src":"2705:60:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"2771:491:3","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `callerConfirmation`."},"functionSelector":"36568abe","id":532,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"3276:12:3","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":527,"mutability":"mutable","name":"role","nameLocation":"3297:4:3","nodeType":"VariableDeclaration","scope":532,"src":"3289:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3289:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":529,"mutability":"mutable","name":"callerConfirmation","nameLocation":"3311:18:3","nodeType":"VariableDeclaration","scope":532,"src":"3303:26:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":528,"name":"address","nodeType":"ElementaryTypeName","src":"3303:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3288:42:3"},"returnParameters":{"id":531,"nodeType":"ParameterList","parameters":[],"src":"3339:0:3"},"scope":533,"src":"3267:73:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":534,"src":"226:3116:3","usedErrors":[460,463],"usedEvents":[472,481,490]}],"src":"109:3234:3"},"id":3},"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1513],"Ownable":[681]},"id":682,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":535,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:4"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":537,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":682,"sourceUnit":1514,"src":"128:45:4","symbolAliases":[{"foreign":{"id":536,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"136:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":539,"name":"Context","nameLocations":["692:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":1513,"src":"692:7:4"},"id":540,"nodeType":"InheritanceSpecifier","src":"692:7:4"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":538,"nodeType":"StructuredDocumentation","src":"175:487:4","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":681,"linearizedBaseContracts":[681,1513],"name":"Ownable","nameLocation":"681:7:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":542,"mutability":"mutable","name":"_owner","nameLocation":"722:6:4","nodeType":"VariableDeclaration","scope":681,"src":"706:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":541,"name":"address","nodeType":"ElementaryTypeName","src":"706:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"documentation":{"id":543,"nodeType":"StructuredDocumentation","src":"735:85:4","text":" @dev The caller account is not authorized to perform an operation."},"errorSelector":"118cdaa7","id":547,"name":"OwnableUnauthorizedAccount","nameLocation":"831:26:4","nodeType":"ErrorDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[{"constant":false,"id":545,"mutability":"mutable","name":"account","nameLocation":"866:7:4","nodeType":"VariableDeclaration","scope":547,"src":"858:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":544,"name":"address","nodeType":"ElementaryTypeName","src":"858:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"857:17:4"},"src":"825:50:4"},{"documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"881:82:4","text":" @dev The owner is not a valid owner account. (eg. `address(0)`)"},"errorSelector":"1e4fbdf7","id":552,"name":"OwnableInvalidOwner","nameLocation":"974:19:4","nodeType":"ErrorDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":550,"mutability":"mutable","name":"owner","nameLocation":"1002:5:4","nodeType":"VariableDeclaration","scope":552,"src":"994:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":549,"name":"address","nodeType":"ElementaryTypeName","src":"994:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"993:15:4"},"src":"968:41:4"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":558,"name":"OwnershipTransferred","nameLocation":"1021:20:4","nodeType":"EventDefinition","parameters":{"id":557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":554,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"1058:13:4","nodeType":"VariableDeclaration","scope":558,"src":"1042:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":553,"name":"address","nodeType":"ElementaryTypeName","src":"1042:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":556,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"1089:8:4","nodeType":"VariableDeclaration","scope":558,"src":"1073:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":555,"name":"address","nodeType":"ElementaryTypeName","src":"1073:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1041:57:4"},"src":"1015:84:4"},{"body":{"id":583,"nodeType":"Block","src":"1259:153:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":564,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"1273:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1297:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":566,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1289:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":565,"name":"address","nodeType":"ElementaryTypeName","src":"1289:7:4","typeDescriptions":{}}},"id":568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1289:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1273:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":578,"nodeType":"IfStatement","src":"1269:95:4","trueBody":{"id":577,"nodeType":"Block","src":"1301:63:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1350:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":571,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:4","typeDescriptions":{}}},"id":574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":570,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"1322:19:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":576,"nodeType":"RevertStatement","src":"1315:38:4"}]}},{"expression":{"arguments":[{"id":580,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"1392:12:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":579,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"1373:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1373:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":582,"nodeType":"ExpressionStatement","src":"1373:32:4"}]},"documentation":{"id":559,"nodeType":"StructuredDocumentation","src":"1105:115:4","text":" @dev Initializes the contract setting the address provided by the deployer as the initial owner."},"id":584,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":561,"mutability":"mutable","name":"initialOwner","nameLocation":"1245:12:4","nodeType":"VariableDeclaration","scope":584,"src":"1237:20:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":560,"name":"address","nodeType":"ElementaryTypeName","src":"1237:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1236:22:4"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"1259:0:4"},"scope":681,"src":"1225:187:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"1521:41:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":587,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":618,"src":"1531:11:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1531:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":589,"nodeType":"ExpressionStatement","src":"1531:13:4"},{"id":590,"nodeType":"PlaceholderStatement","src":"1554:1:4"}]},"documentation":{"id":585,"nodeType":"StructuredDocumentation","src":"1418:77:4","text":" @dev Throws if called by any account other than the owner."},"id":592,"name":"onlyOwner","nameLocation":"1509:9:4","nodeType":"ModifierDefinition","parameters":{"id":586,"nodeType":"ParameterList","parameters":[],"src":"1518:2:4"},"src":"1500:62:4","virtual":false,"visibility":"internal"},{"body":{"id":600,"nodeType":"Block","src":"1693:30:4","statements":[{"expression":{"id":598,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"1710:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":597,"id":599,"nodeType":"Return","src":"1703:13:4"}]},"documentation":{"id":593,"nodeType":"StructuredDocumentation","src":"1568:65:4","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":601,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1647:5:4","nodeType":"FunctionDefinition","parameters":{"id":594,"nodeType":"ParameterList","parameters":[],"src":"1652:2:4"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":601,"src":"1684:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":595,"name":"address","nodeType":"ElementaryTypeName","src":"1684:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1683:9:4"},"scope":681,"src":"1638:85:4","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":617,"nodeType":"Block","src":"1841:117:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":605,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1855:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1855:7:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":607,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"1866:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1866:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1855:23:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":616,"nodeType":"IfStatement","src":"1851:101:4","trueBody":{"id":615,"nodeType":"Block","src":"1880:72:4","statements":[{"errorCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":611,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"1928:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1928:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":610,"name":"OwnableUnauthorizedAccount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":547,"src":"1901:26:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1901:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":614,"nodeType":"RevertStatement","src":"1894:47:4"}]}}]},"documentation":{"id":602,"nodeType":"StructuredDocumentation","src":"1729:62:4","text":" @dev Throws if the sender is not the owner."},"id":618,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1805:11:4","nodeType":"FunctionDefinition","parameters":{"id":603,"nodeType":"ParameterList","parameters":[],"src":"1816:2:4"},"returnParameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"1841:0:4"},"scope":681,"src":"1796:162:4","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":631,"nodeType":"Block","src":"2347:47:4","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2384:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2376:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":625,"name":"address","nodeType":"ElementaryTypeName","src":"2376:7:4","typeDescriptions":{}}},"id":628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2376:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":624,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"2357:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2357:30:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":630,"nodeType":"ExpressionStatement","src":"2357:30:4"}]},"documentation":{"id":619,"nodeType":"StructuredDocumentation","src":"1964:324:4","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."},"functionSelector":"715018a6","id":632,"implemented":true,"kind":"function","modifiers":[{"id":622,"kind":"modifierInvocation","modifierName":{"id":621,"name":"onlyOwner","nameLocations":["2337:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"2337:9:4"},"nodeType":"ModifierInvocation","src":"2337:9:4"}],"name":"renounceOwnership","nameLocation":"2302:17:4","nodeType":"FunctionDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[],"src":"2319:2:4"},"returnParameters":{"id":623,"nodeType":"ParameterList","parameters":[],"src":"2347:0:4"},"scope":681,"src":"2293:101:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":659,"nodeType":"Block","src":"2613:145:4","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":640,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"2627:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2647:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2639:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"2639:7:4","typeDescriptions":{}}},"id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2627:22:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":654,"nodeType":"IfStatement","src":"2623:91:4","trueBody":{"id":653,"nodeType":"Block","src":"2651:63:4","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2700:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2692:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":647,"name":"address","nodeType":"ElementaryTypeName","src":"2692:7:4","typeDescriptions":{}}},"id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":646,"name":"OwnableInvalidOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":552,"src":"2672:19:4","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2672:31:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":652,"nodeType":"RevertStatement","src":"2665:38:4"}]}},{"expression":{"arguments":[{"id":656,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"2742:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":655,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":680,"src":"2723:18:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2723:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":658,"nodeType":"ExpressionStatement","src":"2723:28:4"}]},"documentation":{"id":633,"nodeType":"StructuredDocumentation","src":"2400:138:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":660,"implemented":true,"kind":"function","modifiers":[{"id":638,"kind":"modifierInvocation","modifierName":{"id":637,"name":"onlyOwner","nameLocations":["2603:9:4"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"2603:9:4"},"nodeType":"ModifierInvocation","src":"2603:9:4"}],"name":"transferOwnership","nameLocation":"2552:17:4","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":635,"mutability":"mutable","name":"newOwner","nameLocation":"2578:8:4","nodeType":"VariableDeclaration","scope":660,"src":"2570:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":634,"name":"address","nodeType":"ElementaryTypeName","src":"2570:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2569:18:4"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[],"src":"2613:0:4"},"scope":681,"src":"2543:215:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":679,"nodeType":"Block","src":"2975:124:4","statements":[{"assignments":[667],"declarations":[{"constant":false,"id":667,"mutability":"mutable","name":"oldOwner","nameLocation":"2993:8:4","nodeType":"VariableDeclaration","scope":679,"src":"2985:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":666,"name":"address","nodeType":"ElementaryTypeName","src":"2985:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":669,"initialValue":{"id":668,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"3004:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2985:25:4"},{"expression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":670,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"3020:6:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":671,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"3029:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3020:17:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":673,"nodeType":"ExpressionStatement","src":"3020:17:4"},{"eventCall":{"arguments":[{"id":675,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":667,"src":"3073:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":676,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"3083:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":674,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"3052:20:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3052:40:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"EmitStatement","src":"3047:45:4"}]},"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"2764:143:4","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":680,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2921:18:4","nodeType":"FunctionDefinition","parameters":{"id":664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"newOwner","nameLocation":"2948:8:4","nodeType":"VariableDeclaration","scope":680,"src":"2940:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"2940:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2939:18:4"},"returnParameters":{"id":665,"nodeType":"ParameterList","parameters":[],"src":"2975:0:4"},"scope":681,"src":"2912:187:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":682,"src":"663:2438:4","usedErrors":[547,552],"usedEvents":[558]}],"src":"102:3000:4"},"id":4},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","exportedSymbols":{"IERC1155Errors":[818],"IERC20Errors":[723],"IERC721Errors":[771]},"id":819,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":683,"literals":["solidity",">=","0.8",".4"],"nodeType":"PragmaDirective","src":"112:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":684,"nodeType":"StructuredDocumentation","src":"138:141:5","text":" @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."},"fullyImplemented":true,"id":723,"linearizedBaseContracts":[723],"name":"IERC20Errors","nameLocation":"290:12:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":685,"nodeType":"StructuredDocumentation","src":"309:309:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"e450d38c","id":693,"name":"ERC20InsufficientBalance","nameLocation":"629:24:5","nodeType":"ErrorDefinition","parameters":{"id":692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":687,"mutability":"mutable","name":"sender","nameLocation":"662:6:5","nodeType":"VariableDeclaration","scope":693,"src":"654:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":686,"name":"address","nodeType":"ElementaryTypeName","src":"654:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":689,"mutability":"mutable","name":"balance","nameLocation":"678:7:5","nodeType":"VariableDeclaration","scope":693,"src":"670:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":688,"name":"uint256","nodeType":"ElementaryTypeName","src":"670:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":691,"mutability":"mutable","name":"needed","nameLocation":"695:6:5","nodeType":"VariableDeclaration","scope":693,"src":"687:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":690,"name":"uint256","nodeType":"ElementaryTypeName","src":"687:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"653:49:5"},"src":"623:80:5"},{"documentation":{"id":694,"nodeType":"StructuredDocumentation","src":"709:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"96c6fd1e","id":698,"name":"ERC20InvalidSender","nameLocation":"872:18:5","nodeType":"ErrorDefinition","parameters":{"id":697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":696,"mutability":"mutable","name":"sender","nameLocation":"899:6:5","nodeType":"VariableDeclaration","scope":698,"src":"891:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":695,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:16:5"},"src":"866:41:5"},{"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"913:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"ec442f05","id":703,"name":"ERC20InvalidReceiver","nameLocation":"1083:20:5","nodeType":"ErrorDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"receiver","nameLocation":"1112:8:5","nodeType":"VariableDeclaration","scope":703,"src":"1104:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"1104:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1103:18:5"},"src":"1077:45:5"},{"documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"1128:345:5","text":" @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."},"errorSelector":"fb8f41b2","id":712,"name":"ERC20InsufficientAllowance","nameLocation":"1484:26:5","nodeType":"ErrorDefinition","parameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"spender","nameLocation":"1519:7:5","nodeType":"VariableDeclaration","scope":712,"src":"1511:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":705,"name":"address","nodeType":"ElementaryTypeName","src":"1511:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":708,"mutability":"mutable","name":"allowance","nameLocation":"1536:9:5","nodeType":"VariableDeclaration","scope":712,"src":"1528:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":710,"mutability":"mutable","name":"needed","nameLocation":"1555:6:5","nodeType":"VariableDeclaration","scope":712,"src":"1547:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":709,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1510:52:5"},"src":"1478:85:5"},{"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"1569:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"e602df05","id":717,"name":"ERC20InvalidApprover","nameLocation":"1754:20:5","nodeType":"ErrorDefinition","parameters":{"id":716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"approver","nameLocation":"1783:8:5","nodeType":"VariableDeclaration","scope":717,"src":"1775:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":714,"name":"address","nodeType":"ElementaryTypeName","src":"1775:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1774:18:5"},"src":"1748:45:5"},{"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"1799:195:5","text":" @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"94280d62","id":722,"name":"ERC20InvalidSpender","nameLocation":"2005:19:5","nodeType":"ErrorDefinition","parameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"spender","nameLocation":"2033:7:5","nodeType":"VariableDeclaration","scope":722,"src":"2025:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":719,"name":"address","nodeType":"ElementaryTypeName","src":"2025:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2024:17:5"},"src":"1999:43:5"}],"scope":819,"src":"280:1764:5","usedErrors":[693,698,703,712,717,722],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"2046:143:5","text":" @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."},"fullyImplemented":true,"id":771,"linearizedBaseContracts":[771],"name":"IERC721Errors","nameLocation":"2200:13:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":725,"nodeType":"StructuredDocumentation","src":"2220:219:5","text":" @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."},"errorSelector":"89c62b64","id":729,"name":"ERC721InvalidOwner","nameLocation":"2450:18:5","nodeType":"ErrorDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"owner","nameLocation":"2477:5:5","nodeType":"VariableDeclaration","scope":729,"src":"2469:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":726,"name":"address","nodeType":"ElementaryTypeName","src":"2469:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2468:15:5"},"src":"2444:40:5"},{"documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"2490:132:5","text":" @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."},"errorSelector":"7e273289","id":734,"name":"ERC721NonexistentToken","nameLocation":"2633:22:5","nodeType":"ErrorDefinition","parameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"tokenId","nameLocation":"2664:7:5","nodeType":"VariableDeclaration","scope":734,"src":"2656:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":731,"name":"uint256","nodeType":"ElementaryTypeName","src":"2656:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2655:17:5"},"src":"2627:46:5"},{"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"2679:289:5","text":" @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."},"errorSelector":"64283d7b","id":743,"name":"ERC721IncorrectOwner","nameLocation":"2979:20:5","nodeType":"ErrorDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"sender","nameLocation":"3008:6:5","nodeType":"VariableDeclaration","scope":743,"src":"3000:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"3000:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"tokenId","nameLocation":"3024:7:5","nodeType":"VariableDeclaration","scope":743,"src":"3016:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"3016:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"owner","nameLocation":"3041:5:5","nodeType":"VariableDeclaration","scope":743,"src":"3033:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"3033:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2999:48:5"},"src":"2973:75:5"},{"documentation":{"id":744,"nodeType":"StructuredDocumentation","src":"3054:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"73c6ac6e","id":748,"name":"ERC721InvalidSender","nameLocation":"3217:19:5","nodeType":"ErrorDefinition","parameters":{"id":747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":746,"mutability":"mutable","name":"sender","nameLocation":"3245:6:5","nodeType":"VariableDeclaration","scope":748,"src":"3237:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":745,"name":"address","nodeType":"ElementaryTypeName","src":"3237:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3236:16:5"},"src":"3211:42:5"},{"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"3259:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"64a0ae92","id":753,"name":"ERC721InvalidReceiver","nameLocation":"3429:21:5","nodeType":"ErrorDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":751,"mutability":"mutable","name":"receiver","nameLocation":"3459:8:5","nodeType":"VariableDeclaration","scope":753,"src":"3451:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":750,"name":"address","nodeType":"ElementaryTypeName","src":"3451:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3450:18:5"},"src":"3423:46:5"},{"documentation":{"id":754,"nodeType":"StructuredDocumentation","src":"3475:247:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."},"errorSelector":"177e802f","id":760,"name":"ERC721InsufficientApproval","nameLocation":"3733:26:5","nodeType":"ErrorDefinition","parameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":756,"mutability":"mutable","name":"operator","nameLocation":"3768:8:5","nodeType":"VariableDeclaration","scope":760,"src":"3760:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":755,"name":"address","nodeType":"ElementaryTypeName","src":"3760:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":758,"mutability":"mutable","name":"tokenId","nameLocation":"3786:7:5","nodeType":"VariableDeclaration","scope":760,"src":"3778:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":757,"name":"uint256","nodeType":"ElementaryTypeName","src":"3778:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3759:35:5"},"src":"3727:68:5"},{"documentation":{"id":761,"nodeType":"StructuredDocumentation","src":"3801:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"a9fbf51f","id":765,"name":"ERC721InvalidApprover","nameLocation":"3986:21:5","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"approver","nameLocation":"4016:8:5","nodeType":"VariableDeclaration","scope":765,"src":"4008:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":762,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4007:18:5"},"src":"3980:46:5"},{"documentation":{"id":766,"nodeType":"StructuredDocumentation","src":"4032:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"5b08ba18","id":770,"name":"ERC721InvalidOperator","nameLocation":"4240:21:5","nodeType":"ErrorDefinition","parameters":{"id":769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":768,"mutability":"mutable","name":"operator","nameLocation":"4270:8:5","nodeType":"VariableDeclaration","scope":770,"src":"4262:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":767,"name":"address","nodeType":"ElementaryTypeName","src":"4262:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4261:18:5"},"src":"4234:46:5"}],"scope":819,"src":"2190:2092:5","usedErrors":[729,734,743,748,753,760,765,770],"usedEvents":[]},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Errors","contractDependencies":[],"contractKind":"interface","documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"4284:145:5","text":" @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."},"fullyImplemented":true,"id":818,"linearizedBaseContracts":[818],"name":"IERC1155Errors","nameLocation":"4440:14:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"4461:361:5","text":" @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."},"errorSelector":"03dee4c5","id":783,"name":"ERC1155InsufficientBalance","nameLocation":"4833:26:5","nodeType":"ErrorDefinition","parameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"sender","nameLocation":"4868:6:5","nodeType":"VariableDeclaration","scope":783,"src":"4860:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"4860:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"balance","nameLocation":"4884:7:5","nodeType":"VariableDeclaration","scope":783,"src":"4876:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"4876:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":779,"mutability":"mutable","name":"needed","nameLocation":"4901:6:5","nodeType":"VariableDeclaration","scope":783,"src":"4893:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"4893:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":781,"mutability":"mutable","name":"tokenId","nameLocation":"4917:7:5","nodeType":"VariableDeclaration","scope":783,"src":"4909:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":780,"name":"uint256","nodeType":"ElementaryTypeName","src":"4909:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4859:66:5"},"src":"4827:99:5"},{"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"4932:152:5","text":" @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."},"errorSelector":"01a83514","id":788,"name":"ERC1155InvalidSender","nameLocation":"5095:20:5","nodeType":"ErrorDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":786,"mutability":"mutable","name":"sender","nameLocation":"5124:6:5","nodeType":"VariableDeclaration","scope":788,"src":"5116:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":785,"name":"address","nodeType":"ElementaryTypeName","src":"5116:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5115:16:5"},"src":"5089:43:5"},{"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"5138:159:5","text":" @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."},"errorSelector":"57f447ce","id":793,"name":"ERC1155InvalidReceiver","nameLocation":"5308:22:5","nodeType":"ErrorDefinition","parameters":{"id":792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"receiver","nameLocation":"5339:8:5","nodeType":"VariableDeclaration","scope":793,"src":"5331:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"5331:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5330:18:5"},"src":"5302:47:5"},{"documentation":{"id":794,"nodeType":"StructuredDocumentation","src":"5355:256:5","text":" @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."},"errorSelector":"e237d922","id":800,"name":"ERC1155MissingApprovalForAll","nameLocation":"5622:28:5","nodeType":"ErrorDefinition","parameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"operator","nameLocation":"5659:8:5","nodeType":"VariableDeclaration","scope":800,"src":"5651:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":795,"name":"address","nodeType":"ElementaryTypeName","src":"5651:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":798,"mutability":"mutable","name":"owner","nameLocation":"5677:5:5","nodeType":"VariableDeclaration","scope":800,"src":"5669:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":797,"name":"address","nodeType":"ElementaryTypeName","src":"5669:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5650:33:5"},"src":"5616:68:5"},{"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"5690:174:5","text":" @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."},"errorSelector":"3e31884e","id":805,"name":"ERC1155InvalidApprover","nameLocation":"5875:22:5","nodeType":"ErrorDefinition","parameters":{"id":804,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"approver","nameLocation":"5906:8:5","nodeType":"VariableDeclaration","scope":805,"src":"5898:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":802,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5897:18:5"},"src":"5869:47:5"},{"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"5922:197:5","text":" @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."},"errorSelector":"ced3e100","id":810,"name":"ERC1155InvalidOperator","nameLocation":"6130:22:5","nodeType":"ErrorDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"operator","nameLocation":"6161:8:5","nodeType":"VariableDeclaration","scope":810,"src":"6153:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"6153:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6152:18:5"},"src":"6124:47:5"},{"documentation":{"id":811,"nodeType":"StructuredDocumentation","src":"6177:280:5","text":" @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"},"errorSelector":"5b059991","id":817,"name":"ERC1155InvalidArrayLength","nameLocation":"6468:25:5","nodeType":"ErrorDefinition","parameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":813,"mutability":"mutable","name":"idsLength","nameLocation":"6502:9:5","nodeType":"VariableDeclaration","scope":817,"src":"6494:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"6494:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":815,"mutability":"mutable","name":"valuesLength","nameLocation":"6521:12:5","nodeType":"VariableDeclaration","scope":817,"src":"6513:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":814,"name":"uint256","nodeType":"ElementaryTypeName","src":"6513:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6493:41:5"},"src":"6462:73:5"}],"scope":819,"src":"4430:2107:5","usedErrors":[783,788,793,800,805,810,817],"usedEvents":[]}],"src":"112:6426:5"},"id":5},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1513],"ERC20":[1333],"IERC20":[1411],"IERC20Errors":[723],"IERC20Metadata":[1483]},"id":1334,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":820,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":822,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":1412,"src":"131:36:6","symbolAliases":[{"foreign":{"id":821,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"139:6:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":1484,"src":"168:63:6","symbolAliases":[{"foreign":{"id":823,"name":"IERC20Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"176:14:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":826,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":1514,"src":"232:48:6","symbolAliases":[{"foreign":{"id":825,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"240:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC6093.sol","file":"../../interfaces/draft-IERC6093.sol","id":828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1334,"sourceUnit":819,"src":"281:65:6","symbolAliases":[{"foreign":{"id":827,"name":"IERC20Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"289:12:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":830,"name":"Context","nameLocations":["1133:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1513,"src":"1133:7:6"},"id":831,"nodeType":"InheritanceSpecifier","src":"1133:7:6"},{"baseName":{"id":832,"name":"IERC20","nameLocations":["1142:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"1142:6:6"},"id":833,"nodeType":"InheritanceSpecifier","src":"1142:6:6"},{"baseName":{"id":834,"name":"IERC20Metadata","nameLocations":["1150:14:6"],"nodeType":"IdentifierPath","referencedDeclaration":1483,"src":"1150:14:6"},"id":835,"nodeType":"InheritanceSpecifier","src":"1150:14:6"},{"baseName":{"id":836,"name":"IERC20Errors","nameLocations":["1166:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"1166:12:6"},"id":837,"nodeType":"InheritanceSpecifier","src":"1166:12:6"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":829,"nodeType":"StructuredDocumentation","src":"348:757:6","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."},"fullyImplemented":true,"id":1333,"linearizedBaseContracts":[1333,723,1483,1411,1513],"name":"ERC20","nameLocation":"1124:5:6","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":841,"mutability":"mutable","name":"_balances","nameLocation":"1229:9:6","nodeType":"VariableDeclaration","scope":1333,"src":"1185:53:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":840,"keyName":"account","keyNameLocation":"1201:7:6","keyType":{"id":838,"name":"address","nodeType":"ElementaryTypeName","src":"1193:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1185:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"1212:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":847,"mutability":"mutable","name":"_allowances","nameLocation":"1317:11:6","nodeType":"VariableDeclaration","scope":1333,"src":"1245:83:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":846,"keyName":"account","keyNameLocation":"1261:7:6","keyType":{"id":842,"name":"address","nodeType":"ElementaryTypeName","src":"1253:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1245:63:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":845,"keyName":"spender","keyNameLocation":"1288:7:6","keyType":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"1280:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1272:35:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":844,"name":"uint256","nodeType":"ElementaryTypeName","src":"1299:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":849,"mutability":"mutable","name":"_totalSupply","nameLocation":"1351:12:6","nodeType":"VariableDeclaration","scope":1333,"src":"1335:28:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"1335:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":851,"mutability":"mutable","name":"_name","nameLocation":"1385:5:6","nodeType":"VariableDeclaration","scope":1333,"src":"1370:20:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":850,"name":"string","nodeType":"ElementaryTypeName","src":"1370:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":853,"mutability":"mutable","name":"_symbol","nameLocation":"1411:7:6","nodeType":"VariableDeclaration","scope":1333,"src":"1396:22:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":852,"name":"string","nodeType":"ElementaryTypeName","src":"1396:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":869,"nodeType":"Block","src":"1638:57:6","statements":[{"expression":{"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":861,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1648:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":862,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":856,"src":"1656:5:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1648:13:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":864,"nodeType":"ExpressionStatement","src":"1648:13:6"},{"expression":{"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":865,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":866,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":858,"src":"1681:7:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1671:17:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":868,"nodeType":"ExpressionStatement","src":"1671:17:6"}]},"documentation":{"id":854,"nodeType":"StructuredDocumentation","src":"1425:152:6","text":" @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."},"id":870,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":856,"mutability":"mutable","name":"name_","nameLocation":"1608:5:6","nodeType":"VariableDeclaration","scope":870,"src":"1594:19:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":855,"name":"string","nodeType":"ElementaryTypeName","src":"1594:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":858,"mutability":"mutable","name":"symbol_","nameLocation":"1629:7:6","nodeType":"VariableDeclaration","scope":870,"src":"1615:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":857,"name":"string","nodeType":"ElementaryTypeName","src":"1615:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1593:44:6"},"returnParameters":{"id":860,"nodeType":"ParameterList","parameters":[],"src":"1638:0:6"},"scope":1333,"src":"1582:113:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[1470],"body":{"id":878,"nodeType":"Block","src":"1820:29:6","statements":[{"expression":{"id":876,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1837:5:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":875,"id":877,"nodeType":"Return","src":"1830:12:6"}]},"documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"1701:54:6","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":879,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"1769:4:6","nodeType":"FunctionDefinition","parameters":{"id":872,"nodeType":"ParameterList","parameters":[],"src":"1773:2:6"},"returnParameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":879,"src":"1805:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":873,"name":"string","nodeType":"ElementaryTypeName","src":"1805:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1804:15:6"},"scope":1333,"src":"1760:89:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1476],"body":{"id":887,"nodeType":"Block","src":"2024:31:6","statements":[{"expression":{"id":885,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"2041:7:6","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":884,"id":886,"nodeType":"Return","src":"2034:14:6"}]},"documentation":{"id":880,"nodeType":"StructuredDocumentation","src":"1855:102:6","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":888,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1971:6:6","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"1977:2:6"},"returnParameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":888,"src":"2009:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":882,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2008:15:6"},"scope":1333,"src":"1962:93:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1482],"body":{"id":896,"nodeType":"Block","src":"2744:26:6","statements":[{"expression":{"hexValue":"3138","id":894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2761:2:6","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":893,"id":895,"nodeType":"Return","src":"2754:9:6"}]},"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"2061:622:6","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":897,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"2697:8:6","nodeType":"FunctionDefinition","parameters":{"id":890,"nodeType":"ParameterList","parameters":[],"src":"2705:2:6"},"returnParameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":897,"src":"2737:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":891,"name":"uint8","nodeType":"ElementaryTypeName","src":"2737:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"2736:7:6"},"scope":1333,"src":"2688:82:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1360],"body":{"id":905,"nodeType":"Block","src":"2864:36:6","statements":[{"expression":{"id":903,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"2881:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":902,"id":904,"nodeType":"Return","src":"2874:19:6"}]},"documentation":{"id":898,"nodeType":"StructuredDocumentation","src":"2776:22:6","text":"@inheritdoc IERC20"},"functionSelector":"18160ddd","id":906,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2812:11:6","nodeType":"FunctionDefinition","parameters":{"id":899,"nodeType":"ParameterList","parameters":[],"src":"2823:2:6"},"returnParameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":901,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":906,"src":"2855:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":900,"name":"uint256","nodeType":"ElementaryTypeName","src":"2855:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2854:9:6"},"scope":1333,"src":"2803:97:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1368],"body":{"id":918,"nodeType":"Block","src":"3007:42:6","statements":[{"expression":{"baseExpression":{"id":914,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"3024:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":916,"indexExpression":{"id":915,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"3034:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3024:18:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":913,"id":917,"nodeType":"Return","src":"3017:25:6"}]},"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"2906:22:6","text":"@inheritdoc IERC20"},"functionSelector":"70a08231","id":919,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2942:9:6","nodeType":"FunctionDefinition","parameters":{"id":910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"account","nameLocation":"2960:7:6","nodeType":"VariableDeclaration","scope":919,"src":"2952:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"2952:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2951:17:6"},"returnParameters":{"id":913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":919,"src":"2998:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":911,"name":"uint256","nodeType":"ElementaryTypeName","src":"2998:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2997:9:6"},"scope":1333,"src":"2933:116:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1378],"body":{"id":942,"nodeType":"Block","src":"3319:103:6","statements":[{"assignments":[930],"declarations":[{"constant":false,"id":930,"mutability":"mutable","name":"owner","nameLocation":"3337:5:6","nodeType":"VariableDeclaration","scope":942,"src":"3329:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":929,"name":"address","nodeType":"ElementaryTypeName","src":"3329:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":933,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":931,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"3345:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3345:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3329:28:6"},{"expression":{"arguments":[{"id":935,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"3377:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":936,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3384:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":924,"src":"3388:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":934,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"3367:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":939,"nodeType":"ExpressionStatement","src":"3367:27:6"},{"expression":{"hexValue":"74727565","id":940,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3411:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":928,"id":941,"nodeType":"Return","src":"3404:11:6"}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"3055:184:6","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."},"functionSelector":"a9059cbb","id":943,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3253:8:6","nodeType":"FunctionDefinition","parameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"to","nameLocation":"3270:2:6","nodeType":"VariableDeclaration","scope":943,"src":"3262:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"3262:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":924,"mutability":"mutable","name":"value","nameLocation":"3282:5:6","nodeType":"VariableDeclaration","scope":943,"src":"3274:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":923,"name":"uint256","nodeType":"ElementaryTypeName","src":"3274:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3261:27:6"},"returnParameters":{"id":928,"nodeType":"ParameterList","parameters":[{"constant":false,"id":927,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":943,"src":"3313:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":926,"name":"bool","nodeType":"ElementaryTypeName","src":"3313:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3312:6:6"},"scope":1333,"src":"3244:178:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1388],"body":{"id":959,"nodeType":"Block","src":"3544:51:6","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":953,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"3561:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":955,"indexExpression":{"id":954,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3573:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3561:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":957,"indexExpression":{"id":956,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"3580:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3561:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":952,"id":958,"nodeType":"Return","src":"3554:34:6"}]},"documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"3428:22:6","text":"@inheritdoc IERC20"},"functionSelector":"dd62ed3e","id":960,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3464:9:6","nodeType":"FunctionDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":946,"mutability":"mutable","name":"owner","nameLocation":"3482:5:6","nodeType":"VariableDeclaration","scope":960,"src":"3474:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":945,"name":"address","nodeType":"ElementaryTypeName","src":"3474:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"spender","nameLocation":"3497:7:6","nodeType":"VariableDeclaration","scope":960,"src":"3489:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"3489:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3473:32:6"},"returnParameters":{"id":952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":960,"src":"3535:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"3535:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3534:9:6"},"scope":1333,"src":"3455:140:6","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1398],"body":{"id":983,"nodeType":"Block","src":"3981:107:6","statements":[{"assignments":[971],"declarations":[{"constant":false,"id":971,"mutability":"mutable","name":"owner","nameLocation":"3999:5:6","nodeType":"VariableDeclaration","scope":983,"src":"3991:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":970,"name":"address","nodeType":"ElementaryTypeName","src":"3991:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":974,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":972,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"4007:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4007:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3991:28:6"},{"expression":{"arguments":[{"id":976,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"4038:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":977,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":963,"src":"4045:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":978,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"4054:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":975,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1224,1284],"referencedDeclaration":1224,"src":"4029:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4029:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":980,"nodeType":"ExpressionStatement","src":"4029:31:6"},{"expression":{"hexValue":"74727565","id":981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4077:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":969,"id":982,"nodeType":"Return","src":"4070:11:6"}]},"documentation":{"id":961,"nodeType":"StructuredDocumentation","src":"3601:296:6","text":" @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":984,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3911:7:6","nodeType":"FunctionDefinition","parameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":963,"mutability":"mutable","name":"spender","nameLocation":"3927:7:6","nodeType":"VariableDeclaration","scope":984,"src":"3919:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":962,"name":"address","nodeType":"ElementaryTypeName","src":"3919:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":965,"mutability":"mutable","name":"value","nameLocation":"3944:5:6","nodeType":"VariableDeclaration","scope":984,"src":"3936:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":964,"name":"uint256","nodeType":"ElementaryTypeName","src":"3936:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3918:32:6"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":984,"src":"3975:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":967,"name":"bool","nodeType":"ElementaryTypeName","src":"3975:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3974:6:6"},"scope":1333,"src":"3902:186:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1410],"body":{"id":1015,"nodeType":"Block","src":"4773:151:6","statements":[{"assignments":[997],"declarations":[{"constant":false,"id":997,"mutability":"mutable","name":"spender","nameLocation":"4791:7:6","nodeType":"VariableDeclaration","scope":1015,"src":"4783:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":996,"name":"address","nodeType":"ElementaryTypeName","src":"4783:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1000,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":998,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"4801:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4801:12:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4783:30:6"},{"expression":{"arguments":[{"id":1002,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"4839:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1003,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"4845:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1004,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4854:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1001,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"4823:15:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1006,"nodeType":"ExpressionStatement","src":"4823:37:6"},{"expression":{"arguments":[{"id":1008,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"4880:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1009,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"4886:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1010,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":991,"src":"4890:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1007,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"4870:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4870:26:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1012,"nodeType":"ExpressionStatement","src":"4870:26:6"},{"expression":{"hexValue":"74727565","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4913:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":995,"id":1014,"nodeType":"Return","src":"4906:11:6"}]},"documentation":{"id":985,"nodeType":"StructuredDocumentation","src":"4094:581:6","text":" @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."},"functionSelector":"23b872dd","id":1016,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4689:12:6","nodeType":"FunctionDefinition","parameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":987,"mutability":"mutable","name":"from","nameLocation":"4710:4:6","nodeType":"VariableDeclaration","scope":1016,"src":"4702:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":986,"name":"address","nodeType":"ElementaryTypeName","src":"4702:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":989,"mutability":"mutable","name":"to","nameLocation":"4724:2:6","nodeType":"VariableDeclaration","scope":1016,"src":"4716:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":988,"name":"address","nodeType":"ElementaryTypeName","src":"4716:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":991,"mutability":"mutable","name":"value","nameLocation":"4736:5:6","nodeType":"VariableDeclaration","scope":1016,"src":"4728:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":990,"name":"uint256","nodeType":"ElementaryTypeName","src":"4728:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4701:41:6"},"returnParameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1016,"src":"4767:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":993,"name":"bool","nodeType":"ElementaryTypeName","src":"4767:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4766:6:6"},"scope":1333,"src":"4680:244:6","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1062,"nodeType":"Block","src":"5366:231:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1026,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5380:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5396:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5388:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1027,"name":"address","nodeType":"ElementaryTypeName","src":"5388:7:6","typeDescriptions":{}}},"id":1030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5388:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5380:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1040,"nodeType":"IfStatement","src":"5376:86:6","trueBody":{"id":1039,"nodeType":"Block","src":"5400:62:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5448:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1034,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5440:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"5440:7:6","typeDescriptions":{}}},"id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5440:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1032,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"5421:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5421:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1038,"nodeType":"RevertStatement","src":"5414:37:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1041,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"5475:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5489:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1043,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5481:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"5481:7:6","typeDescriptions":{}}},"id":1045,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5481:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5475:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1055,"nodeType":"IfStatement","src":"5471:86:6","trueBody":{"id":1054,"nodeType":"Block","src":"5493:64:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5543:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1049,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5535:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1048,"name":"address","nodeType":"ElementaryTypeName","src":"5535:7:6","typeDescriptions":{}}},"id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1047,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"5514:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5514:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1053,"nodeType":"RevertStatement","src":"5507:39:6"}]}},{"expression":{"arguments":[{"id":1057,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"5574:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1058,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"5580:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1059,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"5584:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1056,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"5566:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5566:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1061,"nodeType":"ExpressionStatement","src":"5566:24:6"}]},"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"4930:362:6","text":" @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":1063,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"5306:9:6","nodeType":"FunctionDefinition","parameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"from","nameLocation":"5324:4:6","nodeType":"VariableDeclaration","scope":1063,"src":"5316:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1018,"name":"address","nodeType":"ElementaryTypeName","src":"5316:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1021,"mutability":"mutable","name":"to","nameLocation":"5338:2:6","nodeType":"VariableDeclaration","scope":1063,"src":"5330:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"5330:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1023,"mutability":"mutable","name":"value","nameLocation":"5350:5:6","nodeType":"VariableDeclaration","scope":1063,"src":"5342:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1022,"name":"uint256","nodeType":"ElementaryTypeName","src":"5342:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5315:41:6"},"returnParameters":{"id":1025,"nodeType":"ParameterList","parameters":[],"src":"5366:0:6"},"scope":1333,"src":"5297:300:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1139,"nodeType":"Block","src":"5987:1032:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1073,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"6001:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6017:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1075,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6009:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1074,"name":"address","nodeType":"ElementaryTypeName","src":"6009:7:6","typeDescriptions":{}}},"id":1077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6009:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6001:18:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1110,"nodeType":"Block","src":"6175:362:6","statements":[{"assignments":[1085],"declarations":[{"constant":false,"id":1085,"mutability":"mutable","name":"fromBalance","nameLocation":"6197:11:6","nodeType":"VariableDeclaration","scope":1110,"src":"6189:19:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1084,"name":"uint256","nodeType":"ElementaryTypeName","src":"6189:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1089,"initialValue":{"baseExpression":{"id":1086,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"6211:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1088,"indexExpression":{"id":1087,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"6221:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6211:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6189:37:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1090,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"6244:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"6258:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6244:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1100,"nodeType":"IfStatement","src":"6240:115:6","trueBody":{"id":1099,"nodeType":"Block","src":"6265:90:6","statements":[{"errorCall":{"arguments":[{"id":1094,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"6315:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1095,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"6321:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1096,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"6334:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1093,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":693,"src":"6290:24:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6290:50:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1098,"nodeType":"RevertStatement","src":"6283:57:6"}]}},{"id":1109,"nodeType":"UncheckedBlock","src":"6368:159:6","statements":[{"expression":{"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1101,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"6475:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1103,"indexExpression":{"id":1102,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"6485:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6475:15:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1104,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"6493:11:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1105,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"6507:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6493:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6475:37:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1108,"nodeType":"ExpressionStatement","src":"6475:37:6"}]}]},"id":1111,"nodeType":"IfStatement","src":"5997:540:6","trueBody":{"id":1083,"nodeType":"Block","src":"6021:148:6","statements":[{"expression":{"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1079,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"6137:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1080,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"6153:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6137:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1082,"nodeType":"ExpressionStatement","src":"6137:21:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1112,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"6551:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6565:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6557:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1113,"name":"address","nodeType":"ElementaryTypeName","src":"6557:7:6","typeDescriptions":{}}},"id":1116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6557:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6551:16:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1131,"nodeType":"Block","src":"6766:206:6","statements":[{"id":1130,"nodeType":"UncheckedBlock","src":"6780:182:6","statements":[{"expression":{"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1124,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"6925:9:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1126,"indexExpression":{"id":1125,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"6935:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6925:13:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"6942:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6925:22:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1129,"nodeType":"ExpressionStatement","src":"6925:22:6"}]}]},"id":1132,"nodeType":"IfStatement","src":"6547:425:6","trueBody":{"id":1123,"nodeType":"Block","src":"6569:191:6","statements":[{"id":1122,"nodeType":"UncheckedBlock","src":"6583:167:6","statements":[{"expression":{"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1118,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"6714:12:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"6730:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6714:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1121,"nodeType":"ExpressionStatement","src":"6714:21:6"}]}]}},{"eventCall":{"arguments":[{"id":1134,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"6996:4:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1135,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"7002:2:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1136,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"7006:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1133,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"6987:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6987:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1138,"nodeType":"EmitStatement","src":"6982:30:6"}]},"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"5603:304:6","text":" @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."},"id":1140,"implemented":true,"kind":"function","modifiers":[],"name":"_update","nameLocation":"5921:7:6","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"mutability":"mutable","name":"from","nameLocation":"5937:4:6","nodeType":"VariableDeclaration","scope":1140,"src":"5929:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1065,"name":"address","nodeType":"ElementaryTypeName","src":"5929:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1068,"mutability":"mutable","name":"to","nameLocation":"5951:2:6","nodeType":"VariableDeclaration","scope":1140,"src":"5943:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1067,"name":"address","nodeType":"ElementaryTypeName","src":"5943:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1070,"mutability":"mutable","name":"value","nameLocation":"5963:5:6","nodeType":"VariableDeclaration","scope":1140,"src":"5955:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"5955:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5928:41:6"},"returnParameters":{"id":1072,"nodeType":"ParameterList","parameters":[],"src":"5987:0:6"},"scope":1333,"src":"5912:1107:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1172,"nodeType":"Block","src":"7418:152:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1148,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"7432:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7451:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7443:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1149,"name":"address","nodeType":"ElementaryTypeName","src":"7443:7:6","typeDescriptions":{}}},"id":1152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7443:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7432:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1162,"nodeType":"IfStatement","src":"7428:91:6","trueBody":{"id":1161,"nodeType":"Block","src":"7455:64:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7505:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1156,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7497:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"7497:7:6","typeDescriptions":{}}},"id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7497:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1154,"name":"ERC20InvalidReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"7476:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7476:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1160,"nodeType":"RevertStatement","src":"7469:39:6"}]}},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7544:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7536:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"7536:7:6","typeDescriptions":{}}},"id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7536:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1168,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"7548:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"7557:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1163,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"7528:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7528:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1171,"nodeType":"ExpressionStatement","src":"7528:35:6"}]},"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"7025:332:6","text":" @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."},"id":1173,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"7371:5:6","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"account","nameLocation":"7385:7:6","nodeType":"VariableDeclaration","scope":1173,"src":"7377:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1142,"name":"address","nodeType":"ElementaryTypeName","src":"7377:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"value","nameLocation":"7402:5:6","nodeType":"VariableDeclaration","scope":1173,"src":"7394:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"7394:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7376:32:6"},"returnParameters":{"id":1147,"nodeType":"ParameterList","parameters":[],"src":"7418:0:6"},"scope":1333,"src":"7362:208:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1205,"nodeType":"Block","src":"7944:150:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1181,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"7958:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7977:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7969:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1182,"name":"address","nodeType":"ElementaryTypeName","src":"7969:7:6","typeDescriptions":{}}},"id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7969:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7958:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1195,"nodeType":"IfStatement","src":"7954:89:6","trueBody":{"id":1194,"nodeType":"Block","src":"7981:62:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8029:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8021:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"8021:7:6","typeDescriptions":{}}},"id":1191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8021:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1187,"name":"ERC20InvalidSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"8002:18:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8002:30:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1193,"nodeType":"RevertStatement","src":"7995:37:6"}]}},{"expression":{"arguments":[{"id":1197,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"8060:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8077:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8069:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1198,"name":"address","nodeType":"ElementaryTypeName","src":"8069:7:6","typeDescriptions":{}}},"id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8069:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1178,"src":"8081:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1196,"name":"_update","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"8052:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8052:35:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1204,"nodeType":"ExpressionStatement","src":"8052:35:6"}]},"documentation":{"id":1174,"nodeType":"StructuredDocumentation","src":"7576:307:6","text":" @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"},"id":1206,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"7897:5:6","nodeType":"FunctionDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1176,"mutability":"mutable","name":"account","nameLocation":"7911:7:6","nodeType":"VariableDeclaration","scope":1206,"src":"7903:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1175,"name":"address","nodeType":"ElementaryTypeName","src":"7903:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1178,"mutability":"mutable","name":"value","nameLocation":"7928:5:6","nodeType":"VariableDeclaration","scope":1206,"src":"7920:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1177,"name":"uint256","nodeType":"ElementaryTypeName","src":"7920:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7902:32:6"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[],"src":"7944:0:6"},"scope":1333,"src":"7888:206:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1223,"nodeType":"Block","src":"8704:54:6","statements":[{"expression":{"arguments":[{"id":1217,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"8723:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1218,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"8730:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1219,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"8739:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":1220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8746:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1216,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1224,1284],"referencedDeclaration":1284,"src":"8714:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8714:37:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"ExpressionStatement","src":"8714:37:6"}]},"documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"8100:525:6","text":" @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."},"id":1224,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"8639:8:6","nodeType":"FunctionDefinition","parameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"owner","nameLocation":"8656:5:6","nodeType":"VariableDeclaration","scope":1224,"src":"8648:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"8648:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1211,"mutability":"mutable","name":"spender","nameLocation":"8671:7:6","nodeType":"VariableDeclaration","scope":1224,"src":"8663:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"8663:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1213,"mutability":"mutable","name":"value","nameLocation":"8688:5:6","nodeType":"VariableDeclaration","scope":1224,"src":"8680:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1212,"name":"uint256","nodeType":"ElementaryTypeName","src":"8680:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8647:47:6"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[],"src":"8704:0:6"},"scope":1333,"src":"8630:128:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1283,"nodeType":"Block","src":"9703:334:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1236,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9717:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1239,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9734:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9726:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"9726:7:6","typeDescriptions":{}}},"id":1240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9726:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9717:19:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1250,"nodeType":"IfStatement","src":"9713:89:6","trueBody":{"id":1249,"nodeType":"Block","src":"9738:64:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1245,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9788:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9780:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1243,"name":"address","nodeType":"ElementaryTypeName","src":"9780:7:6","typeDescriptions":{}}},"id":1246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9780:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1242,"name":"ERC20InvalidApprover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"9759:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9759:32:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1248,"nodeType":"RevertStatement","src":"9752:39:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1251,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"9815:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9834:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9826:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1252,"name":"address","nodeType":"ElementaryTypeName","src":"9826:7:6","typeDescriptions":{}}},"id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9826:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9815:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1265,"nodeType":"IfStatement","src":"9811:90:6","trueBody":{"id":1264,"nodeType":"Block","src":"9838:63:6","statements":[{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9887:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1259,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9879:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1258,"name":"address","nodeType":"ElementaryTypeName","src":"9879:7:6","typeDescriptions":{}}},"id":1261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9879:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1257,"name":"ERC20InvalidSpender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"9859:19:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9859:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1263,"nodeType":"RevertStatement","src":"9852:38:6"}]}},{"expression":{"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1266,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"9910:11:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1269,"indexExpression":{"id":1267,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9922:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9910:18:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1270,"indexExpression":{"id":1268,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"9929:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9910:27:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1271,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"9940:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9910:35:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1273,"nodeType":"ExpressionStatement","src":"9910:35:6"},{"condition":{"id":1274,"name":"emitEvent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"9959:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1282,"nodeType":"IfStatement","src":"9955:76:6","trueBody":{"id":1281,"nodeType":"Block","src":"9970:61:6","statements":[{"eventCall":{"arguments":[{"id":1276,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"9998:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1277,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"10005:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"10014:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1275,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"9989:8:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9989:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1280,"nodeType":"EmitStatement","src":"9984:36:6"}]}}]},"documentation":{"id":1225,"nodeType":"StructuredDocumentation","src":"8764:836:6","text":" @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."},"id":1284,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"9614:8:6","nodeType":"FunctionDefinition","parameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1227,"mutability":"mutable","name":"owner","nameLocation":"9631:5:6","nodeType":"VariableDeclaration","scope":1284,"src":"9623:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1226,"name":"address","nodeType":"ElementaryTypeName","src":"9623:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1229,"mutability":"mutable","name":"spender","nameLocation":"9646:7:6","nodeType":"VariableDeclaration","scope":1284,"src":"9638:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1228,"name":"address","nodeType":"ElementaryTypeName","src":"9638:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"value","nameLocation":"9663:5:6","nodeType":"VariableDeclaration","scope":1284,"src":"9655:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"9655:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1233,"mutability":"mutable","name":"emitEvent","nameLocation":"9675:9:6","nodeType":"VariableDeclaration","scope":1284,"src":"9670:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1232,"name":"bool","nodeType":"ElementaryTypeName","src":"9670:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"9622:63:6"},"returnParameters":{"id":1235,"nodeType":"ParameterList","parameters":[],"src":"9703:0:6"},"scope":1333,"src":"9605:432:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1331,"nodeType":"Block","src":"10408:387:6","statements":[{"assignments":[1295],"declarations":[{"constant":false,"id":1295,"mutability":"mutable","name":"currentAllowance","nameLocation":"10426:16:6","nodeType":"VariableDeclaration","scope":1331,"src":"10418:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1294,"name":"uint256","nodeType":"ElementaryTypeName","src":"10418:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1300,"initialValue":{"arguments":[{"id":1297,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"10455:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1298,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"10462:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1296,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"10445:9:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10445:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10418:52:6"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1301,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"10484:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"arguments":[{"id":1304,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10508:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1303,"name":"uint256","nodeType":"ElementaryTypeName","src":"10508:7:6","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1302,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"10503:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10503:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1306,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10517:3:6","memberName":"max","nodeType":"MemberAccess","src":"10503:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10484:36:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1330,"nodeType":"IfStatement","src":"10480:309:6","trueBody":{"id":1329,"nodeType":"Block","src":"10522:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1308,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"10540:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1309,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"10559:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10540:24:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1318,"nodeType":"IfStatement","src":"10536:130:6","trueBody":{"id":1317,"nodeType":"Block","src":"10566:100:6","statements":[{"errorCall":{"arguments":[{"id":1312,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"10618:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1313,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"10627:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1314,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"10645:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1311,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":712,"src":"10591:26:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10591:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1316,"nodeType":"RevertStatement","src":"10584:67:6"}]}},{"id":1328,"nodeType":"UncheckedBlock","src":"10679:100:6","statements":[{"expression":{"arguments":[{"id":1320,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1287,"src":"10716:5:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1321,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"10723:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1322,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"10732:16:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1323,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1291,"src":"10751:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10732:24:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":1325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10758:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1319,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[1224,1284],"referencedDeclaration":1284,"src":"10707:8:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$","typeString":"function (address,address,uint256,bool)"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10707:57:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1327,"nodeType":"ExpressionStatement","src":"10707:57:6"}]}]}}]},"documentation":{"id":1285,"nodeType":"StructuredDocumentation","src":"10043:271:6","text":" @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."},"id":1332,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"10328:15:6","nodeType":"FunctionDefinition","parameters":{"id":1292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1287,"mutability":"mutable","name":"owner","nameLocation":"10352:5:6","nodeType":"VariableDeclaration","scope":1332,"src":"10344:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1286,"name":"address","nodeType":"ElementaryTypeName","src":"10344:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1289,"mutability":"mutable","name":"spender","nameLocation":"10367:7:6","nodeType":"VariableDeclaration","scope":1332,"src":"10359:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1288,"name":"address","nodeType":"ElementaryTypeName","src":"10359:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1291,"mutability":"mutable","name":"value","nameLocation":"10384:5:6","nodeType":"VariableDeclaration","scope":1332,"src":"10376:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1290,"name":"uint256","nodeType":"ElementaryTypeName","src":"10376:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10343:47:6"},"returnParameters":{"id":1293,"nodeType":"ParameterList","parameters":[],"src":"10408:0:6"},"scope":1333,"src":"10319:476:6","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1334,"src":"1106:9691:6","usedErrors":[693,698,703,712,717,722],"usedEvents":[1345,1354]}],"src":"105:10693:6"},"id":6},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1411]},"id":1412,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1335,"literals":["solidity",">=","0.4",".16"],"nodeType":"PragmaDirective","src":"106:25:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1336,"nodeType":"StructuredDocumentation","src":"133:71:7","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":1411,"linearizedBaseContracts":[1411],"name":"IERC20","nameLocation":"215:6:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"228:158:7","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1345,"name":"Transfer","nameLocation":"397:8:7","nodeType":"EventDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"422:4:7","nodeType":"VariableDeclaration","scope":1345,"src":"406:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"406:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"444:2:7","nodeType":"VariableDeclaration","scope":1345,"src":"428:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"428:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1343,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"456:5:7","nodeType":"VariableDeclaration","scope":1345,"src":"448:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"448:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"405:57:7"},"src":"391:72:7"},{"anonymous":false,"documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"469:148:7","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1354,"name":"Approval","nameLocation":"628:8:7","nodeType":"EventDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"653:5:7","nodeType":"VariableDeclaration","scope":1354,"src":"637:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1347,"name":"address","nodeType":"ElementaryTypeName","src":"637:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1350,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"676:7:7","nodeType":"VariableDeclaration","scope":1354,"src":"660:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1349,"name":"address","nodeType":"ElementaryTypeName","src":"660:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1352,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"693:5:7","nodeType":"VariableDeclaration","scope":1354,"src":"685:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1351,"name":"uint256","nodeType":"ElementaryTypeName","src":"685:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"636:63:7"},"src":"622:78:7"},{"documentation":{"id":1355,"nodeType":"StructuredDocumentation","src":"706:65:7","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":1360,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"785:11:7","nodeType":"FunctionDefinition","parameters":{"id":1356,"nodeType":"ParameterList","parameters":[],"src":"796:2:7"},"returnParameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1360,"src":"822:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1357,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:9:7"},"scope":1411,"src":"776:55:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1361,"nodeType":"StructuredDocumentation","src":"837:71:7","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":1368,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"922:9:7","nodeType":"FunctionDefinition","parameters":{"id":1364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1363,"mutability":"mutable","name":"account","nameLocation":"940:7:7","nodeType":"VariableDeclaration","scope":1368,"src":"932:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1362,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"931:17:7"},"returnParameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1368,"src":"972:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"972:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"971:9:7"},"scope":1411,"src":"913:68:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1369,"nodeType":"StructuredDocumentation","src":"987:213:7","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1378,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1214:8:7","nodeType":"FunctionDefinition","parameters":{"id":1374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"to","nameLocation":"1231:2:7","nodeType":"VariableDeclaration","scope":1378,"src":"1223:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1370,"name":"address","nodeType":"ElementaryTypeName","src":"1223:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1373,"mutability":"mutable","name":"value","nameLocation":"1243:5:7","nodeType":"VariableDeclaration","scope":1378,"src":"1235:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"1235:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1222:27:7"},"returnParameters":{"id":1377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1378,"src":"1268:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1375,"name":"bool","nodeType":"ElementaryTypeName","src":"1268:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1267:6:7"},"scope":1411,"src":"1205:69:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1379,"nodeType":"StructuredDocumentation","src":"1280:264:7","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1388,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1558:9:7","nodeType":"FunctionDefinition","parameters":{"id":1384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"owner","nameLocation":"1576:5:7","nodeType":"VariableDeclaration","scope":1388,"src":"1568:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1380,"name":"address","nodeType":"ElementaryTypeName","src":"1568:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"spender","nameLocation":"1591:7:7","nodeType":"VariableDeclaration","scope":1388,"src":"1583:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1382,"name":"address","nodeType":"ElementaryTypeName","src":"1583:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1567:32:7"},"returnParameters":{"id":1387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1388,"src":"1623:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1385,"name":"uint256","nodeType":"ElementaryTypeName","src":"1623:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:9:7"},"scope":1411,"src":"1549:83:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1389,"nodeType":"StructuredDocumentation","src":"1638:667:7","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1398,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2319:7:7","nodeType":"FunctionDefinition","parameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"spender","nameLocation":"2335:7:7","nodeType":"VariableDeclaration","scope":1398,"src":"2327:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1390,"name":"address","nodeType":"ElementaryTypeName","src":"2327:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1393,"mutability":"mutable","name":"value","nameLocation":"2352:5:7","nodeType":"VariableDeclaration","scope":1398,"src":"2344:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1392,"name":"uint256","nodeType":"ElementaryTypeName","src":"2344:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2326:32:7"},"returnParameters":{"id":1397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"2377:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1395,"name":"bool","nodeType":"ElementaryTypeName","src":"2377:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2376:6:7"},"scope":1411,"src":"2310:73:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"2389:297:7","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1410,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2700:12:7","nodeType":"FunctionDefinition","parameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1401,"mutability":"mutable","name":"from","nameLocation":"2721:4:7","nodeType":"VariableDeclaration","scope":1410,"src":"2713:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1400,"name":"address","nodeType":"ElementaryTypeName","src":"2713:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1403,"mutability":"mutable","name":"to","nameLocation":"2735:2:7","nodeType":"VariableDeclaration","scope":1410,"src":"2727:10:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"2727:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"value","nameLocation":"2747:5:7","nodeType":"VariableDeclaration","scope":1410,"src":"2739:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1404,"name":"uint256","nodeType":"ElementaryTypeName","src":"2739:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2712:41:7"},"returnParameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1408,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1410,"src":"2772:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1407,"name":"bool","nodeType":"ElementaryTypeName","src":"2772:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2771:6:7"},"scope":1411,"src":"2691:87:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1412,"src":"205:2575:7","usedErrors":[],"usedEvents":[1345,1354]}],"src":"106:2675:7"},"id":7},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","exportedSymbols":{"Context":[1513],"ERC20":[1333],"ERC20Burnable":[1457]},"id":1458,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1413,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"124:24:8"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"../ERC20.sol","id":1415,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1458,"sourceUnit":1334,"src":"150:35:8","symbolAliases":[{"foreign":{"id":1414,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"158:5:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../../utils/Context.sol","id":1417,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1458,"sourceUnit":1514,"src":"186:51:8","symbolAliases":[{"foreign":{"id":1416,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"194:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1419,"name":"Context","nameLocations":["483:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1513,"src":"483:7:8"},"id":1420,"nodeType":"InheritanceSpecifier","src":"483:7:8"},{"baseName":{"id":1421,"name":"ERC20","nameLocations":["492:5:8"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"492:5:8"},"id":1422,"nodeType":"InheritanceSpecifier","src":"492:5:8"}],"canonicalName":"ERC20Burnable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1418,"nodeType":"StructuredDocumentation","src":"239:208:8","text":" @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."},"fullyImplemented":true,"id":1457,"linearizedBaseContracts":[1457,1333,723,1483,1411,1513],"name":"ERC20Burnable","nameLocation":"466:13:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":1434,"nodeType":"Block","src":"662:43:8","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1429,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"678:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"678:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1425,"src":"692:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1428,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"672:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"672:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1433,"nodeType":"ExpressionStatement","src":"672:26:8"}]},"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"504:109:8","text":" @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."},"functionSelector":"42966c68","id":1435,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"627:4:8","nodeType":"FunctionDefinition","parameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"value","nameLocation":"640:5:8","nodeType":"VariableDeclaration","scope":1435,"src":"632:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1424,"name":"uint256","nodeType":"ElementaryTypeName","src":"632:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"631:15:8"},"returnParameters":{"id":1427,"nodeType":"ParameterList","parameters":[],"src":"662:0:8"},"scope":1457,"src":"618:87:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1455,"nodeType":"Block","src":"1086:93:8","statements":[{"expression":{"arguments":[{"id":1444,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1112:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1445,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"1121:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1121:12:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1447,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"1135:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1443,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"1096:15:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1096:45:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1449,"nodeType":"ExpressionStatement","src":"1096:45:8"},{"expression":{"arguments":[{"id":1451,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1157:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"1166:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1450,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"1151:5:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1151:21:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1454,"nodeType":"ExpressionStatement","src":"1151:21:8"}]},"documentation":{"id":1436,"nodeType":"StructuredDocumentation","src":"711:305:8","text":" @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."},"functionSelector":"79cc6790","id":1456,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1030:8:8","nodeType":"FunctionDefinition","parameters":{"id":1441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1438,"mutability":"mutable","name":"account","nameLocation":"1047:7:8","nodeType":"VariableDeclaration","scope":1456,"src":"1039:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1437,"name":"address","nodeType":"ElementaryTypeName","src":"1039:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1440,"mutability":"mutable","name":"value","nameLocation":"1064:5:8","nodeType":"VariableDeclaration","scope":1456,"src":"1056:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1038:32:8"},"returnParameters":{"id":1442,"nodeType":"ParameterList","parameters":[],"src":"1086:0:8"},"scope":1457,"src":"1021:158:8","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1458,"src":"448:733:8","usedErrors":[693,698,703,712,717,722],"usedEvents":[1345,1354]}],"src":"124:1058:8"},"id":8},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1411],"IERC20Metadata":[1483]},"id":1484,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1459,"literals":["solidity",">=","0.6",".2"],"nodeType":"PragmaDirective","src":"125:24:9"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1461,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1484,"sourceUnit":1412,"src":"151:37:9","symbolAliases":[{"foreign":{"id":1460,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"159:6:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1463,"name":"IERC20","nameLocations":["306:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":1411,"src":"306:6:9"},"id":1464,"nodeType":"InheritanceSpecifier","src":"306:6:9"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1462,"nodeType":"StructuredDocumentation","src":"190:87:9","text":" @dev Interface for the optional metadata functions from the ERC-20 standard."},"fullyImplemented":false,"id":1483,"linearizedBaseContracts":[1483,1411],"name":"IERC20Metadata","nameLocation":"288:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1465,"nodeType":"StructuredDocumentation","src":"319:54:9","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1470,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"387:4:9","nodeType":"FunctionDefinition","parameters":{"id":1466,"nodeType":"ParameterList","parameters":[],"src":"391:2:9"},"returnParameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1470,"src":"417:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1467,"name":"string","nodeType":"ElementaryTypeName","src":"417:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"416:15:9"},"scope":1483,"src":"378:54:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1471,"nodeType":"StructuredDocumentation","src":"438:56:9","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1476,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"508:6:9","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[],"src":"514:2:9"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1474,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1476,"src":"540:13:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1473,"name":"string","nodeType":"ElementaryTypeName","src":"540:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"539:15:9"},"scope":1483,"src":"499:56:9","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"561:65:9","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1482,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"640:8:9","nodeType":"FunctionDefinition","parameters":{"id":1478,"nodeType":"ParameterList","parameters":[],"src":"648:2:9"},"returnParameters":{"id":1481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1482,"src":"674:5:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1479,"name":"uint8","nodeType":"ElementaryTypeName","src":"674:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"673:7:9"},"scope":1483,"src":"631:50:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1484,"src":"278:405:9","usedErrors":[],"usedEvents":[1345,1354]}],"src":"125:559:9"},"id":9},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1513]},"id":1514,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1485,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:10"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1486,"nodeType":"StructuredDocumentation","src":"127:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1513,"linearizedBaseContracts":[1513],"name":"Context","nameLocation":"642:7:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":1494,"nodeType":"Block","src":"718:34:10","statements":[{"expression":{"expression":{"id":1491,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:10","memberName":"sender","nodeType":"MemberAccess","src":"735:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1490,"id":1493,"nodeType":"Return","src":"728:17:10"}]},"id":1495,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:10","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"675:2:10"},"returnParameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1495,"src":"709:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1488,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:10"},"scope":1513,"src":"656:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1503,"nodeType":"Block","src":"825:32:10","statements":[{"expression":{"expression":{"id":1500,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:10","memberName":"data","nodeType":"MemberAccess","src":"842:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1499,"id":1502,"nodeType":"Return","src":"835:15:10"}]},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:10","nodeType":"FunctionDefinition","parameters":{"id":1496,"nodeType":"ParameterList","parameters":[],"src":"775:2:10"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1504,"src":"809:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1497,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:10"},"scope":1513,"src":"758:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1511,"nodeType":"Block","src":"935:25:10","statements":[{"expression":{"hexValue":"30","id":1509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1508,"id":1510,"nodeType":"Return","src":"945:8:10"}]},"id":1512,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:10","nodeType":"FunctionDefinition","parameters":{"id":1505,"nodeType":"ParameterList","parameters":[],"src":"892:2:10"},"returnParameters":{"id":1508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1507,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1512,"src":"926:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1506,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:10"},"scope":1513,"src":"863:97:10","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1514,"src":"624:338:10","usedErrors":[],"usedEvents":[]}],"src":"101:862:10"},"id":10},"@openzeppelin/contracts/utils/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","exportedSymbols":{"Context":[1513],"Pausable":[1621]},"id":1622,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1515,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"102:24:11"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":1517,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1622,"sourceUnit":1514,"src":"128:45:11","symbolAliases":[{"foreign":{"id":1516,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"136:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1519,"name":"Context","nameLocations":["645:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":1513,"src":"645:7:11"},"id":1520,"nodeType":"InheritanceSpecifier","src":"645:7:11"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":1518,"nodeType":"StructuredDocumentation","src":"175:439:11","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":1621,"linearizedBaseContracts":[1621,1513],"name":"Pausable","nameLocation":"633:8:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1522,"mutability":"mutable","name":"_paused","nameLocation":"672:7:11","nodeType":"VariableDeclaration","scope":1621,"src":"659:20:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1521,"name":"bool","nodeType":"ElementaryTypeName","src":"659:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":1523,"nodeType":"StructuredDocumentation","src":"686:73:11","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":1527,"name":"Paused","nameLocation":"770:6:11","nodeType":"EventDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1525,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"785:7:11","nodeType":"VariableDeclaration","scope":1527,"src":"777:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1524,"name":"address","nodeType":"ElementaryTypeName","src":"777:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"776:17:11"},"src":"764:30:11"},{"anonymous":false,"documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"800:70:11","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":1532,"name":"Unpaused","nameLocation":"881:8:11","nodeType":"EventDefinition","parameters":{"id":1531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1530,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"898:7:11","nodeType":"VariableDeclaration","scope":1532,"src":"890:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"890:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"889:17:11"},"src":"875:32:11"},{"documentation":{"id":1533,"nodeType":"StructuredDocumentation","src":"913:76:11","text":" @dev The operation failed because the contract is paused."},"errorSelector":"d93c0665","id":1535,"name":"EnforcedPause","nameLocation":"1000:13:11","nodeType":"ErrorDefinition","parameters":{"id":1534,"nodeType":"ParameterList","parameters":[],"src":"1013:2:11"},"src":"994:22:11"},{"documentation":{"id":1536,"nodeType":"StructuredDocumentation","src":"1022:80:11","text":" @dev The operation failed because the contract is not paused."},"errorSelector":"8dfc202b","id":1538,"name":"ExpectedPause","nameLocation":"1113:13:11","nodeType":"ErrorDefinition","parameters":{"id":1537,"nodeType":"ParameterList","parameters":[],"src":"1126:2:11"},"src":"1107:22:11"},{"body":{"id":1545,"nodeType":"Block","src":"1340:47:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1541,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"1350:17:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1543,"nodeType":"ExpressionStatement","src":"1350:19:11"},{"id":1544,"nodeType":"PlaceholderStatement","src":"1379:1:11"}]},"documentation":{"id":1539,"nodeType":"StructuredDocumentation","src":"1135:175:11","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":1546,"name":"whenNotPaused","nameLocation":"1324:13:11","nodeType":"ModifierDefinition","parameters":{"id":1540,"nodeType":"ParameterList","parameters":[],"src":"1337:2:11"},"src":"1315:72:11","virtual":false,"visibility":"internal"},{"body":{"id":1553,"nodeType":"Block","src":"1587:44:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1549,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"1597:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1597:16:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1551,"nodeType":"ExpressionStatement","src":"1597:16:11"},{"id":1552,"nodeType":"PlaceholderStatement","src":"1623:1:11"}]},"documentation":{"id":1547,"nodeType":"StructuredDocumentation","src":"1393:167:11","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":1554,"name":"whenPaused","nameLocation":"1574:10:11","nodeType":"ModifierDefinition","parameters":{"id":1548,"nodeType":"ParameterList","parameters":[],"src":"1584:2:11"},"src":"1565:66:11","virtual":false,"visibility":"internal"},{"body":{"id":1562,"nodeType":"Block","src":"1779:31:11","statements":[{"expression":{"id":1560,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"1796:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1559,"id":1561,"nodeType":"Return","src":"1789:14:11"}]},"documentation":{"id":1555,"nodeType":"StructuredDocumentation","src":"1637:84:11","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":1563,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1735:6:11","nodeType":"FunctionDefinition","parameters":{"id":1556,"nodeType":"ParameterList","parameters":[],"src":"1741:2:11"},"returnParameters":{"id":1559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1563,"src":"1773:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1557,"name":"bool","nodeType":"ElementaryTypeName","src":"1773:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1772:6:11"},"scope":1621,"src":"1726:84:11","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1574,"nodeType":"Block","src":"1929:77:11","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"id":1567,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"1943:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1943:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1573,"nodeType":"IfStatement","src":"1939:61:11","trueBody":{"id":1572,"nodeType":"Block","src":"1953:47:11","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1569,"name":"EnforcedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"1974:13:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1974:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1571,"nodeType":"RevertStatement","src":"1967:22:11"}]}}]},"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"1816:57:11","text":" @dev Throws if the contract is paused."},"id":1575,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1887:17:11","nodeType":"FunctionDefinition","parameters":{"id":1565,"nodeType":"ParameterList","parameters":[],"src":"1904:2:11"},"returnParameters":{"id":1566,"nodeType":"ParameterList","parameters":[],"src":"1929:0:11"},"scope":1621,"src":"1878:128:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1587,"nodeType":"Block","src":"2126:78:11","statements":[{"condition":{"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2140:9:11","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1579,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"2141:6:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2141:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1586,"nodeType":"IfStatement","src":"2136:62:11","trueBody":{"id":1585,"nodeType":"Block","src":"2151:47:11","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1582,"name":"ExpectedPause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"2172:13:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2172:15:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1584,"nodeType":"RevertStatement","src":"2165:22:11"}]}}]},"documentation":{"id":1576,"nodeType":"StructuredDocumentation","src":"2012:61:11","text":" @dev Throws if the contract is not paused."},"id":1588,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"2087:14:11","nodeType":"FunctionDefinition","parameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"2101:2:11"},"returnParameters":{"id":1578,"nodeType":"ParameterList","parameters":[],"src":"2126:0:11"},"scope":1621,"src":"2078:126:11","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1603,"nodeType":"Block","src":"2388:66:11","statements":[{"expression":{"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1594,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"2398:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2408:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2398:14:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1597,"nodeType":"ExpressionStatement","src":"2398:14:11"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1599,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2434:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2434:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1598,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"2427:6:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2427:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1602,"nodeType":"EmitStatement","src":"2422:25:11"}]},"documentation":{"id":1589,"nodeType":"StructuredDocumentation","src":"2210:124:11","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":1604,"implemented":true,"kind":"function","modifiers":[{"id":1592,"kind":"modifierInvocation","modifierName":{"id":1591,"name":"whenNotPaused","nameLocations":["2374:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":1546,"src":"2374:13:11"},"nodeType":"ModifierInvocation","src":"2374:13:11"}],"name":"_pause","nameLocation":"2348:6:11","nodeType":"FunctionDefinition","parameters":{"id":1590,"nodeType":"ParameterList","parameters":[],"src":"2354:2:11"},"returnParameters":{"id":1593,"nodeType":"ParameterList","parameters":[],"src":"2388:0:11"},"scope":1621,"src":"2339:115:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1619,"nodeType":"Block","src":"2634:69:11","statements":[{"expression":{"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1610,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"2644:7:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":1611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2654:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2644:15:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1613,"nodeType":"ExpressionStatement","src":"2644:15:11"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1615,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2683:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2683:12:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1614,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"2674:8:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1618,"nodeType":"EmitStatement","src":"2669:27:11"}]},"documentation":{"id":1605,"nodeType":"StructuredDocumentation","src":"2460:121:11","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":1620,"implemented":true,"kind":"function","modifiers":[{"id":1608,"kind":"modifierInvocation","modifierName":{"id":1607,"name":"whenPaused","nameLocations":["2623:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":1554,"src":"2623:10:11"},"nodeType":"ModifierInvocation","src":"2623:10:11"}],"name":"_unpause","nameLocation":"2595:8:11","nodeType":"FunctionDefinition","parameters":{"id":1606,"nodeType":"ParameterList","parameters":[],"src":"2603:2:11"},"returnParameters":{"id":1609,"nodeType":"ParameterList","parameters":[],"src":"2634:0:11"},"scope":1621,"src":"2586:117:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1622,"src":"615:2090:11","usedErrors":[1535,1538],"usedEvents":[1527,1532]}],"src":"102:2604:11"},"id":11},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[1690]},"id":1691,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1623,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:12"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":1624,"nodeType":"StructuredDocumentation","src":"135:894:12","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":1690,"linearizedBaseContracts":[1690],"name":"ReentrancyGuard","nameLocation":"1048:15:12","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1627,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:12","nodeType":"VariableDeclaration","scope":1690,"src":"1818:40:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1625,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":1630,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:12","nodeType":"VariableDeclaration","scope":1690,"src":"1864:36:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1628,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:12","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":1632,"mutability":"mutable","name":"_status","nameLocation":"1923:7:12","nodeType":"VariableDeclaration","scope":1690,"src":"1907:23:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":1633,"nodeType":"StructuredDocumentation","src":"1937:52:12","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":1635,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:12","nodeType":"ErrorDefinition","parameters":{"id":1634,"nodeType":"ParameterList","parameters":[],"src":"2028:2:12"},"src":"1994:37:12"},{"body":{"id":1642,"nodeType":"Block","src":"2051:38:12","statements":[{"expression":{"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1638,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"2061:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1639,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"2071:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1641,"nodeType":"ExpressionStatement","src":"2061:21:12"}]},"id":1643,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1636,"nodeType":"ParameterList","parameters":[],"src":"2048:2:12"},"returnParameters":{"id":1637,"nodeType":"ParameterList","parameters":[],"src":"2051:0:12"},"scope":1690,"src":"2037:52:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1653,"nodeType":"Block","src":"2490:79:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1646,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1670,"src":"2500:19:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1648,"nodeType":"ExpressionStatement","src":"2500:21:12"},{"id":1649,"nodeType":"PlaceholderStatement","src":"2531:1:12"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1650,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2542:18:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1652,"nodeType":"ExpressionStatement","src":"2542:20:12"}]},"documentation":{"id":1644,"nodeType":"StructuredDocumentation","src":"2095:366:12","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":1654,"name":"nonReentrant","nameLocation":"2475:12:12","nodeType":"ModifierDefinition","parameters":{"id":1645,"nodeType":"ParameterList","parameters":[],"src":"2487:2:12"},"src":"2466:103:12","virtual":false,"visibility":"internal"},{"body":{"id":1669,"nodeType":"Block","src":"2614:268:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1657,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"2702:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1658,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"2713:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1664,"nodeType":"IfStatement","src":"2698:86:12","trueBody":{"id":1663,"nodeType":"Block","src":"2722:62:12","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1660,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1635,"src":"2743:28:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1662,"nodeType":"RevertStatement","src":"2736:37:12"}]}},{"expression":{"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1665,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"2858:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1666,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"2868:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1668,"nodeType":"ExpressionStatement","src":"2858:17:12"}]},"id":1670,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:12","nodeType":"FunctionDefinition","parameters":{"id":1655,"nodeType":"ParameterList","parameters":[],"src":"2603:2:12"},"returnParameters":{"id":1656,"nodeType":"ParameterList","parameters":[],"src":"2614:0:12"},"scope":1690,"src":"2575:307:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1677,"nodeType":"Block","src":"2926:170:12","statements":[{"expression":{"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1673,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"3068:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1674,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"3078:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1676,"nodeType":"ExpressionStatement","src":"3068:21:12"}]},"id":1678,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:12","nodeType":"FunctionDefinition","parameters":{"id":1671,"nodeType":"ParameterList","parameters":[],"src":"2915:2:12"},"returnParameters":{"id":1672,"nodeType":"ParameterList","parameters":[],"src":"2926:0:12"},"scope":1690,"src":"2888:208:12","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1688,"nodeType":"Block","src":"3339:42:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1684,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"3356:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1685,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1630,"src":"3367:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1683,"id":1687,"nodeType":"Return","src":"3349:25:12"}]},"documentation":{"id":1679,"nodeType":"StructuredDocumentation","src":"3102:168:12","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":1689,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:12","nodeType":"FunctionDefinition","parameters":{"id":1680,"nodeType":"ParameterList","parameters":[],"src":"3307:2:12"},"returnParameters":{"id":1683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1682,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1689,"src":"3333:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1681,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:12"},"scope":1690,"src":"3275:106:12","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1691,"src":"1030:2353:12","usedErrors":[1635],"usedEvents":[]}],"src":"109:3275:12"},"id":12},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[1714],"IERC165":[1726]},"id":1715,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1692,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"114:24:13"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":1694,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1715,"sourceUnit":1727,"src":"140:38:13","symbolAliases":[{"foreign":{"id":1693,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"148:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1696,"name":"IERC165","nameLocations":["688:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":1726,"src":"688:7:13"},"id":1697,"nodeType":"InheritanceSpecifier","src":"688:7:13"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":1695,"nodeType":"StructuredDocumentation","src":"180:479:13","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"},"fullyImplemented":true,"id":1714,"linearizedBaseContracts":[1714,1726],"name":"ERC165","nameLocation":"678:6:13","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[1725],"body":{"id":1712,"nodeType":"Block","src":"812:64:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1705,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"829:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1707,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1726,"src":"849:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$1726_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$1726_$","typeString":"type(contract IERC165)"}],"id":1706,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"844:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"844:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$1726","typeString":"type(contract IERC165)"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"858:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"844:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"829:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1704,"id":1711,"nodeType":"Return","src":"822:47:13"}]},"documentation":{"id":1698,"nodeType":"StructuredDocumentation","src":"702:23:13","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":1713,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"739:17:13","nodeType":"FunctionDefinition","parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1700,"mutability":"mutable","name":"interfaceId","nameLocation":"764:11:13","nodeType":"VariableDeclaration","scope":1713,"src":"757:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1699,"name":"bytes4","nodeType":"ElementaryTypeName","src":"757:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"756:20:13"},"returnParameters":{"id":1704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1713,"src":"806:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1702,"name":"bool","nodeType":"ElementaryTypeName","src":"806:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"805:6:13"},"scope":1714,"src":"730:146:13","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":1715,"src":"660:218:13","usedErrors":[],"usedEvents":[]}],"src":"114:765:13"},"id":13},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[1726]},"id":1727,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1716,"literals":["solidity",">=","0.4",".16"],"nodeType":"PragmaDirective","src":"115:25:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":1717,"nodeType":"StructuredDocumentation","src":"142:280:14","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":1726,"linearizedBaseContracts":[1726],"name":"IERC165","nameLocation":"433:7:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1718,"nodeType":"StructuredDocumentation","src":"447:340:14","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":1725,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"801:17:14","nodeType":"FunctionDefinition","parameters":{"id":1721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1720,"mutability":"mutable","name":"interfaceId","nameLocation":"826:11:14","nodeType":"VariableDeclaration","scope":1725,"src":"819:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1719,"name":"bytes4","nodeType":"ElementaryTypeName","src":"819:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"818:20:14"},"returnParameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1725,"src":"862:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1722,"name":"bool","nodeType":"ElementaryTypeName","src":"862:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"861:6:14"},"scope":1726,"src":"792:76:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1727,"src":"423:447:14","usedErrors":[],"usedEvents":[]}],"src":"115:756:14"},"id":14},"contracts/ISqudyToken.sol":{"ast":{"absolutePath":"contracts/ISqudyToken.sol","exportedSymbols":{"ISqudyToken":[1843]},"id":1844,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1728,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ISqudyToken","contractDependencies":[],"contractKind":"interface","documentation":{"id":1729,"nodeType":"StructuredDocumentation","src":"58:85:15","text":" @title ISqudyToken\n @dev Interface for the SQUDY token contract (BEP-20)"},"fullyImplemented":false,"id":1843,"linearizedBaseContracts":[1843],"name":"ISqudyToken","nameLocation":"154:11:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1730,"nodeType":"StructuredDocumentation","src":"172:53:15","text":" @dev Returns the name of the token"},"functionSelector":"06fdde03","id":1735,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"239:4:15","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[],"src":"243:2:15"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1735,"src":"269:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1732,"name":"string","nodeType":"ElementaryTypeName","src":"269:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"268:15:15"},"scope":1843,"src":"230:54:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1736,"nodeType":"StructuredDocumentation","src":"290:55:15","text":" @dev Returns the symbol of the token"},"functionSelector":"95d89b41","id":1741,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"359:6:15","nodeType":"FunctionDefinition","parameters":{"id":1737,"nodeType":"ParameterList","parameters":[],"src":"365:2:15"},"returnParameters":{"id":1740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1741,"src":"391:13:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1738,"name":"string","nodeType":"ElementaryTypeName","src":"391:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"390:15:15"},"scope":1843,"src":"350:56:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1742,"nodeType":"StructuredDocumentation","src":"412:57:15","text":" @dev Returns the decimals of the token"},"functionSelector":"313ce567","id":1747,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"483:8:15","nodeType":"FunctionDefinition","parameters":{"id":1743,"nodeType":"ParameterList","parameters":[],"src":"491:2:15"},"returnParameters":{"id":1746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1747,"src":"517:5:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1744,"name":"uint8","nodeType":"ElementaryTypeName","src":"517:5:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"516:7:15"},"scope":1843,"src":"474:50:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1748,"nodeType":"StructuredDocumentation","src":"530:61:15","text":" @dev Returns the total supply of the token"},"functionSelector":"18160ddd","id":1753,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"605:11:15","nodeType":"FunctionDefinition","parameters":{"id":1749,"nodeType":"ParameterList","parameters":[],"src":"616:2:15"},"returnParameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1753,"src":"642:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1750,"name":"uint256","nodeType":"ElementaryTypeName","src":"642:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"641:9:15"},"scope":1843,"src":"596:55:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"657:68:15","text":" @dev Returns the balance of the specified account"},"functionSelector":"70a08231","id":1761,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"739:9:15","nodeType":"FunctionDefinition","parameters":{"id":1757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"account","nameLocation":"757:7:15","nodeType":"VariableDeclaration","scope":1761,"src":"749:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"748:17:15"},"returnParameters":{"id":1760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1759,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1761,"src":"789:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1758,"name":"uint256","nodeType":"ElementaryTypeName","src":"789:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"788:9:15"},"scope":1843,"src":"730:68:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1762,"nodeType":"StructuredDocumentation","src":"804:83:15","text":" @dev Transfers tokens from the caller to the specified recipient"},"functionSelector":"a9059cbb","id":1771,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"901:8:15","nodeType":"FunctionDefinition","parameters":{"id":1767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"to","nameLocation":"918:2:15","nodeType":"VariableDeclaration","scope":1771,"src":"910:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1763,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1766,"mutability":"mutable","name":"amount","nameLocation":"930:6:15","nodeType":"VariableDeclaration","scope":1771,"src":"922:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1765,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"909:28:15"},"returnParameters":{"id":1770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1771,"src":"956:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1768,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:15"},"scope":1843,"src":"892:70:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"968:71:15","text":" @dev Returns the allowance given to spender by owner"},"functionSelector":"dd62ed3e","id":1781,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1053:9:15","nodeType":"FunctionDefinition","parameters":{"id":1777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1774,"mutability":"mutable","name":"owner","nameLocation":"1071:5:15","nodeType":"VariableDeclaration","scope":1781,"src":"1063:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1773,"name":"address","nodeType":"ElementaryTypeName","src":"1063:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1776,"mutability":"mutable","name":"spender","nameLocation":"1086:7:15","nodeType":"VariableDeclaration","scope":1781,"src":"1078:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"1078:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1062:32:15"},"returnParameters":{"id":1780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1781,"src":"1118:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1118:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1117:9:15"},"scope":1843,"src":"1044:83:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1782,"nodeType":"StructuredDocumentation","src":"1133:94:15","text":" @dev Approves the specified address to spend the specified amount of tokens"},"functionSelector":"095ea7b3","id":1791,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1241:7:15","nodeType":"FunctionDefinition","parameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1784,"mutability":"mutable","name":"spender","nameLocation":"1257:7:15","nodeType":"VariableDeclaration","scope":1791,"src":"1249:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1783,"name":"address","nodeType":"ElementaryTypeName","src":"1249:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"amount","nameLocation":"1274:6:15","nodeType":"VariableDeclaration","scope":1791,"src":"1266:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1785,"name":"uint256","nodeType":"ElementaryTypeName","src":"1266:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1248:33:15"},"returnParameters":{"id":1790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1789,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1791,"src":"1300:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1788,"name":"bool","nodeType":"ElementaryTypeName","src":"1300:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1299:6:15"},"scope":1843,"src":"1232:74:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"1312:98:15","text":" @dev Transfers tokens from one address to another using the allowance mechanism"},"functionSelector":"23b872dd","id":1803,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1424:12:15","nodeType":"FunctionDefinition","parameters":{"id":1799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"from","nameLocation":"1445:4:15","nodeType":"VariableDeclaration","scope":1803,"src":"1437:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"1437:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"to","nameLocation":"1459:2:15","nodeType":"VariableDeclaration","scope":1803,"src":"1451:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"1451:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"amount","nameLocation":"1471:6:15","nodeType":"VariableDeclaration","scope":1803,"src":"1463:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"1463:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1436:42:15"},"returnParameters":{"id":1802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1801,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1803,"src":"1497:4:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1800,"name":"bool","nodeType":"ElementaryTypeName","src":"1497:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1496:6:15"},"scope":1843,"src":"1415:88:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1804,"nodeType":"StructuredDocumentation","src":"1509:62:15","text":" @dev Burns tokens from the caller's account"},"functionSelector":"42966c68","id":1809,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"1585:4:15","nodeType":"FunctionDefinition","parameters":{"id":1807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1806,"mutability":"mutable","name":"amount","nameLocation":"1598:6:15","nodeType":"VariableDeclaration","scope":1809,"src":"1590:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1805,"name":"uint256","nodeType":"ElementaryTypeName","src":"1590:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1589:16:15"},"returnParameters":{"id":1808,"nodeType":"ParameterList","parameters":[],"src":"1614:0:15"},"scope":1843,"src":"1576:39:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"1621:84:15","text":" @dev Burns tokens from the specified account (requires allowance)"},"functionSelector":"79cc6790","id":1817,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1719:8:15","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"account","nameLocation":"1736:7:15","nodeType":"VariableDeclaration","scope":1817,"src":"1728:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"amount","nameLocation":"1753:6:15","nodeType":"VariableDeclaration","scope":1817,"src":"1745:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1745:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1727:33:15"},"returnParameters":{"id":1816,"nodeType":"ParameterList","parameters":[],"src":"1769:0:15"},"scope":1843,"src":"1710:60:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":1818,"nodeType":"StructuredDocumentation","src":"1776:59:15","text":" @dev Emitted when tokens are transferred"},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1826,"name":"Transfer","nameLocation":"1846:8:15","nodeType":"EventDefinition","parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"1871:4:15","nodeType":"VariableDeclaration","scope":1826,"src":"1855:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"1855:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1822,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"1893:2:15","nodeType":"VariableDeclaration","scope":1826,"src":"1877:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1821,"name":"address","nodeType":"ElementaryTypeName","src":"1877:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1824,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"1905:5:15","nodeType":"VariableDeclaration","scope":1826,"src":"1897:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1823,"name":"uint256","nodeType":"ElementaryTypeName","src":"1897:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1854:57:15"},"src":"1840:72:15"},{"anonymous":false,"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"1918:53:15","text":" @dev Emitted when allowance is set"},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1835,"name":"Approval","nameLocation":"1982:8:15","nodeType":"EventDefinition","parameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"2007:5:15","nodeType":"VariableDeclaration","scope":1835,"src":"1991:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"1991:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1831,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"2030:7:15","nodeType":"VariableDeclaration","scope":1835,"src":"2014:23:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1830,"name":"address","nodeType":"ElementaryTypeName","src":"2014:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1833,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2047:5:15","nodeType":"VariableDeclaration","scope":1835,"src":"2039:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1832,"name":"uint256","nodeType":"ElementaryTypeName","src":"2039:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1990:63:15"},"src":"1976:78:15"},{"anonymous":false,"documentation":{"id":1836,"nodeType":"StructuredDocumentation","src":"2060:54:15","text":" @dev Emitted when tokens are burned"},"eventSelector":"cc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5","id":1842,"name":"Burn","nameLocation":"2125:4:15","nodeType":"EventDefinition","parameters":{"id":1841,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1838,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"2146:4:15","nodeType":"VariableDeclaration","scope":1842,"src":"2130:20:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1837,"name":"address","nodeType":"ElementaryTypeName","src":"2130:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1840,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2160:5:15","nodeType":"VariableDeclaration","scope":1842,"src":"2152:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1839,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2129:37:15"},"src":"2119:48:15"}],"scope":1844,"src":"144:2025:15","usedErrors":[],"usedEvents":[1826,1835,1842]}],"src":"32:2138:15"},"id":15},"contracts/MockSqudyToken.sol":{"ast":{"absolutePath":"contracts/MockSqudyToken.sol","exportedSymbols":{"Context":[1513],"ERC20":[1333],"ERC20Burnable":[1457],"IERC20":[1411],"IERC20Errors":[723],"IERC20Metadata":[1483],"MockSqudyToken":[1934],"Ownable":[681]},"id":1935,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1845,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:16"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":1846,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1935,"sourceUnit":1334,"src":"58:55:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","file":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol","id":1847,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1935,"sourceUnit":1458,"src":"114:74:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":1848,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1935,"sourceUnit":682,"src":"189:52:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1850,"name":"ERC20","nameLocations":["371:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"371:5:16"},"id":1851,"nodeType":"InheritanceSpecifier","src":"371:5:16"},{"baseName":{"id":1852,"name":"ERC20Burnable","nameLocations":["378:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":1457,"src":"378:13:16"},"id":1853,"nodeType":"InheritanceSpecifier","src":"378:13:16"},{"baseName":{"id":1854,"name":"Ownable","nameLocations":["393:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":681,"src":"393:7:16"},"id":1855,"nodeType":"InheritanceSpecifier","src":"393:7:16"}],"canonicalName":"MockSqudyToken","contractDependencies":[],"contractKind":"contract","documentation":{"id":1849,"nodeType":"StructuredDocumentation","src":"243:100:16","text":" @title MockSqudyToken\n @dev Mock SQUDY token for testing purposes\n @author Squdy Team"},"fullyImplemented":true,"id":1934,"linearizedBaseContracts":[1934,681,1457,1333,723,1483,1411,1513],"name":"MockSqudyToken","nameLocation":"353:14:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1858,"mutability":"mutable","name":"_decimals","nameLocation":"421:9:16","nodeType":"VariableDeclaration","scope":1934,"src":"407:28:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1856,"name":"uint8","nodeType":"ElementaryTypeName","src":"407:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3138","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"433:2:16","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"visibility":"private"},{"body":{"id":1880,"nodeType":"Block","src":"510:126:16","statements":[{"expression":{"arguments":[{"expression":{"id":1870,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"569:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"573:6:16","memberName":"sender","nodeType":"MemberAccess","src":"569:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31303030303030303030","id":1872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"581:10:16","typeDescriptions":{"typeIdentifier":"t_rational_1000000000_by_1","typeString":"int_const 1000000000"},"value":"1000000000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":1873,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"594:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1874,"name":"decimals","nodeType":"Identifier","overloadedDeclarations":[1891],"referencedDeclaration":1891,"src":"598:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint8_$","typeString":"function () view returns (uint8)"}},"id":1875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"598:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"594:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"581:27:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1869,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"563:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"563:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1879,"nodeType":"ExpressionStatement","src":"563:46:16"}]},"id":1881,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"537175647920546f6b656e","id":1861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"466:13:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_fdc9b360abae0c87c479af1d837010663a99412debd8de7b884d6a974aeebd79","typeString":"literal_string \"Squdy Token\""},"value":"Squdy Token"},{"hexValue":"5351554459","id":1862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"481:7:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_25757f0270e3cbf29c93eb38c5f7646ec0b89a1ad62cca170205d3bc482923a5","typeString":"literal_string \"SQUDY\""},"value":"SQUDY"}],"id":1863,"kind":"baseConstructorSpecifier","modifierName":{"id":1860,"name":"ERC20","nameLocations":["460:5:16"],"nodeType":"IdentifierPath","referencedDeclaration":1333,"src":"460:5:16"},"nodeType":"ModifierInvocation","src":"460:29:16"},{"arguments":[{"expression":{"id":1865,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"498:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"502:6:16","memberName":"sender","nodeType":"MemberAccess","src":"498:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1867,"kind":"baseConstructorSpecifier","modifierName":{"id":1864,"name":"Ownable","nameLocations":["490:7:16"],"nodeType":"IdentifierPath","referencedDeclaration":681,"src":"490:7:16"},"nodeType":"ModifierInvocation","src":"490:19:16"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1859,"nodeType":"ParameterList","parameters":[],"src":"457:2:16"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[],"src":"510:0:16"},"scope":1934,"src":"446:190:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[897],"body":{"id":1890,"nodeType":"Block","src":"806:33:16","statements":[{"expression":{"id":1888,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"823:9:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":1887,"id":1889,"nodeType":"Return","src":"816:16:16"}]},"documentation":{"id":1882,"nodeType":"StructuredDocumentation","src":"646:90:16","text":" @dev Returns the number of decimals used to get its user representation"},"functionSelector":"313ce567","id":1891,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"750:8:16","nodeType":"FunctionDefinition","overrides":{"id":1884,"nodeType":"OverrideSpecifier","overrides":[],"src":"781:8:16"},"parameters":{"id":1883,"nodeType":"ParameterList","parameters":[],"src":"758:2:16"},"returnParameters":{"id":1887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1886,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1891,"src":"799:5:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1885,"name":"uint8","nodeType":"ElementaryTypeName","src":"799:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"798:7:16"},"scope":1934,"src":"741:98:16","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1906,"nodeType":"Block","src":"990:34:16","statements":[{"expression":{"arguments":[{"id":1902,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1894,"src":"1006:2:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1903,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"1010:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1901,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"1000:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1000:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1905,"nodeType":"ExpressionStatement","src":"1000:17:16"}]},"documentation":{"id":1892,"nodeType":"StructuredDocumentation","src":"849:75:16","text":" @dev Mints tokens to the specified address (for testing)"},"functionSelector":"40c10f19","id":1907,"implemented":true,"kind":"function","modifiers":[{"id":1899,"kind":"modifierInvocation","modifierName":{"id":1898,"name":"onlyOwner","nameLocations":["980:9:16"],"nodeType":"IdentifierPath","referencedDeclaration":592,"src":"980:9:16"},"nodeType":"ModifierInvocation","src":"980:9:16"}],"name":"mint","nameLocation":"938:4:16","nodeType":"FunctionDefinition","parameters":{"id":1897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1894,"mutability":"mutable","name":"to","nameLocation":"951:2:16","nodeType":"VariableDeclaration","scope":1907,"src":"943:10:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"943:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1896,"mutability":"mutable","name":"amount","nameLocation":"963:6:16","nodeType":"VariableDeclaration","scope":1907,"src":"955:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1895,"name":"uint256","nodeType":"ElementaryTypeName","src":"955:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"942:28:16"},"returnParameters":{"id":1900,"nodeType":"ParameterList","parameters":[],"src":"990:0:16"},"scope":1934,"src":"929:95:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1456],"body":{"id":1932,"nodeType":"Block","src":"1198:140:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1918,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1226:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1919,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1235:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1239:6:16","memberName":"sender","nodeType":"MemberAccess","src":"1235:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1917,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"1216:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1216:30:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1922,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1250:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1216:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6f636b5371756479546f6b656e3a20696e73756666696369656e7420616c6c6f77616e6365","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1258:40:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_acdd18d6bcc2ba13f6a87414abbe8a032c76b820cc49b8a09b73d4c5bd11e1cf","typeString":"literal_string \"MockSqudyToken: insufficient allowance\""},"value":"MockSqudyToken: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_acdd18d6bcc2ba13f6a87414abbe8a032c76b820cc49b8a09b73d4c5bd11e1cf","typeString":"literal_string \"MockSqudyToken: insufficient allowance\""}],"id":1916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1208:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1208:91:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1926,"nodeType":"ExpressionStatement","src":"1208:91:16"},{"expression":{"arguments":[{"id":1928,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"1315:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1929,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"1324:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1927,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"1309:5:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1309:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1931,"nodeType":"ExpressionStatement","src":"1309:22:16"}]},"documentation":{"id":1908,"nodeType":"StructuredDocumentation","src":"1034:84:16","text":" @dev Burns tokens from the specified account (requires allowance)"},"functionSelector":"79cc6790","id":1933,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1132:8:16","nodeType":"FunctionDefinition","overrides":{"id":1914,"nodeType":"OverrideSpecifier","overrides":[],"src":"1189:8:16"},"parameters":{"id":1913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1910,"mutability":"mutable","name":"account","nameLocation":"1149:7:16","nodeType":"VariableDeclaration","scope":1933,"src":"1141:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1909,"name":"address","nodeType":"ElementaryTypeName","src":"1141:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1912,"mutability":"mutable","name":"amount","nameLocation":"1166:6:16","nodeType":"VariableDeclaration","scope":1933,"src":"1158:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1911,"name":"uint256","nodeType":"ElementaryTypeName","src":"1158:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1140:33:16"},"returnParameters":{"id":1915,"nodeType":"ParameterList","parameters":[],"src":"1198:0:16"},"scope":1934,"src":"1123:215:16","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1935,"src":"344:996:16","usedErrors":[547,552,693,698,703,712,717,722],"usedEvents":[558,1345,1354]}],"src":"32:1309:16"},"id":16},"contracts/SqudyCampaignManager.sol":{"ast":{"absolutePath":"contracts/SqudyCampaignManager.sol","exportedSymbols":{"AccessControl":[450],"Context":[1513],"ERC165":[1714],"IAccessControl":[533],"IERC165":[1726],"IERC20":[1411],"ISqudyToken":[1843],"Pausable":[1621],"ReentrancyGuard":[1690],"SqudyCampaignManager":[3657],"VRFConsumerBaseV2":[153],"VRFCoordinatorV2Interface":[95]},"id":3658,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1936,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":1937,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":451,"src":"58:58:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1938,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":1691,"src":"117:59:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Pausable.sol","file":"@openzeppelin/contracts/utils/Pausable.sol","id":1939,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":1622,"src":"177:52:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":1940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":1412,"src":"230:56:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":1941,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":96,"src":"287:80:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol","id":1942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":154,"src":"368:65:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"contracts/ISqudyToken.sol","file":"./ISqudyToken.sol","id":1943,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3658,"sourceUnit":1844,"src":"434:27:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1945,"name":"AccessControl","nameLocations":["612:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":450,"src":"612:13:17"},"id":1946,"nodeType":"InheritanceSpecifier","src":"612:13:17"},{"baseName":{"id":1947,"name":"ReentrancyGuard","nameLocations":["627:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":1690,"src":"627:15:17"},"id":1948,"nodeType":"InheritanceSpecifier","src":"627:15:17"},{"baseName":{"id":1949,"name":"Pausable","nameLocations":["644:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1621,"src":"644:8:17"},"id":1950,"nodeType":"InheritanceSpecifier","src":"644:8:17"},{"baseName":{"id":1951,"name":"VRFConsumerBaseV2","nameLocations":["654:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"654:17:17"},"id":1952,"nodeType":"InheritanceSpecifier","src":"654:17:17"}],"canonicalName":"SqudyCampaignManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":1944,"nodeType":"StructuredDocumentation","src":"463:115:17","text":" @title SqudyCampaignManager\n @dev Manages burn-to-win campaigns for SQUDY tokens\n @author Squdy Team"},"fullyImplemented":true,"id":3657,"linearizedBaseContracts":[3657,153,1621,1690,450,1714,1726,533,1513],"name":"SqudyCampaignManager","nameLocation":"588:20:17","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"75b238fc","id":1957,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"746:10:17","nodeType":"VariableDeclaration","scope":3657,"src":"722:60:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1953,"name":"bytes32","nodeType":"ElementaryTypeName","src":"722:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":1955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"769:12:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":1954,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"759:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"759:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"f5b541a6","id":1962,"mutability":"constant","name":"OPERATOR_ROLE","nameLocation":"812:13:17","nodeType":"VariableDeclaration","scope":3657,"src":"788:66:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"788:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f50455241544f525f524f4c45","id":1960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"838:15:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""},"value":"OPERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""}],"id":1959,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"828:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"828:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"id":1965,"mutability":"immutable","name":"COORDINATOR","nameLocation":"944:11:17","nodeType":"VariableDeclaration","scope":3657,"src":"900:55:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":1964,"nodeType":"UserDefinedTypeName","pathNode":{"id":1963,"name":"VRFCoordinatorV2Interface","nameLocations":["900:25:17"],"nodeType":"IdentifierPath","referencedDeclaration":95,"src":"900:25:17"},"referencedDeclaration":95,"src":"900:25:17","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":1967,"mutability":"immutable","name":"KEY_HASH","nameLocation":"987:8:17","nodeType":"VariableDeclaration","scope":3657,"src":"961:34:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"961:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":1969,"mutability":"immutable","name":"SUBSCRIPTION_ID","nameLocation":"1026:15:17","nodeType":"VariableDeclaration","scope":3657,"src":"1001:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":1968,"name":"uint64","nodeType":"ElementaryTypeName","src":"1001:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":true,"id":1972,"mutability":"constant","name":"REQUEST_CONFIRMATIONS","nameLocation":"1071:21:17","nodeType":"VariableDeclaration","scope":3657,"src":"1047:49:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":1970,"name":"uint16","nodeType":"ElementaryTypeName","src":"1047:6:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":1971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1095:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":true,"id":1975,"mutability":"constant","name":"CALLBACK_GAS_LIMIT","nameLocation":"1126:18:17","nodeType":"VariableDeclaration","scope":3657,"src":"1102:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":1973,"name":"uint32","nodeType":"ElementaryTypeName","src":"1102:6:17","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"313030303030","id":1974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1147:6:17","typeDescriptions":{"typeIdentifier":"t_rational_100000_by_1","typeString":"int_const 100000"},"value":"100000"},"visibility":"private"},{"constant":false,"functionSelector":"4eb53f99","id":1978,"mutability":"immutable","name":"squdyToken","nameLocation":"1238:10:17","nodeType":"VariableDeclaration","scope":3657,"src":"1209:39:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"},"typeName":{"id":1977,"nodeType":"UserDefinedTypeName","pathNode":{"id":1976,"name":"ISqudyToken","nameLocations":["1209:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1843,"src":"1209:11:17"},"referencedDeclaration":1843,"src":"1209:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}},"visibility":"public"},{"constant":false,"id":1980,"mutability":"mutable","name":"_campaignIds","nameLocation":"1270:12:17","nodeType":"VariableDeclaration","scope":3657,"src":"1254:28:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1979,"name":"uint256","nodeType":"ElementaryTypeName","src":"1254:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"141961bc","id":1985,"mutability":"mutable","name":"campaigns","nameLocation":"1353:9:17","nodeType":"VariableDeclaration","scope":3657,"src":"1317:45:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign)"},"typeName":{"id":1984,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1325:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1317:28:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1983,"nodeType":"UserDefinedTypeName","pathNode":{"id":1982,"name":"Campaign","nameLocations":["1336:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"1336:8:17"},"referencedDeclaration":2049,"src":"1336:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}}},"visibility":"public"},{"constant":false,"functionSelector":"02e060c6","id":1992,"mutability":"mutable","name":"participants","nameLocation":"1427:12:17","nodeType":"VariableDeclaration","scope":3657,"src":"1368:71:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant))"},"typeName":{"id":1991,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1986,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1368:51:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1990,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1987,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1387:31:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1989,"nodeType":"UserDefinedTypeName","pathNode":{"id":1988,"name":"Participant","nameLocations":["1406:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2062,"src":"1406:11:17"},"referencedDeclaration":2062,"src":"1406:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"}}}},"visibility":"public"},{"constant":false,"functionSelector":"35abd49b","id":1997,"mutability":"mutable","name":"campaignParticipants","nameLocation":"1482:20:17","nodeType":"VariableDeclaration","scope":3657,"src":"1445:57:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint256 => address[])"},"typeName":{"id":1996,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"1453:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1445:29:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint256 => address[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":1994,"name":"address","nodeType":"ElementaryTypeName","src":"1464:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1995,"nodeType":"ArrayTypeName","src":"1464:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"5e3583f5","id":2003,"mutability":"mutable","name":"participantIndexes","nameLocation":"1563:18:17","nodeType":"VariableDeclaration","scope":3657,"src":"1508:73:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"},"typeName":{"id":2002,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1998,"name":"uint256","nodeType":"ElementaryTypeName","src":"1516:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1508:47:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2001,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1999,"name":"uint256","nodeType":"ElementaryTypeName","src":"1535:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1527:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2000,"name":"address","nodeType":"ElementaryTypeName","src":"1546:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}}},"visibility":"public"},{"constant":false,"functionSelector":"1a1d9252","id":2007,"mutability":"mutable","name":"vrfRequests","nameLocation":"1655:11:17","nodeType":"VariableDeclaration","scope":3657,"src":"1620:46:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2006,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1628:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1620:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"1639:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"canonicalName":"SqudyCampaignManager.Campaign","id":2049,"members":[{"constant":false,"id":2009,"mutability":"mutable","name":"id","nameLocation":"1779:2:17","nodeType":"VariableDeclaration","scope":2049,"src":"1771:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1771:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2011,"mutability":"mutable","name":"name","nameLocation":"1798:4:17","nodeType":"VariableDeclaration","scope":2049,"src":"1791:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2010,"name":"string","nodeType":"ElementaryTypeName","src":"1791:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2013,"mutability":"mutable","name":"description","nameLocation":"1819:11:17","nodeType":"VariableDeclaration","scope":2049,"src":"1812:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2012,"name":"string","nodeType":"ElementaryTypeName","src":"1812:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2015,"mutability":"mutable","name":"imageUrl","nameLocation":"1847:8:17","nodeType":"VariableDeclaration","scope":2049,"src":"1840:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2014,"name":"string","nodeType":"ElementaryTypeName","src":"1840:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2017,"mutability":"mutable","name":"softCap","nameLocation":"1873:7:17","nodeType":"VariableDeclaration","scope":2049,"src":"1865:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1865:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2019,"mutability":"mutable","name":"hardCap","nameLocation":"1898:7:17","nodeType":"VariableDeclaration","scope":2049,"src":"1890:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2018,"name":"uint256","nodeType":"ElementaryTypeName","src":"1890:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2021,"mutability":"mutable","name":"ticketAmount","nameLocation":"1923:12:17","nodeType":"VariableDeclaration","scope":2049,"src":"1915:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"1915:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2023,"mutability":"mutable","name":"currentAmount","nameLocation":"1953:13:17","nodeType":"VariableDeclaration","scope":2049,"src":"1945:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2022,"name":"uint256","nodeType":"ElementaryTypeName","src":"1945:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"startDate","nameLocation":"1984:9:17","nodeType":"VariableDeclaration","scope":2049,"src":"1976:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2024,"name":"uint256","nodeType":"ElementaryTypeName","src":"1976:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2027,"mutability":"mutable","name":"endDate","nameLocation":"2011:7:17","nodeType":"VariableDeclaration","scope":2049,"src":"2003:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"2003:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2029,"mutability":"mutable","name":"participantCount","nameLocation":"2036:16:17","nodeType":"VariableDeclaration","scope":2049,"src":"2028:24:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2028,"name":"uint256","nodeType":"ElementaryTypeName","src":"2028:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2032,"mutability":"mutable","name":"prizes","nameLocation":"2071:6:17","nodeType":"VariableDeclaration","scope":2049,"src":"2062:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2030,"name":"string","nodeType":"ElementaryTypeName","src":"2062:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2031,"nodeType":"ArrayTypeName","src":"2062:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"},{"constant":false,"id":2035,"mutability":"mutable","name":"winners","nameLocation":"2097:7:17","nodeType":"VariableDeclaration","scope":2049,"src":"2087:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2033,"name":"address","nodeType":"ElementaryTypeName","src":"2087:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2034,"nodeType":"ArrayTypeName","src":"2087:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2038,"mutability":"mutable","name":"status","nameLocation":"2129:6:17","nodeType":"VariableDeclaration","scope":2049,"src":"2114:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"typeName":{"id":2037,"nodeType":"UserDefinedTypeName","pathNode":{"id":2036,"name":"CampaignStatus","nameLocations":["2114:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2068,"src":"2114:14:17"},"referencedDeclaration":2068,"src":"2114:14:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"visibility":"internal"},{"constant":false,"id":2040,"mutability":"mutable","name":"tokensAreBurned","nameLocation":"2150:15:17","nodeType":"VariableDeclaration","scope":2049,"src":"2145:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2039,"name":"bool","nodeType":"ElementaryTypeName","src":"2145:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2042,"mutability":"mutable","name":"totalBurned","nameLocation":"2183:11:17","nodeType":"VariableDeclaration","scope":2049,"src":"2175:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2041,"name":"uint256","nodeType":"ElementaryTypeName","src":"2175:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2044,"mutability":"mutable","name":"winnerSelectionTxHash","nameLocation":"2212:21:17","nodeType":"VariableDeclaration","scope":2049,"src":"2204:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2204:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2046,"mutability":"mutable","name":"createdAt","nameLocation":"2251:9:17","nodeType":"VariableDeclaration","scope":2049,"src":"2243:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2045,"name":"uint256","nodeType":"ElementaryTypeName","src":"2243:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2048,"mutability":"mutable","name":"updatedAt","nameLocation":"2278:9:17","nodeType":"VariableDeclaration","scope":2049,"src":"2270:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2047,"name":"uint256","nodeType":"ElementaryTypeName","src":"2270:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Campaign","nameLocation":"1752:8:17","nodeType":"StructDefinition","scope":3657,"src":"1745:549:17","visibility":"public"},{"canonicalName":"SqudyCampaignManager.Participant","id":2062,"members":[{"constant":false,"id":2051,"mutability":"mutable","name":"stakedAmount","nameLocation":"2341:12:17","nodeType":"VariableDeclaration","scope":2062,"src":"2333:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2050,"name":"uint256","nodeType":"ElementaryTypeName","src":"2333:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"ticketCount","nameLocation":"2371:11:17","nodeType":"VariableDeclaration","scope":2062,"src":"2363:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"2363:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2055,"mutability":"mutable","name":"hasCompletedSocial","nameLocation":"2397:18:17","nodeType":"VariableDeclaration","scope":2062,"src":"2392:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2054,"name":"bool","nodeType":"ElementaryTypeName","src":"2392:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2057,"mutability":"mutable","name":"isWinner","nameLocation":"2430:8:17","nodeType":"VariableDeclaration","scope":2062,"src":"2425:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2056,"name":"bool","nodeType":"ElementaryTypeName","src":"2425:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2059,"mutability":"mutable","name":"prizeIndex","nameLocation":"2456:10:17","nodeType":"VariableDeclaration","scope":2062,"src":"2448:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"2448:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2061,"mutability":"mutable","name":"joinedAt","nameLocation":"2484:8:17","nodeType":"VariableDeclaration","scope":2062,"src":"2476:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2060,"name":"uint256","nodeType":"ElementaryTypeName","src":"2476:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Participant","nameLocation":"2311:11:17","nodeType":"StructDefinition","scope":3657,"src":"2304:195:17","visibility":"public"},{"canonicalName":"SqudyCampaignManager.CampaignStatus","id":2068,"members":[{"id":2063,"name":"PENDING","nameLocation":"2539:7:17","nodeType":"EnumValue","src":"2539:7:17"},{"id":2064,"name":"ACTIVE","nameLocation":"2556:6:17","nodeType":"EnumValue","src":"2556:6:17"},{"id":2065,"name":"PAUSED","nameLocation":"2572:6:17","nodeType":"EnumValue","src":"2572:6:17"},{"id":2066,"name":"FINISHED","nameLocation":"2588:8:17","nodeType":"EnumValue","src":"2588:8:17"},{"id":2067,"name":"BURNED","nameLocation":"2606:6:17","nodeType":"EnumValue","src":"2606:6:17"}],"name":"CampaignStatus","nameLocation":"2514:14:17","nodeType":"EnumDefinition","src":"2509:109:17"},{"anonymous":false,"eventSelector":"3a495479e40f7ba7d7f6395edf32b142dc0c2dc52ee9bc5aae0dd2541321074c","id":2080,"name":"CampaignCreated","nameLocation":"2670:15:17","nodeType":"EventDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2070,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"2711:10:17","nodeType":"VariableDeclaration","scope":2080,"src":"2695:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2069,"name":"uint256","nodeType":"ElementaryTypeName","src":"2695:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2072,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"2738:4:17","nodeType":"VariableDeclaration","scope":2080,"src":"2731:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2071,"name":"string","nodeType":"ElementaryTypeName","src":"2731:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2074,"indexed":false,"mutability":"mutable","name":"startDate","nameLocation":"2760:9:17","nodeType":"VariableDeclaration","scope":2080,"src":"2752:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2073,"name":"uint256","nodeType":"ElementaryTypeName","src":"2752:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2076,"indexed":false,"mutability":"mutable","name":"endDate","nameLocation":"2787:7:17","nodeType":"VariableDeclaration","scope":2080,"src":"2779:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"2779:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2078,"indexed":false,"mutability":"mutable","name":"ticketAmount","nameLocation":"2812:12:17","nodeType":"VariableDeclaration","scope":2080,"src":"2804:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"2804:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2685:145:17"},"src":"2664:167:17"},{"anonymous":false,"eventSelector":"bf3a2998bf95effb9622e3aeea768ec248f238862fd602100075c04d21caa23c","id":2090,"name":"UserStaked","nameLocation":"2847:10:17","nodeType":"EventDefinition","parameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2082,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"2883:10:17","nodeType":"VariableDeclaration","scope":2090,"src":"2867:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2081,"name":"uint256","nodeType":"ElementaryTypeName","src":"2867:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2084,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"2919:4:17","nodeType":"VariableDeclaration","scope":2090,"src":"2903:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2083,"name":"address","nodeType":"ElementaryTypeName","src":"2903:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2086,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2941:6:17","nodeType":"VariableDeclaration","scope":2090,"src":"2933:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2085,"name":"uint256","nodeType":"ElementaryTypeName","src":"2933:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2088,"indexed":false,"mutability":"mutable","name":"tickets","nameLocation":"2965:7:17","nodeType":"VariableDeclaration","scope":2090,"src":"2957:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"2957:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2857:121:17"},"src":"2841:138:17"},{"anonymous":false,"eventSelector":"d8e2a0fb3631991dd34ac6af97a04f3485326d9f70043bb29f54e66f0c5577c6","id":2096,"name":"SocialTasksCompleted","nameLocation":"2995:20:17","nodeType":"EventDefinition","parameters":{"id":2095,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3041:10:17","nodeType":"VariableDeclaration","scope":2096,"src":"3025:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2091,"name":"uint256","nodeType":"ElementaryTypeName","src":"3025:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2094,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"3077:4:17","nodeType":"VariableDeclaration","scope":2096,"src":"3061:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2093,"name":"address","nodeType":"ElementaryTypeName","src":"3061:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3015:72:17"},"src":"2989:99:17"},{"anonymous":false,"eventSelector":"ab1902ee37c92d1a78dda53814d64b815e7e3ee287d60843a3dbd6954e3206b4","id":2100,"name":"CampaignPaused","nameLocation":"3104:14:17","nodeType":"EventDefinition","parameters":{"id":2099,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2098,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3135:10:17","nodeType":"VariableDeclaration","scope":2100,"src":"3119:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2097,"name":"uint256","nodeType":"ElementaryTypeName","src":"3119:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3118:28:17"},"src":"3098:49:17"},{"anonymous":false,"eventSelector":"25128b02d37802123547e1526ab020238abf16bbc37a5bd0a918d5088b016e95","id":2104,"name":"CampaignResumed","nameLocation":"3158:15:17","nodeType":"EventDefinition","parameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3190:10:17","nodeType":"VariableDeclaration","scope":2104,"src":"3174:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"3174:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3173:28:17"},"src":"3152:50:17"},{"anonymous":false,"eventSelector":"5e6eb33a418de5dbbc17f989f7ae362cdfbb1748c5d603137c767027a354edbc","id":2108,"name":"CampaignClosed","nameLocation":"3213:14:17","nodeType":"EventDefinition","parameters":{"id":2107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2106,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3244:10:17","nodeType":"VariableDeclaration","scope":2108,"src":"3228:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2105,"name":"uint256","nodeType":"ElementaryTypeName","src":"3228:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3227:28:17"},"src":"3207:49:17"},{"anonymous":false,"eventSelector":"b7330ab5eff0061dcc2ce398cdcba65229f5e42d18318346e19c17b1cc1ebec6","id":2117,"name":"WinnersSelected","nameLocation":"3272:15:17","nodeType":"EventDefinition","parameters":{"id":2116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2110,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3313:10:17","nodeType":"VariableDeclaration","scope":2117,"src":"3297:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2109,"name":"uint256","nodeType":"ElementaryTypeName","src":"3297:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2113,"indexed":false,"mutability":"mutable","name":"winners","nameLocation":"3343:7:17","nodeType":"VariableDeclaration","scope":2117,"src":"3333:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2111,"name":"address","nodeType":"ElementaryTypeName","src":"3333:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2112,"nodeType":"ArrayTypeName","src":"3333:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2115,"indexed":false,"mutability":"mutable","name":"requestId","nameLocation":"3368:9:17","nodeType":"VariableDeclaration","scope":2117,"src":"3360:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3360:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3287:96:17"},"src":"3266:118:17"},{"anonymous":false,"eventSelector":"8bc81353cf6671d259d22783e39ed930583c86f3f4cf7e981298e6a872dfb15d","id":2123,"name":"TokensBurned","nameLocation":"3400:12:17","nodeType":"EventDefinition","parameters":{"id":2122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2119,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3438:10:17","nodeType":"VariableDeclaration","scope":2123,"src":"3422:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2118,"name":"uint256","nodeType":"ElementaryTypeName","src":"3422:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2121,"indexed":false,"mutability":"mutable","name":"totalBurned","nameLocation":"3466:11:17","nodeType":"VariableDeclaration","scope":2123,"src":"3458:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2120,"name":"uint256","nodeType":"ElementaryTypeName","src":"3458:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3412:71:17"},"src":"3394:90:17"},{"anonymous":false,"eventSelector":"4aa95f981a8337cb337de335b965507da0879c3b49f799d20058e913f5ad2c26","id":2131,"name":"PrizeClaimed","nameLocation":"3500:12:17","nodeType":"EventDefinition","parameters":{"id":2130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"indexed":true,"mutability":"mutable","name":"campaignId","nameLocation":"3538:10:17","nodeType":"VariableDeclaration","scope":2131,"src":"3522:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2124,"name":"uint256","nodeType":"ElementaryTypeName","src":"3522:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2127,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"3574:6:17","nodeType":"VariableDeclaration","scope":2131,"src":"3558:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2126,"name":"address","nodeType":"ElementaryTypeName","src":"3558:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2129,"indexed":false,"mutability":"mutable","name":"prizeIndex","nameLocation":"3598:10:17","nodeType":"VariableDeclaration","scope":2131,"src":"3590:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2128,"name":"uint256","nodeType":"ElementaryTypeName","src":"3590:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3512:102:17"},"src":"3494:121:17"},{"anonymous":false,"eventSelector":"44d6d25963f097ad14f29f06854a01f575648a1ef82f30e562ccd3889717e339","id":2135,"name":"AdminAdded","nameLocation":"3631:10:17","nodeType":"EventDefinition","parameters":{"id":2134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2133,"indexed":true,"mutability":"mutable","name":"admin","nameLocation":"3658:5:17","nodeType":"VariableDeclaration","scope":2135,"src":"3642:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2132,"name":"address","nodeType":"ElementaryTypeName","src":"3642:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3641:23:17"},"src":"3625:40:17"},{"anonymous":false,"eventSelector":"a3b62bc36326052d97ea62d63c3d60308ed4c3ea8ac079dd8499f1e9c4f80c0f","id":2139,"name":"AdminRemoved","nameLocation":"3676:12:17","nodeType":"EventDefinition","parameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2137,"indexed":true,"mutability":"mutable","name":"admin","nameLocation":"3705:5:17","nodeType":"VariableDeclaration","scope":2139,"src":"3689:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2136,"name":"address","nodeType":"ElementaryTypeName","src":"3689:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3688:23:17"},"src":"3670:42:17"},{"body":{"id":2151,"nodeType":"Block","src":"3782:113:17","statements":[{"expression":{"arguments":[{"arguments":[{"id":2143,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3808:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2144,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3820:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3824:6:17","memberName":"sender","nodeType":"MemberAccess","src":"3820:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2142,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3800:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2061646d696e20726f6c65207265717569726564","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3833:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_52471b61ff290a653c7f3594c3ca9110be5d70c1d22d02e1827afc3f6a3d136a","typeString":"literal_string \"SqudyCampaignManager: admin role required\""},"value":"SqudyCampaignManager: admin role required"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_52471b61ff290a653c7f3594c3ca9110be5d70c1d22d02e1827afc3f6a3d136a","typeString":"literal_string \"SqudyCampaignManager: admin role required\""}],"id":2141,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3792:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3792:85:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2149,"nodeType":"ExpressionStatement","src":"3792:85:17"},{"id":2150,"nodeType":"PlaceholderStatement","src":"3887:1:17"}]},"id":2152,"name":"onlyAdmin","nameLocation":"3770:9:17","nodeType":"ModifierDefinition","parameters":{"id":2140,"nodeType":"ParameterList","parameters":[],"src":"3779:2:17"},"src":"3761:134:17","virtual":false,"visibility":"internal"},{"body":{"id":2170,"nodeType":"Block","src":"3929:171:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2156,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"3955:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2157,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3970:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3974:6:17","memberName":"sender","nodeType":"MemberAccess","src":"3970:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2155,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3947:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3947:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2161,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"3993:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2162,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4005:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4009:6:17","memberName":"sender","nodeType":"MemberAccess","src":"4005:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2160,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3985:7:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3985:31:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3947:69:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206f70657261746f7220726f6c65207265717569726564","id":2166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4035:46:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_4946623f008e2d797651679e4c88f3abb1fa976b4e5df2dbc240728a55daf0a1","typeString":"literal_string \"SqudyCampaignManager: operator role required\""},"value":"SqudyCampaignManager: operator role required"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4946623f008e2d797651679e4c88f3abb1fa976b4e5df2dbc240728a55daf0a1","typeString":"literal_string \"SqudyCampaignManager: operator role required\""}],"id":2154,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3939:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3939:143:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2168,"nodeType":"ExpressionStatement","src":"3939:143:17"},{"id":2169,"nodeType":"PlaceholderStatement","src":"4092:1:17"}]},"id":2171,"name":"onlyOperator","nameLocation":"3914:12:17","nodeType":"ModifierDefinition","parameters":{"id":2153,"nodeType":"ParameterList","parameters":[],"src":"3926:2:17"},"src":"3905:195:17","virtual":false,"visibility":"internal"},{"body":{"id":2186,"nodeType":"Block","src":"4154:115:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2176,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"4172:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2178,"indexExpression":{"id":2177,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2173,"src":"4182:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4172:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"id":2179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4194:2:17","memberName":"id","nodeType":"MemberAccess","referencedDeclaration":2009,"src":"4172:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4200:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4172:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e20646f6573206e6f74206578697374","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4203:47:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_bcdf6a44e537d1e775e30c700de12bf8e29c7b8a4fe10636f5cb277dd8247072","typeString":"literal_string \"SqudyCampaignManager: campaign does not exist\""},"value":"SqudyCampaignManager: campaign does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bcdf6a44e537d1e775e30c700de12bf8e29c7b8a4fe10636f5cb277dd8247072","typeString":"literal_string \"SqudyCampaignManager: campaign does not exist\""}],"id":2175,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4164:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4164:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2184,"nodeType":"ExpressionStatement","src":"4164:87:17"},{"id":2185,"nodeType":"PlaceholderStatement","src":"4261:1:17"}]},"id":2187,"name":"campaignExists","nameLocation":"4119:14:17","nodeType":"ModifierDefinition","parameters":{"id":2174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2173,"mutability":"mutable","name":"campaignId","nameLocation":"4142:10:17","nodeType":"VariableDeclaration","scope":2187,"src":"4134:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2172,"name":"uint256","nodeType":"ElementaryTypeName","src":"4134:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4133:20:17"},"src":"4110:159:17","virtual":false,"visibility":"internal"},{"body":{"id":2203,"nodeType":"Block","src":"4323:152:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2192,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"4341:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2194,"indexExpression":{"id":2193,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"4351:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4341:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"id":2195,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4363:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"4341:28:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2196,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"4373:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2197,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4388:6:17","memberName":"ACTIVE","nodeType":"MemberAccess","referencedDeclaration":2064,"src":"4373:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"4341:53:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f7420616374697665","id":2199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4413:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e573460cdddea88aa1ef5d34dcc4f45d481e9a61b98ad7a012364f404f00376","typeString":"literal_string \"SqudyCampaignManager: campaign not active\""},"value":"SqudyCampaignManager: campaign not active"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e573460cdddea88aa1ef5d34dcc4f45d481e9a61b98ad7a012364f404f00376","typeString":"literal_string \"SqudyCampaignManager: campaign not active\""}],"id":2191,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4333:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4333:124:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2201,"nodeType":"ExpressionStatement","src":"4333:124:17"},{"id":2202,"nodeType":"PlaceholderStatement","src":"4467:1:17"}]},"id":2204,"name":"campaignActive","nameLocation":"4288:14:17","nodeType":"ModifierDefinition","parameters":{"id":2190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2189,"mutability":"mutable","name":"campaignId","nameLocation":"4311:10:17","nodeType":"VariableDeclaration","scope":2204,"src":"4303:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2188,"name":"uint256","nodeType":"ElementaryTypeName","src":"4303:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4302:20:17"},"src":"4279:196:17","virtual":false,"visibility":"internal"},{"body":{"id":2218,"nodeType":"Block","src":"4532:139:17","statements":[{"expression":{"arguments":[{"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4550:38:17","subExpression":{"expression":{"baseExpression":{"id":2209,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"4551:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2211,"indexExpression":{"id":2210,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2206,"src":"4561:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4551:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"id":2212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4573:15:17","memberName":"tokensAreBurned","nodeType":"MemberAccess","referencedDeclaration":2040,"src":"4551:37:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20746f6b656e7320616c7265616479206275726e6564","id":2214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4607:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_656a5042bac27ac057d633f88ee8f7cd4799ecac13ee15d0ed18eda6fea4d0f2","typeString":"literal_string \"SqudyCampaignManager: tokens already burned\""},"value":"SqudyCampaignManager: tokens already burned"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_656a5042bac27ac057d633f88ee8f7cd4799ecac13ee15d0ed18eda6fea4d0f2","typeString":"literal_string \"SqudyCampaignManager: tokens already burned\""}],"id":2208,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4542:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4542:111:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2216,"nodeType":"ExpressionStatement","src":"4542:111:17"},{"id":2217,"nodeType":"PlaceholderStatement","src":"4663:1:17"}]},"id":2219,"name":"campaignNotBurned","nameLocation":"4494:17:17","nodeType":"ModifierDefinition","parameters":{"id":2207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2206,"mutability":"mutable","name":"campaignId","nameLocation":"4520:10:17","nodeType":"VariableDeclaration","scope":2219,"src":"4512:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2205,"name":"uint256","nodeType":"ElementaryTypeName","src":"4512:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4511:20:17"},"src":"4485:186:17","virtual":false,"visibility":"internal"},{"body":{"id":2271,"nodeType":"Block","src":"4895:344:17","statements":[{"expression":{"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2233,"name":"squdyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"4905:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2235,"name":"_squdyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2221,"src":"4930:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2234,"name":"ISqudyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"4918:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ISqudyToken_$1843_$","typeString":"type(contract ISqudyToken)"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4918:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}},"src":"4905:37:17","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}},"id":2238,"nodeType":"ExpressionStatement","src":"4905:37:17"},{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2239,"name":"COORDINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"4952:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2241,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"4992:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2240,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4966:25:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$95_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4966:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"src":"4952:56:17","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"id":2244,"nodeType":"ExpressionStatement","src":"4952:56:17"},{"expression":{"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2245,"name":"KEY_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"5018:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2246,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"5029:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5018:19:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2248,"nodeType":"ExpressionStatement","src":"5018:19:17"},{"expression":{"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2249,"name":"SUBSCRIPTION_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"5047:15:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2250,"name":"_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"5065:15:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"5047:33:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":2252,"nodeType":"ExpressionStatement","src":"5047:33:17"},{"expression":{"arguments":[{"id":2254,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"5110:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2255,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5130:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5134:6:17","memberName":"sender","nodeType":"MemberAccess","src":"5130:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2253,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"5099:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5099:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2258,"nodeType":"ExpressionStatement","src":"5099:42:17"},{"expression":{"arguments":[{"id":2260,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"5162:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2261,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5174:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5178:6:17","memberName":"sender","nodeType":"MemberAccess","src":"5174:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2259,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"5151:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5151:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"ExpressionStatement","src":"5151:34:17"},{"expression":{"arguments":[{"id":2266,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1962,"src":"5206:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2267,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5221:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5225:6:17","memberName":"sender","nodeType":"MemberAccess","src":"5221:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2265,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"5195:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5195:37:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2270,"nodeType":"ExpressionStatement","src":"5195:37:17"}]},"id":2272,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2230,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"4878:15:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2231,"kind":"baseConstructorSpecifier","modifierName":{"id":2229,"name":"VRFConsumerBaseV2","nameLocations":["4860:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":153,"src":"4860:17:17"},"nodeType":"ModifierInvocation","src":"4860:34:17"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2221,"mutability":"mutable","name":"_squdyToken","nameLocation":"4751:11:17","nodeType":"VariableDeclaration","scope":2272,"src":"4743:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2220,"name":"address","nodeType":"ElementaryTypeName","src":"4743:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2223,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"4780:15:17","nodeType":"VariableDeclaration","scope":2272,"src":"4772:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2222,"name":"address","nodeType":"ElementaryTypeName","src":"4772:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2225,"mutability":"mutable","name":"_keyHash","nameLocation":"4813:8:17","nodeType":"VariableDeclaration","scope":2272,"src":"4805:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2224,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4805:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"_subscriptionId","nameLocation":"4838:15:17","nodeType":"VariableDeclaration","scope":2272,"src":"4831:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":2226,"name":"uint64","nodeType":"ElementaryTypeName","src":"4831:6:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4733:126:17"},"returnParameters":{"id":2232,"nodeType":"ParameterList","parameters":[],"src":"4895:0:17"},"scope":3657,"src":"4722:517:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2407,"nodeType":"Block","src":"6121:1577:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2302,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"6145:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2301,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6139:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2300,"name":"bytes","nodeType":"ElementaryTypeName","src":"6139:5:17","typeDescriptions":{}}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6139:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6151:6:17","memberName":"length","nodeType":"MemberAccess","src":"6139:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6160:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6139:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206e616d652063616e6e6f7420626520656d707479","id":2307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6163:44:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c283a94b5163ce1f22ec970ca15036503a1c7810bf9c1a72bfc62ef97118350a","typeString":"literal_string \"SqudyCampaignManager: name cannot be empty\""},"value":"SqudyCampaignManager: name cannot be empty"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c283a94b5163ce1f22ec970ca15036503a1c7810bf9c1a72bfc62ef97118350a","typeString":"literal_string \"SqudyCampaignManager: name cannot be empty\""}],"id":2299,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6131:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6131:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2309,"nodeType":"ExpressionStatement","src":"6131:77:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2311,"name":"softCap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"6226:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6236:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6226:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20736f667420636170206d7573742062652067726561746572207468616e2030","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6239:55:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_138119d8c0e1d42a84651f8ea8074768161b60addcc95dc766914be382947a15","typeString":"literal_string \"SqudyCampaignManager: soft cap must be greater than 0\""},"value":"SqudyCampaignManager: soft cap must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_138119d8c0e1d42a84651f8ea8074768161b60addcc95dc766914be382947a15","typeString":"literal_string \"SqudyCampaignManager: soft cap must be greater than 0\""}],"id":2310,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6218:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6218:77:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2316,"nodeType":"ExpressionStatement","src":"6218:77:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2318,"name":"hardCap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"6313:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2319,"name":"softCap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"6323:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6313:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206861726420636170206d7573742062652067726561746572207468616e20736f667420636170","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6332:62:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_bdd81cb0412a773f76b4debde99aa7de66a18b89c661f09ef83b3a8f4a0d0169","typeString":"literal_string \"SqudyCampaignManager: hard cap must be greater than soft cap\""},"value":"SqudyCampaignManager: hard cap must be greater than soft cap"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_bdd81cb0412a773f76b4debde99aa7de66a18b89c661f09ef83b3a8f4a0d0169","typeString":"literal_string \"SqudyCampaignManager: hard cap must be greater than soft cap\""}],"id":2317,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6305:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6305:90:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2323,"nodeType":"ExpressionStatement","src":"6305:90:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2325,"name":"ticketAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"6413:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6428:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6413:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a207469636b657420616d6f756e74206d7573742062652067726561746572207468616e2030","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6431:60:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_6440de17d043f3ffddcb74c3c57adbc9d04b8ed35188d2b8221832071c230686","typeString":"literal_string \"SqudyCampaignManager: ticket amount must be greater than 0\""},"value":"SqudyCampaignManager: ticket amount must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6440de17d043f3ffddcb74c3c57adbc9d04b8ed35188d2b8221832071c230686","typeString":"literal_string \"SqudyCampaignManager: ticket amount must be greater than 0\""}],"id":2324,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6405:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6405:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2330,"nodeType":"ExpressionStatement","src":"6405:87:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2332,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6510:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2333,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6522:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6528:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6522:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6510:27:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2073746172742064617465206d75737420626520696e2074686520667574757265","id":2336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6539:56:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_e65702cceb48dc2a6fdc7c28cbf50dc0e3ed25ce4c0f339a5dee0278696184fa","typeString":"literal_string \"SqudyCampaignManager: start date must be in the future\""},"value":"SqudyCampaignManager: start date must be in the future"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e65702cceb48dc2a6fdc7c28cbf50dc0e3ed25ce4c0f339a5dee0278696184fa","typeString":"literal_string \"SqudyCampaignManager: start date must be in the future\""}],"id":2331,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6502:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6502:94:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2338,"nodeType":"ExpressionStatement","src":"6502:94:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2340,"name":"endDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"6614:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2341,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"6624:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6614:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20656e642064617465206d7573742062652061667465722073746172742064617465","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6635:57:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8e93d5d7e6c95d0c269210ace5ee81182fae5a58195a5ceeeb1100fc49e136d","typeString":"literal_string \"SqudyCampaignManager: end date must be after start date\""},"value":"SqudyCampaignManager: end date must be after start date"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8e93d5d7e6c95d0c269210ace5ee81182fae5a58195a5ceeeb1100fc49e136d","typeString":"literal_string \"SqudyCampaignManager: end date must be after start date\""}],"id":2339,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6606:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6606:87:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2345,"nodeType":"ExpressionStatement","src":"6606:87:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2347,"name":"prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"6711:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},"id":2348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6718:6:17","memberName":"length","nodeType":"MemberAccess","src":"6711:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6727:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6711:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206d7573742068617665206174206c65617374206f6e65207072697a65","id":2351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6730:52:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_46cc7d35a4b10ab30123ae65d9311d2324667fa394f9c719720101cb08ea91ec","typeString":"literal_string \"SqudyCampaignManager: must have at least one prize\""},"value":"SqudyCampaignManager: must have at least one prize"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_46cc7d35a4b10ab30123ae65d9311d2324667fa394f9c719720101cb08ea91ec","typeString":"literal_string \"SqudyCampaignManager: must have at least one prize\""}],"id":2346,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6703:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6703:80:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2353,"nodeType":"ExpressionStatement","src":"6703:80:17"},{"expression":{"id":2355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6802:14:17","subExpression":{"id":2354,"name":"_campaignIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"6802:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2356,"nodeType":"ExpressionStatement","src":"6802:14:17"},{"assignments":[2358],"declarations":[{"constant":false,"id":2358,"mutability":"mutable","name":"campaignId","nameLocation":"6834:10:17","nodeType":"VariableDeclaration","scope":2407,"src":"6826:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"6826:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2360,"initialValue":{"id":2359,"name":"_campaignIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"6847:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6826:33:17"},{"expression":{"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2361,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"6878:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2363,"indexExpression":{"id":2362,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"6888:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6878:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2365,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"6929:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2366,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"6959:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2367,"name":"description","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2277,"src":"6990:11:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2368,"name":"imageUrl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"7025:8:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2369,"name":"softCap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2281,"src":"7056:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2370,"name":"hardCap","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2283,"src":"7086:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2371,"name":"ticketAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"7121:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2372,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7162:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2373,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"7188:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2374,"name":"endDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"7220:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7259:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2376,"name":"prizes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"7282:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"}},{"arguments":[{"hexValue":"30","id":2380,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7325:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2379,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7311:13:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":2377,"name":"address","nodeType":"ElementaryTypeName","src":"7315:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2378,"nodeType":"ArrayTypeName","src":"7315:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":2381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7311:16:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"expression":{"id":2382,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"7349:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7364:7:17","memberName":"PENDING","nodeType":"MemberAccess","referencedDeclaration":2063,"src":"7349:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},{"hexValue":"66616c7365","id":2384,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7402:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"hexValue":"30","id":2385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7434:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":2388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7480:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7472:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2386,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7472:7:17","typeDescriptions":{}}},"id":2389,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7472:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2390,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7507:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7513:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"7507:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2392,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7547:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7553:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"7547:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string memory[] memory"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2364,"name":"Campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"6902:8:17","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Campaign_$2049_storage_ptr_$","typeString":"type(struct SqudyCampaignManager.Campaign storage pointer)"}},"id":2394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6925:2:17","6953:4:17","6977:11:17","7015:8:17","7047:7:17","7077:7:17","7107:12:17","7147:13:17","7177:9:17","7211:7:17","7241:16:17","7274:6:17","7302:7:17","7341:6:17","7385:15:17","7421:11:17","7449:21:17","7496:9:17","7536:9:17"],"names":["id","name","description","imageUrl","softCap","hardCap","ticketAmount","currentAmount","startDate","endDate","participantCount","prizes","winners","status","tokensAreBurned","totalBurned","winnerSelectionTxHash","createdAt","updatedAt"],"nodeType":"FunctionCall","src":"6902:671:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_memory_ptr","typeString":"struct SqudyCampaignManager.Campaign memory"}},"src":"6878:695:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"id":2396,"nodeType":"ExpressionStatement","src":"6878:695:17"},{"eventCall":{"arguments":[{"id":2398,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"7613:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2399,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2275,"src":"7625:4:17","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2400,"name":"startDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2287,"src":"7631:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2401,"name":"endDate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2289,"src":"7642:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2402,"name":"ticketAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"7651:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2397,"name":"CampaignCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"7597:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,string memory,uint256,uint256,uint256)"}},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7597:67:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2404,"nodeType":"EmitStatement","src":"7592:72:17"},{"expression":{"id":2405,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2358,"src":"7681:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2298,"id":2406,"nodeType":"Return","src":"7674:17:17"}]},"documentation":{"id":2273,"nodeType":"StructuredDocumentation","src":"5299:488:17","text":" @dev Creates a new campaign\n @param name Campaign name\n @param description Campaign description\n @param imageUrl Campaign image URL\n @param softCap Minimum amount of tokens required\n @param hardCap Maximum amount of tokens that can be staked\n @param ticketAmount Amount of tokens per ticket\n @param startDate Campaign start timestamp\n @param endDate Campaign end timestamp\n @param prizes Array of prize descriptions"},"functionSelector":"03463dd9","id":2408,"implemented":true,"kind":"function","modifiers":[{"id":2295,"kind":"modifierInvocation","modifierName":{"id":2294,"name":"onlyOperator","nameLocations":["6090:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"6090:12:17"},"nodeType":"ModifierInvocation","src":"6090:12:17"}],"name":"createCampaign","nameLocation":"5801:14:17","nodeType":"FunctionDefinition","parameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2275,"mutability":"mutable","name":"name","nameLocation":"5839:4:17","nodeType":"VariableDeclaration","scope":2408,"src":"5825:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2274,"name":"string","nodeType":"ElementaryTypeName","src":"5825:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2277,"mutability":"mutable","name":"description","nameLocation":"5867:11:17","nodeType":"VariableDeclaration","scope":2408,"src":"5853:25:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2276,"name":"string","nodeType":"ElementaryTypeName","src":"5853:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2279,"mutability":"mutable","name":"imageUrl","nameLocation":"5902:8:17","nodeType":"VariableDeclaration","scope":2408,"src":"5888:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2278,"name":"string","nodeType":"ElementaryTypeName","src":"5888:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2281,"mutability":"mutable","name":"softCap","nameLocation":"5928:7:17","nodeType":"VariableDeclaration","scope":2408,"src":"5920:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"5920:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"hardCap","nameLocation":"5953:7:17","nodeType":"VariableDeclaration","scope":2408,"src":"5945:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"5945:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2285,"mutability":"mutable","name":"ticketAmount","nameLocation":"5978:12:17","nodeType":"VariableDeclaration","scope":2408,"src":"5970:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2284,"name":"uint256","nodeType":"ElementaryTypeName","src":"5970:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"startDate","nameLocation":"6008:9:17","nodeType":"VariableDeclaration","scope":2408,"src":"6000:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"6000:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2289,"mutability":"mutable","name":"endDate","nameLocation":"6035:7:17","nodeType":"VariableDeclaration","scope":2408,"src":"6027:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2288,"name":"uint256","nodeType":"ElementaryTypeName","src":"6027:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2292,"mutability":"mutable","name":"prizes","nameLocation":"6068:6:17","nodeType":"VariableDeclaration","scope":2408,"src":"6052:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_string_memory_ptr_$dyn_memory_ptr","typeString":"string[]"},"typeName":{"baseType":{"id":2290,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"id":2291,"nodeType":"ArrayTypeName","src":"6052:8:17","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage_ptr","typeString":"string[]"}},"visibility":"internal"}],"src":"5815:265:17"},"returnParameters":{"id":2298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2408,"src":"6112:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2296,"name":"uint256","nodeType":"ElementaryTypeName","src":"6112:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6111:9:17"},"scope":3657,"src":"5792:1906:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2458,"nodeType":"Block","src":"7892:419:17","statements":[{"assignments":[2421],"declarations":[{"constant":false,"id":2421,"mutability":"mutable","name":"campaign","nameLocation":"7919:8:17","nodeType":"VariableDeclaration","scope":2458,"src":"7902:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2420,"nodeType":"UserDefinedTypeName","pathNode":{"id":2419,"name":"Campaign","nameLocations":["7902:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"7902:8:17"},"referencedDeclaration":2049,"src":"7902:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2425,"initialValue":{"baseExpression":{"id":2422,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"7930:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2424,"indexExpression":{"id":2423,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"7940:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7930:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7902:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2427,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"7969:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"7969:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2429,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"7988:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8003:7:17","memberName":"PENDING","nodeType":"MemberAccess","referencedDeclaration":2063,"src":"7988:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"7969:41:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f742070656e64696e67","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8029:44:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_0c1947670d92b9b3dba82f3951a338cd5a5dec3e237b8d05ec0fd63ee13ecd3e","typeString":"literal_string \"SqudyCampaignManager: campaign not pending\""},"value":"SqudyCampaignManager: campaign not pending"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0c1947670d92b9b3dba82f3951a338cd5a5dec3e237b8d05ec0fd63ee13ecd3e","typeString":"literal_string \"SqudyCampaignManager: campaign not pending\""}],"id":2426,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7961:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7961:113:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2434,"nodeType":"ExpressionStatement","src":"7961:113:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2436,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8092:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8098:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"8092:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":2438,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8111:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2439,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8120:9:17","memberName":"startDate","nodeType":"MemberAccess","referencedDeclaration":2025,"src":"8111:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8092:37:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f7420726561647920746f207374617274","id":2441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8148:51:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_df4b110bbba32233a2a4becba0321e3dc4eb90567cd5ed23e877d730f5baff3b","typeString":"literal_string \"SqudyCampaignManager: campaign not ready to start\""},"value":"SqudyCampaignManager: campaign not ready to start"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_df4b110bbba32233a2a4becba0321e3dc4eb90567cd5ed23e877d730f5baff3b","typeString":"literal_string \"SqudyCampaignManager: campaign not ready to start\""}],"id":2435,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8084:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8084:116:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2443,"nodeType":"ExpressionStatement","src":"8084:116:17"},{"expression":{"id":2449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2444,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8219:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2446,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8228:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"8219:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2447,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"8237:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2448,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8252:6:17","memberName":"ACTIVE","nodeType":"MemberAccess","referencedDeclaration":2064,"src":"8237:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"8219:39:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"id":2450,"nodeType":"ExpressionStatement","src":"8219:39:17"},{"expression":{"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2451,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8268:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2453,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8277:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"8268:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2454,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8289:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8295:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"8289:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8268:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2457,"nodeType":"ExpressionStatement","src":"8268:36:17"}]},"documentation":{"id":2409,"nodeType":"StructuredDocumentation","src":"7708:52:17","text":" @dev Activates a pending campaign"},"functionSelector":"493f1726","id":2459,"implemented":true,"kind":"function","modifiers":[{"id":2414,"kind":"modifierInvocation","modifierName":{"id":2413,"name":"onlyOperator","nameLocations":["7838:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"7838:12:17"},"nodeType":"ModifierInvocation","src":"7838:12:17"},{"arguments":[{"id":2416,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"7875:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2417,"kind":"modifierInvocation","modifierName":{"id":2415,"name":"campaignExists","nameLocations":["7860:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"7860:14:17"},"nodeType":"ModifierInvocation","src":"7860:26:17"}],"name":"activateCampaign","nameLocation":"7774:16:17","nodeType":"FunctionDefinition","parameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2411,"mutability":"mutable","name":"campaignId","nameLocation":"7799:10:17","nodeType":"VariableDeclaration","scope":2459,"src":"7791:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2410,"name":"uint256","nodeType":"ElementaryTypeName","src":"7791:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7790:20:17"},"returnParameters":{"id":2418,"nodeType":"ParameterList","parameters":[],"src":"7892:0:17"},"scope":3657,"src":"7765:546:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2504,"nodeType":"Block","src":"8499:341:17","statements":[{"assignments":[2472],"declarations":[{"constant":false,"id":2472,"mutability":"mutable","name":"campaign","nameLocation":"8526:8:17","nodeType":"VariableDeclaration","scope":2504,"src":"8509:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2471,"nodeType":"UserDefinedTypeName","pathNode":{"id":2470,"name":"Campaign","nameLocations":["8509:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"8509:8:17"},"referencedDeclaration":2049,"src":"8509:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2476,"initialValue":{"baseExpression":{"id":2473,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"8537:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2475,"indexExpression":{"id":2474,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"8547:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8537:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"8509:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2478,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"8576:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8585:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"8576:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2480,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"8595:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2481,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8610:6:17","memberName":"ACTIVE","nodeType":"MemberAccess","referencedDeclaration":2064,"src":"8595:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"8576:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f7420616374697665","id":2483,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8635:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e573460cdddea88aa1ef5d34dcc4f45d481e9a61b98ad7a012364f404f00376","typeString":"literal_string \"SqudyCampaignManager: campaign not active\""},"value":"SqudyCampaignManager: campaign not active"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e573460cdddea88aa1ef5d34dcc4f45d481e9a61b98ad7a012364f404f00376","typeString":"literal_string \"SqudyCampaignManager: campaign not active\""}],"id":2477,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8568:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8568:111:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2485,"nodeType":"ExpressionStatement","src":"8568:111:17"},{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2486,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"8698:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2488,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8707:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"8698:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2489,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"8716:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8731:6:17","memberName":"PAUSED","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"8716:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"8698:39:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"id":2492,"nodeType":"ExpressionStatement","src":"8698:39:17"},{"expression":{"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2493,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"8747:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2495,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8756:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"8747:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2496,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8768:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8774:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"8768:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8747:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2499,"nodeType":"ExpressionStatement","src":"8747:36:17"},{"eventCall":{"arguments":[{"id":2501,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"8822:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2500,"name":"CampaignPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2100,"src":"8807:14:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8807:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2503,"nodeType":"EmitStatement","src":"8802:31:17"}]},"documentation":{"id":2460,"nodeType":"StructuredDocumentation","src":"8321:49:17","text":" @dev Pauses an active campaign"},"functionSelector":"de99347a","id":2505,"implemented":true,"kind":"function","modifiers":[{"id":2465,"kind":"modifierInvocation","modifierName":{"id":2464,"name":"onlyOperator","nameLocations":["8445:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"8445:12:17"},"nodeType":"ModifierInvocation","src":"8445:12:17"},{"arguments":[{"id":2467,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2462,"src":"8482:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2468,"kind":"modifierInvocation","modifierName":{"id":2466,"name":"campaignExists","nameLocations":["8467:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"8467:14:17"},"nodeType":"ModifierInvocation","src":"8467:26:17"}],"name":"pauseCampaign","nameLocation":"8384:13:17","nodeType":"FunctionDefinition","parameters":{"id":2463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2462,"mutability":"mutable","name":"campaignId","nameLocation":"8406:10:17","nodeType":"VariableDeclaration","scope":2505,"src":"8398:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2461,"name":"uint256","nodeType":"ElementaryTypeName","src":"8398:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8397:20:17"},"returnParameters":{"id":2469,"nodeType":"ParameterList","parameters":[],"src":"8499:0:17"},"scope":3657,"src":"8375:465:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2559,"nodeType":"Block","src":"9029:456:17","statements":[{"assignments":[2518],"declarations":[{"constant":false,"id":2518,"mutability":"mutable","name":"campaign","nameLocation":"9056:8:17","nodeType":"VariableDeclaration","scope":2559,"src":"9039:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2517,"nodeType":"UserDefinedTypeName","pathNode":{"id":2516,"name":"Campaign","nameLocations":["9039:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"9039:8:17"},"referencedDeclaration":2049,"src":"9039:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2522,"initialValue":{"baseExpression":{"id":2519,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"9067:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2521,"indexExpression":{"id":2520,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"9077:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9067:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9039:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2524,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"9106:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9115:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"9106:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2526,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"9125:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9140:6:17","memberName":"PAUSED","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"9125:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"9106:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f7420706175736564","id":2529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9165:43:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1bbae03ff2efa0e78e0b147a4d4f65cf1bb67c0a916f9674384e8f86ddf6ca74","typeString":"literal_string \"SqudyCampaignManager: campaign not paused\""},"value":"SqudyCampaignManager: campaign not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1bbae03ff2efa0e78e0b147a4d4f65cf1bb67c0a916f9674384e8f86ddf6ca74","typeString":"literal_string \"SqudyCampaignManager: campaign not paused\""}],"id":2523,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9098:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9098:111:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2531,"nodeType":"ExpressionStatement","src":"9098:111:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2533,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9227:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9233:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"9227:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2535,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"9245:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9254:7:17","memberName":"endDate","nodeType":"MemberAccess","referencedDeclaration":2027,"src":"9245:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9227:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e2068617320656e646564","id":2538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9280:42:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_6e652098c7d5e751182c292575586d3d818f291310ba6950e3082688c7008cc0","typeString":"literal_string \"SqudyCampaignManager: campaign has ended\""},"value":"SqudyCampaignManager: campaign has ended"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6e652098c7d5e751182c292575586d3d818f291310ba6950e3082688c7008cc0","typeString":"literal_string \"SqudyCampaignManager: campaign has ended\""}],"id":2532,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9219:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9219:104:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2540,"nodeType":"ExpressionStatement","src":"9219:104:17"},{"expression":{"id":2546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2541,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"9342:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2543,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9351:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"9342:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2544,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"9360:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9375:6:17","memberName":"ACTIVE","nodeType":"MemberAccess","referencedDeclaration":2064,"src":"9360:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"9342:39:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"id":2547,"nodeType":"ExpressionStatement","src":"9342:39:17"},{"expression":{"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2548,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"9391:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2550,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9400:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"9391:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2551,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9412:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9418:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"9412:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9391:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2554,"nodeType":"ExpressionStatement","src":"9391:36:17"},{"eventCall":{"arguments":[{"id":2556,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"9467:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2555,"name":"CampaignResumed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"9451:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9451:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2558,"nodeType":"EmitStatement","src":"9446:32:17"}]},"documentation":{"id":2506,"nodeType":"StructuredDocumentation","src":"8850:49:17","text":" @dev Resumes a paused campaign"},"functionSelector":"9e3696d9","id":2560,"implemented":true,"kind":"function","modifiers":[{"id":2511,"kind":"modifierInvocation","modifierName":{"id":2510,"name":"onlyOperator","nameLocations":["8975:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"8975:12:17"},"nodeType":"ModifierInvocation","src":"8975:12:17"},{"arguments":[{"id":2513,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"9012:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2514,"kind":"modifierInvocation","modifierName":{"id":2512,"name":"campaignExists","nameLocations":["8997:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"8997:14:17"},"nodeType":"ModifierInvocation","src":"8997:26:17"}],"name":"resumeCampaign","nameLocation":"8913:14:17","nodeType":"FunctionDefinition","parameters":{"id":2509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"campaignId","nameLocation":"8936:10:17","nodeType":"VariableDeclaration","scope":2560,"src":"8928:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2507,"name":"uint256","nodeType":"ElementaryTypeName","src":"8928:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8927:20:17"},"returnParameters":{"id":2515,"nodeType":"ParameterList","parameters":[],"src":"9029:0:17"},"scope":3657,"src":"8904:581:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2620,"nodeType":"Block","src":"9699:516:17","statements":[{"assignments":[2573],"declarations":[{"constant":false,"id":2573,"mutability":"mutable","name":"campaign","nameLocation":"9726:8:17","nodeType":"VariableDeclaration","scope":2620,"src":"9709:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2572,"nodeType":"UserDefinedTypeName","pathNode":{"id":2571,"name":"Campaign","nameLocations":["9709:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"9709:8:17"},"referencedDeclaration":2049,"src":"9709:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2577,"initialValue":{"baseExpression":{"id":2574,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"9737:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2576,"indexExpression":{"id":2575,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"9747:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9737:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9709:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2579,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"9776:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2580,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9785:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"9776:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2581,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"9795:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9810:6:17","memberName":"ACTIVE","nodeType":"MemberAccess","referencedDeclaration":2064,"src":"9795:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"9776:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2584,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"9820:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2585,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9829:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"9820:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2586,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"9839:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9854:6:17","memberName":"PAUSED","nodeType":"MemberAccess","referencedDeclaration":2065,"src":"9839:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"9820:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9776:84:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f7420616374697665206f7220706175736564","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9879:53:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_cfd77193a2877297c777f349ca226a399fb927a36af4f82e588dca213897743a","typeString":"literal_string \"SqudyCampaignManager: campaign not active or paused\""},"value":"SqudyCampaignManager: campaign not active or paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cfd77193a2877297c777f349ca226a399fb927a36af4f82e588dca213897743a","typeString":"literal_string \"SqudyCampaignManager: campaign not active or paused\""}],"id":2578,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9768:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9768:165:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2592,"nodeType":"ExpressionStatement","src":"9768:165:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2594,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9951:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9957:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"9951:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"expression":{"id":2596,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"9970:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2597,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9979:7:17","memberName":"endDate","nodeType":"MemberAccess","referencedDeclaration":2027,"src":"9970:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9951:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f7420656e64656420796574","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10005:46:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_fd19247777aab13c1bdc57bca6dfc82c0eebb6496d32b3537a4b5b4db57b565e","typeString":"literal_string \"SqudyCampaignManager: campaign not ended yet\""},"value":"SqudyCampaignManager: campaign not ended yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fd19247777aab13c1bdc57bca6dfc82c0eebb6496d32b3537a4b5b4db57b565e","typeString":"literal_string \"SqudyCampaignManager: campaign not ended yet\""}],"id":2593,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9943:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9943:109:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2601,"nodeType":"ExpressionStatement","src":"9943:109:17"},{"expression":{"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2602,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"10071:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10080:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"10071:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2605,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"10089:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10104:8:17","memberName":"FINISHED","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"10089:23:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"10071:41:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"id":2608,"nodeType":"ExpressionStatement","src":"10071:41:17"},{"expression":{"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2609,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2573,"src":"10122:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2611,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10131:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"10122:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2612,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10143:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10149:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"10143:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10122:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2615,"nodeType":"ExpressionStatement","src":"10122:36:17"},{"eventCall":{"arguments":[{"id":2617,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"10197:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2616,"name":"CampaignClosed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"10182:14:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10182:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2619,"nodeType":"EmitStatement","src":"10177:31:17"}]},"documentation":{"id":2561,"nodeType":"StructuredDocumentation","src":"9495:75:17","text":" @dev Closes a campaign and prepares for winner selection"},"functionSelector":"b0e1c1e1","id":2621,"implemented":true,"kind":"function","modifiers":[{"id":2566,"kind":"modifierInvocation","modifierName":{"id":2565,"name":"onlyOperator","nameLocations":["9645:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"9645:12:17"},"nodeType":"ModifierInvocation","src":"9645:12:17"},{"arguments":[{"id":2568,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2563,"src":"9682:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2569,"kind":"modifierInvocation","modifierName":{"id":2567,"name":"campaignExists","nameLocations":["9667:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"9667:14:17"},"nodeType":"ModifierInvocation","src":"9667:26:17"}],"name":"closeCampaign","nameLocation":"9584:13:17","nodeType":"FunctionDefinition","parameters":{"id":2564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2563,"mutability":"mutable","name":"campaignId","nameLocation":"9606:10:17","nodeType":"VariableDeclaration","scope":2621,"src":"9598:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2562,"name":"uint256","nodeType":"ElementaryTypeName","src":"9598:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9597:20:17"},"returnParameters":{"id":2570,"nodeType":"ParameterList","parameters":[],"src":"9699:0:17"},"scope":3657,"src":"9575:640:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2680,"nodeType":"Block","src":"10463:680:17","statements":[{"assignments":[2637],"declarations":[{"constant":false,"id":2637,"mutability":"mutable","name":"campaign","nameLocation":"10490:8:17","nodeType":"VariableDeclaration","scope":2680,"src":"10473:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2636,"nodeType":"UserDefinedTypeName","pathNode":{"id":2635,"name":"Campaign","nameLocations":["10473:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"10473:8:17"},"referencedDeclaration":2049,"src":"10473:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2641,"initialValue":{"baseExpression":{"id":2638,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"10501:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2640,"indexExpression":{"id":2639,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"10511:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10501:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10473:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2643,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"10540:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2644,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10549:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"10540:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2645,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"10559:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10574:8:17","memberName":"FINISHED","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"10559:23:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"10540:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f742066696e6973686564","id":2648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10601:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba04815cf56e76948b9af1817f71059c5c68aa93afd5aaf3d8a024864795addf","typeString":"literal_string \"SqudyCampaignManager: campaign not finished\""},"value":"SqudyCampaignManager: campaign not finished"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ba04815cf56e76948b9af1817f71059c5c68aa93afd5aaf3d8a024864795addf","typeString":"literal_string \"SqudyCampaignManager: campaign not finished\""}],"id":2642,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10532:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10532:115:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2650,"nodeType":"ExpressionStatement","src":"10532:115:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2652,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"10665:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2653,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10674:16:17","memberName":"participantCount","nodeType":"MemberAccess","referencedDeclaration":2029,"src":"10665:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10665:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206e6f207061727469636970616e7473","id":2656,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10713:39:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_8c29294777d333befc84839f40d9cd42bfe540f615050d53f8deb80985fb1dcc","typeString":"literal_string \"SqudyCampaignManager: no participants\""},"value":"SqudyCampaignManager: no participants"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8c29294777d333befc84839f40d9cd42bfe540f615050d53f8deb80985fb1dcc","typeString":"literal_string \"SqudyCampaignManager: no participants\""}],"id":2651,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10657:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10657:96:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2658,"nodeType":"ExpressionStatement","src":"10657:96:17"},{"assignments":[2660],"declarations":[{"constant":false,"id":2660,"mutability":"mutable","name":"requestId","nameLocation":"10832:9:17","nodeType":"VariableDeclaration","scope":2680,"src":"10824:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2659,"name":"uint256","nodeType":"ElementaryTypeName","src":"10824:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2673,"initialValue":{"arguments":[{"id":2663,"name":"KEY_HASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"10888:8:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2664,"name":"SUBSCRIPTION_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"10910:15:17","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":2665,"name":"REQUEST_CONFIRMATIONS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1972,"src":"10939:21:17","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":2666,"name":"CALLBACK_GAS_LIMIT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"10974:18:17","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"arguments":[{"expression":{"id":2669,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2637,"src":"11013:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2670,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11022:16:17","memberName":"participantCount","nodeType":"MemberAccess","referencedDeclaration":2029,"src":"11013:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11006:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint32_$","typeString":"type(uint32)"},"typeName":{"id":2667,"name":"uint32","nodeType":"ElementaryTypeName","src":"11006:6:17","typeDescriptions":{}}},"id":2671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11006:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":2661,"name":"COORDINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1965,"src":"10844:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$95","typeString":"contract VRFCoordinatorV2Interface"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10856:18:17","memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":28,"src":"10844:30:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":2672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10844:238:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10824:258:17"},{"expression":{"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2674,"name":"vrfRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"11101:11:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2676,"indexExpression":{"id":2675,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"11113:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11101:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2677,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"11126:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11101:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2679,"nodeType":"ExpressionStatement","src":"11101:35:17"}]},"documentation":{"id":2622,"nodeType":"StructuredDocumentation","src":"10225:70:17","text":" @dev Initiates winner selection using Chainlink VRF"},"functionSelector":"39a2eb2a","id":2681,"implemented":true,"kind":"function","modifiers":[{"id":2627,"kind":"modifierInvocation","modifierName":{"id":2626,"name":"onlyOperator","nameLocations":["10370:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"10370:12:17"},"nodeType":"ModifierInvocation","src":"10370:12:17"},{"arguments":[{"id":2629,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"10407:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2630,"kind":"modifierInvocation","modifierName":{"id":2628,"name":"campaignExists","nameLocations":["10392:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"10392:14:17"},"nodeType":"ModifierInvocation","src":"10392:26:17"},{"arguments":[{"id":2632,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"10446:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2633,"kind":"modifierInvocation","modifierName":{"id":2631,"name":"campaignNotBurned","nameLocations":["10428:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":2219,"src":"10428:17:17"},"nodeType":"ModifierInvocation","src":"10428:29:17"}],"name":"selectWinners","nameLocation":"10309:13:17","nodeType":"FunctionDefinition","parameters":{"id":2625,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2624,"mutability":"mutable","name":"campaignId","nameLocation":"10331:10:17","nodeType":"VariableDeclaration","scope":2681,"src":"10323:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2623,"name":"uint256","nodeType":"ElementaryTypeName","src":"10323:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10322:20:17"},"returnParameters":{"id":2634,"nodeType":"ParameterList","parameters":[],"src":"10463:0:17"},"scope":3657,"src":"10300:843:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2765,"nodeType":"Block","src":"11391:739:17","statements":[{"assignments":[2697],"declarations":[{"constant":false,"id":2697,"mutability":"mutable","name":"campaign","nameLocation":"11418:8:17","nodeType":"VariableDeclaration","scope":2765,"src":"11401:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2696,"nodeType":"UserDefinedTypeName","pathNode":{"id":2695,"name":"Campaign","nameLocations":["11401:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"11401:8:17"},"referencedDeclaration":2049,"src":"11401:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2701,"initialValue":{"baseExpression":{"id":2698,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"11429:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2700,"indexExpression":{"id":2699,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"11439:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11429:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11401:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":2707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2703,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11468:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2704,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11477:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"11468:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2705,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"11487:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":2706,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11502:8:17","memberName":"FINISHED","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"11487:23:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"11468:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f742066696e6973686564","id":2708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11529:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba04815cf56e76948b9af1817f71059c5c68aa93afd5aaf3d8a024864795addf","typeString":"literal_string \"SqudyCampaignManager: campaign not finished\""},"value":"SqudyCampaignManager: campaign not finished"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ba04815cf56e76948b9af1817f71059c5c68aa93afd5aaf3d8a024864795addf","typeString":"literal_string \"SqudyCampaignManager: campaign not finished\""}],"id":2702,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11460:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11460:115:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2710,"nodeType":"ExpressionStatement","src":"11460:115:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2712,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11593:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11602:7:17","memberName":"winners","nodeType":"MemberAccess","referencedDeclaration":2035,"src":"11593:16:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11610:6:17","memberName":"length","nodeType":"MemberAccess","src":"11593:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11619:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11593:27:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2077696e6e657273206e6f742073656c6563746564","id":2717,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11639:44:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba188e57bdf2b440a68ac1647ec1aae95cc427ac311e4321f1fceb19bcd2398c","typeString":"literal_string \"SqudyCampaignManager: winners not selected\""},"value":"SqudyCampaignManager: winners not selected"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ba188e57bdf2b440a68ac1647ec1aae95cc427ac311e4321f1fceb19bcd2398c","typeString":"literal_string \"SqudyCampaignManager: winners not selected\""}],"id":2711,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11585:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11585:99:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2719,"nodeType":"ExpressionStatement","src":"11585:99:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2721,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11702:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2722,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11711:13:17","memberName":"currentAmount","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"11702:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2723,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11727:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11702:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206e6f20746f6b656e7320746f206275726e","id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11747:41:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_292410afca4e33292e3c06006556eab548aeccd5c440223b2b398953237ea078","typeString":"literal_string \"SqudyCampaignManager: no tokens to burn\""},"value":"SqudyCampaignManager: no tokens to burn"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_292410afca4e33292e3c06006556eab548aeccd5c440223b2b398953237ea078","typeString":"literal_string \"SqudyCampaignManager: no tokens to burn\""}],"id":2720,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11694:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11694:95:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2727,"nodeType":"ExpressionStatement","src":"11694:95:17"},{"expression":{"arguments":[{"arguments":[{"id":2733,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"11870:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SqudyCampaignManager_$3657","typeString":"contract SqudyCampaignManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SqudyCampaignManager_$3657","typeString":"contract SqudyCampaignManager"}],"id":2732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11862:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2731,"name":"address","nodeType":"ElementaryTypeName","src":"11862:7:17","typeDescriptions":{}}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11862:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2735,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11877:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2736,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11886:13:17","memberName":"currentAmount","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"11877:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2728,"name":"squdyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"11842:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11853:8:17","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":1817,"src":"11842:19:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) external"}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11842:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2738,"nodeType":"ExpressionStatement","src":"11842:58:17"},{"expression":{"id":2743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2739,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11919:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2741,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11928:15:17","memberName":"tokensAreBurned","nodeType":"MemberAccess","referencedDeclaration":2040,"src":"11919:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11946:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"11919:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2744,"nodeType":"ExpressionStatement","src":"11919:31:17"},{"expression":{"id":2750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2745,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11960:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11969:11:17","memberName":"totalBurned","nodeType":"MemberAccess","referencedDeclaration":2042,"src":"11960:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2748,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"11983:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2749,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11992:13:17","memberName":"currentAmount","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"11983:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11960:45:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2751,"nodeType":"ExpressionStatement","src":"11960:45:17"},{"expression":{"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2752,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"12015:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2754,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12024:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"12015:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2755,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12036:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12042:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"12036:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12015:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2758,"nodeType":"ExpressionStatement","src":"12015:36:17"},{"eventCall":{"arguments":[{"id":2760,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"12088:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2761,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"12100:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2762,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12109:13:17","memberName":"currentAmount","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"12100:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2759,"name":"TokensBurned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2123,"src":"12075:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":2763,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12075:48:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2764,"nodeType":"EmitStatement","src":"12070:53:17"}]},"documentation":{"id":2682,"nodeType":"StructuredDocumentation","src":"11153:70:17","text":" @dev Burns all staked tokens after winner selection"},"functionSelector":"8c0c5902","id":2766,"implemented":true,"kind":"function","modifiers":[{"id":2687,"kind":"modifierInvocation","modifierName":{"id":2686,"name":"onlyOperator","nameLocations":["11298:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"11298:12:17"},"nodeType":"ModifierInvocation","src":"11298:12:17"},{"arguments":[{"id":2689,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"11335:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2690,"kind":"modifierInvocation","modifierName":{"id":2688,"name":"campaignExists","nameLocations":["11320:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"11320:14:17"},"nodeType":"ModifierInvocation","src":"11320:26:17"},{"arguments":[{"id":2692,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"11374:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2693,"kind":"modifierInvocation","modifierName":{"id":2691,"name":"campaignNotBurned","nameLocations":["11356:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":2219,"src":"11356:17:17"},"nodeType":"ModifierInvocation","src":"11356:29:17"}],"name":"burnAllTokens","nameLocation":"11237:13:17","nodeType":"FunctionDefinition","parameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2684,"mutability":"mutable","name":"campaignId","nameLocation":"11259:10:17","nodeType":"VariableDeclaration","scope":2766,"src":"11251:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2683,"name":"uint256","nodeType":"ElementaryTypeName","src":"11251:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11250:20:17"},"returnParameters":{"id":2694,"nodeType":"ParameterList","parameters":[],"src":"11391:0:17"},"scope":3657,"src":"11228:902:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2794,"nodeType":"Block","src":"12256:163:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2776,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"12274:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12291:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2778,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12283:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2777,"name":"address","nodeType":"ElementaryTypeName","src":"12283:7:17","typeDescriptions":{}}},"id":2780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12283:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12274:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20696e76616c69642061646d696e2061646472657373","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12295:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_129e99e426b171f1d267f1a7ce127105526b81191002981bd40faad0f21fcc61","typeString":"literal_string \"SqudyCampaignManager: invalid admin address\""},"value":"SqudyCampaignManager: invalid admin address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_129e99e426b171f1d267f1a7ce127105526b81191002981bd40faad0f21fcc61","typeString":"literal_string \"SqudyCampaignManager: invalid admin address\""}],"id":2775,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12266:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12266:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2784,"nodeType":"ExpressionStatement","src":"12266:75:17"},{"expression":{"arguments":[{"id":2786,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"12362:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2787,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"12374:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2785,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"12351:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12351:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2789,"nodeType":"ExpressionStatement","src":"12351:29:17"},{"eventCall":{"arguments":[{"id":2791,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"12406:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2790,"name":"AdminAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"12395:10:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12395:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2793,"nodeType":"EmitStatement","src":"12390:22:17"}]},"documentation":{"id":2767,"nodeType":"StructuredDocumentation","src":"12140:40:17","text":" @dev Adds a new admin"},"functionSelector":"70480275","id":2795,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2772,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"12236:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2773,"kind":"modifierInvocation","modifierName":{"id":2771,"name":"onlyRole","nameLocations":["12227:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"12227:8:17"},"nodeType":"ModifierInvocation","src":"12227:28:17"}],"name":"addAdmin","nameLocation":"12194:8:17","nodeType":"FunctionDefinition","parameters":{"id":2770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2769,"mutability":"mutable","name":"admin","nameLocation":"12211:5:17","nodeType":"VariableDeclaration","scope":2795,"src":"12203:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2768,"name":"address","nodeType":"ElementaryTypeName","src":"12203:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12202:15:17"},"returnParameters":{"id":2774,"nodeType":"ParameterList","parameters":[],"src":"12256:0:17"},"scope":3657,"src":"12185:234:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2821,"nodeType":"Block","src":"12548:163:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2805,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"12566:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2806,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12575:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12579:6:17","memberName":"sender","nodeType":"MemberAccess","src":"12575:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12566:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616e6e6f742072656d6f76652073656c66","id":2809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"12587:42:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_a1a0f173bfdad6cb51fd26cb4ae867fe8fc78eb3a70ce6e0009a9845813818a3","typeString":"literal_string \"SqudyCampaignManager: cannot remove self\""},"value":"SqudyCampaignManager: cannot remove self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a1a0f173bfdad6cb51fd26cb4ae867fe8fc78eb3a70ce6e0009a9845813818a3","typeString":"literal_string \"SqudyCampaignManager: cannot remove self\""}],"id":2804,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12558:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12558:72:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2811,"nodeType":"ExpressionStatement","src":"12558:72:17"},{"expression":{"arguments":[{"id":2813,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"12652:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2814,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"12664:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2812,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"12640:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) returns (bool)"}},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12640:30:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2816,"nodeType":"ExpressionStatement","src":"12640:30:17"},{"eventCall":{"arguments":[{"id":2818,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2798,"src":"12698:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2817,"name":"AdminRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2139,"src":"12685:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12685:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2820,"nodeType":"EmitStatement","src":"12680:24:17"}]},"documentation":{"id":2796,"nodeType":"StructuredDocumentation","src":"12429:40:17","text":" @dev Removes an admin"},"functionSelector":"1785f53c","id":2822,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":2801,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":184,"src":"12528:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2802,"kind":"modifierInvocation","modifierName":{"id":2800,"name":"onlyRole","nameLocations":["12519:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":195,"src":"12519:8:17"},"nodeType":"ModifierInvocation","src":"12519:28:17"}],"name":"removeAdmin","nameLocation":"12483:11:17","nodeType":"FunctionDefinition","parameters":{"id":2799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2798,"mutability":"mutable","name":"admin","nameLocation":"12503:5:17","nodeType":"VariableDeclaration","scope":2822,"src":"12495:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2797,"name":"address","nodeType":"ElementaryTypeName","src":"12495:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12494:15:17"},"returnParameters":{"id":2803,"nodeType":"ParameterList","parameters":[],"src":"12548:0:17"},"scope":3657,"src":"12474:237:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2986,"nodeType":"Block","src":"13155:1616:17","statements":[{"assignments":[2840],"declarations":[{"constant":false,"id":2840,"mutability":"mutable","name":"campaign","nameLocation":"13182:8:17","nodeType":"VariableDeclaration","scope":2986,"src":"13165:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":2839,"nodeType":"UserDefinedTypeName","pathNode":{"id":2838,"name":"Campaign","nameLocations":["13165:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"13165:8:17"},"referencedDeclaration":2049,"src":"13165:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":2844,"initialValue":{"baseExpression":{"id":2841,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"13193:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":2843,"indexExpression":{"id":2842,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"13203:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13193:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13165:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2846,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"13232:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13241:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13232:10:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20616d6f756e74206d7573742062652067726561746572207468616e2030","id":2849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13244:53:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_e01699d5a61709b609d7d5dfc4ef0487617243e66a6997622b67261dddf17695","typeString":"literal_string \"SqudyCampaignManager: amount must be greater than 0\""},"value":"SqudyCampaignManager: amount must be greater than 0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e01699d5a61709b609d7d5dfc4ef0487617243e66a6997622b67261dddf17695","typeString":"literal_string \"SqudyCampaignManager: amount must be greater than 0\""}],"id":2845,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13224:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2850,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13224:74:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2851,"nodeType":"ExpressionStatement","src":"13224:74:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2853,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"13316:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":2854,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"13325:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2855,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13334:12:17","memberName":"ticketAmount","nodeType":"MemberAccess","referencedDeclaration":2021,"src":"13325:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13316:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13350:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13316:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20616d6f756e74206d757374206265206d756c7469706c65206f66207469636b657420616d6f756e74","id":2859,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13370:64:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_00b1826d6dec5f1884d79278ae375128d7aa394a06714ede6d80d97addd248e2","typeString":"literal_string \"SqudyCampaignManager: amount must be multiple of ticket amount\""},"value":"SqudyCampaignManager: amount must be multiple of ticket amount"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_00b1826d6dec5f1884d79278ae375128d7aa394a06714ede6d80d97addd248e2","typeString":"literal_string \"SqudyCampaignManager: amount must be multiple of ticket amount\""}],"id":2852,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13308:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13308:127:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2861,"nodeType":"ExpressionStatement","src":"13308:127:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2863,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"13453:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13462:13:17","memberName":"currentAmount","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"13453:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2865,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"13478:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13453:31:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2867,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"13488:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2868,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13497:7:17","memberName":"hardCap","nodeType":"MemberAccess","referencedDeclaration":2019,"src":"13488:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13453:51:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20776f756c6420657863656564206861726420636170","id":2870,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13523:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_53b0960f755e90ea2b2fe7aec60bdd029bed2c5676837302150789e3228fcebf","typeString":"literal_string \"SqudyCampaignManager: would exceed hard cap\""},"value":"SqudyCampaignManager: would exceed hard cap"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53b0960f755e90ea2b2fe7aec60bdd029bed2c5676837302150789e3228fcebf","typeString":"literal_string \"SqudyCampaignManager: would exceed hard cap\""}],"id":2862,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13445:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13445:124:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2872,"nodeType":"ExpressionStatement","src":"13445:124:17"},{"assignments":[2875],"declarations":[{"constant":false,"id":2875,"mutability":"mutable","name":"participant","nameLocation":"13654:11:17","nodeType":"VariableDeclaration","scope":2986,"src":"13634:31:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"},"typeName":{"id":2874,"nodeType":"UserDefinedTypeName","pathNode":{"id":2873,"name":"Participant","nameLocations":["13634:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2062,"src":"13634:11:17"},"referencedDeclaration":2062,"src":"13634:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"}},"visibility":"internal"}],"id":2882,"initialValue":{"baseExpression":{"baseExpression":{"id":2876,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"13668:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":2878,"indexExpression":{"id":2877,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"13681:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13668:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":2881,"indexExpression":{"expression":{"id":2879,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13693:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13697:6:17","memberName":"sender","nodeType":"MemberAccess","src":"13693:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13668:36:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13634:70:17"},{"assignments":[2884],"declarations":[{"constant":false,"id":2884,"mutability":"mutable","name":"ticketCount","nameLocation":"13722:11:17","nodeType":"VariableDeclaration","scope":2986,"src":"13714:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"13714:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2889,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2885,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"13736:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"expression":{"id":2886,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"13745:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2887,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13754:12:17","memberName":"ticketAmount","nodeType":"MemberAccess","referencedDeclaration":2021,"src":"13745:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13736:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13714:52:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2890,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"13789:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":2891,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13801:12:17","memberName":"stakedAmount","nodeType":"MemberAccess","referencedDeclaration":2051,"src":"13789:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13817:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13789:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2949,"nodeType":"Block","src":"14219:171:17","statements":[{"expression":{"id":2941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2937,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"14293:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":2939,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14305:12:17","memberName":"stakedAmount","nodeType":"MemberAccess","referencedDeclaration":2051,"src":"14293:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2940,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"14321:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14293:34:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2942,"nodeType":"ExpressionStatement","src":"14293:34:17"},{"expression":{"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2943,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"14341:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":2945,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14353:11:17","memberName":"ticketCount","nodeType":"MemberAccess","referencedDeclaration":2053,"src":"14341:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2946,"name":"ticketCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"14368:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14341:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2948,"nodeType":"ExpressionStatement","src":"14341:38:17"}]},"id":2950,"nodeType":"IfStatement","src":"13785:605:17","trueBody":{"id":2936,"nodeType":"Block","src":"13820:393:17","statements":[{"expression":{"id":2898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2894,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"13865:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":2896,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13877:12:17","memberName":"stakedAmount","nodeType":"MemberAccess","referencedDeclaration":2051,"src":"13865:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2897,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"13892:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13865:33:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2899,"nodeType":"ExpressionStatement","src":"13865:33:17"},{"expression":{"id":2904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2900,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"13912:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":2902,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13924:11:17","memberName":"ticketCount","nodeType":"MemberAccess","referencedDeclaration":2053,"src":"13912:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2903,"name":"ticketCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"13938:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13912:37:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2905,"nodeType":"ExpressionStatement","src":"13912:37:17"},{"expression":{"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2906,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"13963:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":2908,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13975:8:17","memberName":"joinedAt","nodeType":"MemberAccess","referencedDeclaration":2061,"src":"13963:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2909,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13986:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13992:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"13986:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13963:38:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2912,"nodeType":"ExpressionStatement","src":"13963:38:17"},{"expression":{"arguments":[{"expression":{"id":2917,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14066:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14070:6:17","memberName":"sender","nodeType":"MemberAccess","src":"14066:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"baseExpression":{"id":2913,"name":"campaignParticipants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"14028:20:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint256 => address[] storage ref)"}},"id":2915,"indexExpression":{"id":2914,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"14049:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14028:32:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14061:4:17","memberName":"push","nodeType":"MemberAccess","src":"14028:37:17","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":2919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14028:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2920,"nodeType":"ExpressionStatement","src":"14028:49:17"},{"expression":{"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2921,"name":"participantIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"14091:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":2925,"indexExpression":{"id":2922,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"14110:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14091:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2926,"indexExpression":{"expression":{"id":2923,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"14122:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2924,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14131:16:17","memberName":"participantCount","nodeType":"MemberAccess","referencedDeclaration":2029,"src":"14122:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14091:57:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2927,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14151:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14155:6:17","memberName":"sender","nodeType":"MemberAccess","src":"14151:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14091:70:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2930,"nodeType":"ExpressionStatement","src":"14091:70:17"},{"expression":{"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14175:27:17","subExpression":{"expression":{"id":2931,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"14175:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2933,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14184:16:17","memberName":"participantCount","nodeType":"MemberAccess","referencedDeclaration":2029,"src":"14175:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2935,"nodeType":"ExpressionStatement","src":"14175:27:17"}]}},{"expression":{"id":2955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2951,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"14408:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2953,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14417:13:17","memberName":"currentAmount","nodeType":"MemberAccess","referencedDeclaration":2023,"src":"14408:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2954,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"14434:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14408:32:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2956,"nodeType":"ExpressionStatement","src":"14408:32:17"},{"expression":{"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2957,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"14450:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":2959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14459:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"14450:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":2960,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"14471:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14477:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"14471:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14450:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2963,"nodeType":"ExpressionStatement","src":"14450:36:17"},{"expression":{"arguments":[{"arguments":[{"expression":{"id":2967,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14586:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14590:6:17","memberName":"sender","nodeType":"MemberAccess","src":"14586:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2971,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14606:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SqudyCampaignManager_$3657","typeString":"contract SqudyCampaignManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SqudyCampaignManager_$3657","typeString":"contract SqudyCampaignManager"}],"id":2970,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14598:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2969,"name":"address","nodeType":"ElementaryTypeName","src":"14598:7:17","typeDescriptions":{}}},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14598:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2973,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"14613:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2965,"name":"squdyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"14562:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}},"id":2966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14573:12:17","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1803,"src":"14562:23:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":2974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14562:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20746f6b656e207472616e73666572206661696c6564","id":2975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14639:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1c20c86ed775db9c8ce2cf3d64dd61b4a8821f18193bbb2537afb3d00f182ce8","typeString":"literal_string \"SqudyCampaignManager: token transfer failed\""},"value":"SqudyCampaignManager: token transfer failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1c20c86ed775db9c8ce2cf3d64dd61b4a8821f18193bbb2537afb3d00f182ce8","typeString":"literal_string \"SqudyCampaignManager: token transfer failed\""}],"id":2964,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"14554:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14554:131:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2977,"nodeType":"ExpressionStatement","src":"14554:131:17"},{"eventCall":{"arguments":[{"id":2979,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"14720:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2980,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14732:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14736:6:17","memberName":"sender","nodeType":"MemberAccess","src":"14732:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2982,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2827,"src":"14744:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2983,"name":"ticketCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"14752:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2978,"name":"UserStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"14709:10:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,address,uint256,uint256)"}},"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14709:55:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2985,"nodeType":"EmitStatement","src":"14704:60:17"}]},"documentation":{"id":2823,"nodeType":"StructuredDocumentation","src":"12770:207:17","text":" @dev Allows users to stake SQUDY tokens in a campaign\n @param campaignId The campaign ID to stake in\n @param amount Amount of tokens to stake (must be multiple of ticketAmount)"},"functionSelector":"f8ec73d1","id":2987,"implemented":true,"kind":"function","modifiers":[{"id":2830,"kind":"modifierInvocation","modifierName":{"id":2829,"name":"nonReentrant","nameLocations":["13065:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1654,"src":"13065:12:17"},"nodeType":"ModifierInvocation","src":"13065:12:17"},{"arguments":[{"id":2832,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"13102:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2833,"kind":"modifierInvocation","modifierName":{"id":2831,"name":"campaignExists","nameLocations":["13087:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"13087:14:17"},"nodeType":"ModifierInvocation","src":"13087:26:17"},{"arguments":[{"id":2835,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2825,"src":"13138:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2836,"kind":"modifierInvocation","modifierName":{"id":2834,"name":"campaignActive","nameLocations":["13123:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2204,"src":"13123:14:17"},"nodeType":"ModifierInvocation","src":"13123:26:17"}],"name":"stakeSQUDY","nameLocation":"12991:10:17","nodeType":"FunctionDefinition","parameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2825,"mutability":"mutable","name":"campaignId","nameLocation":"13010:10:17","nodeType":"VariableDeclaration","scope":2987,"src":"13002:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2824,"name":"uint256","nodeType":"ElementaryTypeName","src":"13002:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2827,"mutability":"mutable","name":"amount","nameLocation":"13030:6:17","nodeType":"VariableDeclaration","scope":2987,"src":"13022:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2826,"name":"uint256","nodeType":"ElementaryTypeName","src":"13022:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13001:36:17"},"returnParameters":{"id":2837,"nodeType":"ParameterList","parameters":[],"src":"13155:0:17"},"scope":3657,"src":"12982:1789:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3037,"nodeType":"Block","src":"15078:417:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"baseExpression":{"id":3001,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"15096:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3003,"indexExpression":{"id":3002,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"15109:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15096:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3005,"indexExpression":{"id":3004,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"15121:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15096:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"id":3006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15127:12:17","memberName":"stakedAmount","nodeType":"MemberAccess","referencedDeclaration":2051,"src":"15096:43:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15142:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15096:47:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2075736572206e6f742070617274696369706174696e67","id":3009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15162:46:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9ae0ae59d348ca9b332772ec967c3fb0780490c0796a23f01fbcf7e535a64ac4","typeString":"literal_string \"SqudyCampaignManager: user not participating\""},"value":"SqudyCampaignManager: user not participating"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9ae0ae59d348ca9b332772ec967c3fb0780490c0796a23f01fbcf7e535a64ac4","typeString":"literal_string \"SqudyCampaignManager: user not participating\""}],"id":3000,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15088:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15088:121:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3011,"nodeType":"ExpressionStatement","src":"15088:121:17"},{"expression":{"arguments":[{"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15227:50:17","subExpression":{"expression":{"baseExpression":{"baseExpression":{"id":3013,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"15228:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3015,"indexExpression":{"id":3014,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"15241:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15228:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3017,"indexExpression":{"id":3016,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"15253:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15228:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"id":3018,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15259:18:17","memberName":"hasCompletedSocial","nodeType":"MemberAccess","referencedDeclaration":2055,"src":"15228:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20736f6369616c207461736b7320616c726561647920636f6d706c65746564","id":3020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"15296:54:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_d46a9fdc52e3063083c47f70fed88d6a82796bcc1513b66b48ff84d9d5f0fb29","typeString":"literal_string \"SqudyCampaignManager: social tasks already completed\""},"value":"SqudyCampaignManager: social tasks already completed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d46a9fdc52e3063083c47f70fed88d6a82796bcc1513b66b48ff84d9d5f0fb29","typeString":"literal_string \"SqudyCampaignManager: social tasks already completed\""}],"id":3012,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"15219:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15219:132:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3022,"nodeType":"ExpressionStatement","src":"15219:132:17"},{"expression":{"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":3023,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"15370:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3026,"indexExpression":{"id":3024,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"15383:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15370:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3027,"indexExpression":{"id":3025,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"15395:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15370:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"id":3028,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"15401:18:17","memberName":"hasCompletedSocial","nodeType":"MemberAccess","referencedDeclaration":2055,"src":"15370:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"15422:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"15370:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3031,"nodeType":"ExpressionStatement","src":"15370:56:17"},{"eventCall":{"arguments":[{"id":3033,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"15471:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3034,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2992,"src":"15483:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3032,"name":"SocialTasksCompleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"15450:20:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_address_$returns$__$","typeString":"function (uint256,address)"}},"id":3035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15450:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3036,"nodeType":"EmitStatement","src":"15445:43:17"}]},"documentation":{"id":2988,"nodeType":"StructuredDocumentation","src":"14781:149:17","text":" @dev Marks social media tasks as completed for a user\n @param campaignId The campaign ID\n @param user The user address"},"functionSelector":"b5801d91","id":3038,"implemented":true,"kind":"function","modifiers":[{"id":2995,"kind":"modifierInvocation","modifierName":{"id":2994,"name":"onlyOperator","nameLocations":["15024:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":2171,"src":"15024:12:17"},"nodeType":"ModifierInvocation","src":"15024:12:17"},{"arguments":[{"id":2997,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2990,"src":"15061:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2998,"kind":"modifierInvocation","modifierName":{"id":2996,"name":"campaignExists","nameLocations":["15046:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"15046:14:17"},"nodeType":"ModifierInvocation","src":"15046:26:17"}],"name":"confirmSocialTasks","nameLocation":"14944:18:17","nodeType":"FunctionDefinition","parameters":{"id":2993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2990,"mutability":"mutable","name":"campaignId","nameLocation":"14971:10:17","nodeType":"VariableDeclaration","scope":3038,"src":"14963:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2989,"name":"uint256","nodeType":"ElementaryTypeName","src":"14963:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2992,"mutability":"mutable","name":"user","nameLocation":"14991:4:17","nodeType":"VariableDeclaration","scope":3038,"src":"14983:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2991,"name":"address","nodeType":"ElementaryTypeName","src":"14983:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14962:34:17"},"returnParameters":{"id":2999,"nodeType":"ParameterList","parameters":[],"src":"15078:0:17"},"scope":3657,"src":"14935:560:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3058,"nodeType":"Block","src":"15738:66:17","statements":[{"expression":{"expression":{"baseExpression":{"baseExpression":{"id":3051,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"15755:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3053,"indexExpression":{"id":3052,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"15768:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15755:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3055,"indexExpression":{"id":3054,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3043,"src":"15780:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15755:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"id":3056,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15786:11:17","memberName":"ticketCount","nodeType":"MemberAccess","referencedDeclaration":2053,"src":"15755:42:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3050,"id":3057,"nodeType":"Return","src":"15748:49:17"}]},"documentation":{"id":3039,"nodeType":"StructuredDocumentation","src":"15505:70:17","text":" @dev Gets the ticket count for a user in a campaign"},"functionSelector":"6a14dffd","id":3059,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3046,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3041,"src":"15694:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3047,"kind":"modifierInvocation","modifierName":{"id":3045,"name":"campaignExists","nameLocations":["15679:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"15679:14:17"},"nodeType":"ModifierInvocation","src":"15679:26:17"}],"name":"getTicketCount","nameLocation":"15589:14:17","nodeType":"FunctionDefinition","parameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"campaignId","nameLocation":"15612:10:17","nodeType":"VariableDeclaration","scope":3059,"src":"15604:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3040,"name":"uint256","nodeType":"ElementaryTypeName","src":"15604:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3043,"mutability":"mutable","name":"user","nameLocation":"15632:4:17","nodeType":"VariableDeclaration","scope":3059,"src":"15624:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3042,"name":"address","nodeType":"ElementaryTypeName","src":"15624:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15603:34:17"},"returnParameters":{"id":3050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3049,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3059,"src":"15724:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3048,"name":"uint256","nodeType":"ElementaryTypeName","src":"15724:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15723:9:17"},"scope":3657,"src":"15580:224:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3089,"nodeType":"Block","src":"16073:160:17","statements":[{"assignments":[3074],"declarations":[{"constant":false,"id":3074,"mutability":"mutable","name":"participant","nameLocation":"16103:11:17","nodeType":"VariableDeclaration","scope":3089,"src":"16083:31:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"},"typeName":{"id":3073,"nodeType":"UserDefinedTypeName","pathNode":{"id":3072,"name":"Participant","nameLocations":["16083:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2062,"src":"16083:11:17"},"referencedDeclaration":2062,"src":"16083:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"}},"visibility":"internal"}],"id":3080,"initialValue":{"baseExpression":{"baseExpression":{"id":3075,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"16117:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3077,"indexExpression":{"id":3076,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"16130:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16117:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3079,"indexExpression":{"id":3078,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3064,"src":"16142:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16117:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"nodeType":"VariableDeclarationStatement","src":"16083:64:17"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3081,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"16164:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":3082,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16176:12:17","memberName":"stakedAmount","nodeType":"MemberAccess","referencedDeclaration":2051,"src":"16164:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16191:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16164:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"expression":{"id":3085,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"16196:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":3086,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16208:18:17","memberName":"hasCompletedSocial","nodeType":"MemberAccess","referencedDeclaration":2055,"src":"16196:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"16164:62:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3071,"id":3088,"nodeType":"Return","src":"16157:69:17"}]},"documentation":{"id":3060,"nodeType":"StructuredDocumentation","src":"15814:93:17","text":" @dev Checks if a user is eligible for winning (has completed social tasks)"},"functionSelector":"da8125fb","id":3090,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3067,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3062,"src":"16032:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3068,"kind":"modifierInvocation","modifierName":{"id":3066,"name":"campaignExists","nameLocations":["16017:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"16017:14:17"},"nodeType":"ModifierInvocation","src":"16017:26:17"}],"name":"isEligibleForWinning","nameLocation":"15921:20:17","nodeType":"FunctionDefinition","parameters":{"id":3065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3062,"mutability":"mutable","name":"campaignId","nameLocation":"15950:10:17","nodeType":"VariableDeclaration","scope":3090,"src":"15942:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3061,"name":"uint256","nodeType":"ElementaryTypeName","src":"15942:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3064,"mutability":"mutable","name":"user","nameLocation":"15970:4:17","nodeType":"VariableDeclaration","scope":3090,"src":"15962:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3063,"name":"address","nodeType":"ElementaryTypeName","src":"15962:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15941:34:17"},"returnParameters":{"id":3071,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3070,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3090,"src":"16062:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3069,"name":"bool","nodeType":"ElementaryTypeName","src":"16062:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16061:6:17"},"scope":3657,"src":"15912:321:17","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[126],"body":{"id":3170,"nodeType":"Block","src":"16503:707:17","statements":[{"assignments":[3101],"declarations":[{"constant":false,"id":3101,"mutability":"mutable","name":"campaignId","nameLocation":"16521:10:17","nodeType":"VariableDeclaration","scope":3170,"src":"16513:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3100,"name":"uint256","nodeType":"ElementaryTypeName","src":"16513:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3105,"initialValue":{"baseExpression":{"id":3102,"name":"vrfRequests","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"16534:11:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3104,"indexExpression":{"id":3103,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"16546:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16534:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16513:43:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3107,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"16574:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16588:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16574:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a20696e76616c69642072657175657374204944","id":3110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16591:42:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_4a34c9e6837c08d7b6c6fe47a0202d5e72b656aa59732ae1aaeb6a6118bedba4","typeString":"literal_string \"SqudyCampaignManager: invalid request ID\""},"value":"SqudyCampaignManager: invalid request ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4a34c9e6837c08d7b6c6fe47a0202d5e72b656aa59732ae1aaeb6a6118bedba4","typeString":"literal_string \"SqudyCampaignManager: invalid request ID\""}],"id":3106,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16566:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16566:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3112,"nodeType":"ExpressionStatement","src":"16566:68:17"},{"assignments":[3115],"declarations":[{"constant":false,"id":3115,"mutability":"mutable","name":"campaign","nameLocation":"16670:8:17","nodeType":"VariableDeclaration","scope":3170,"src":"16653:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":3114,"nodeType":"UserDefinedTypeName","pathNode":{"id":3113,"name":"Campaign","nameLocations":["16653:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"16653:8:17"},"referencedDeclaration":2049,"src":"16653:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":3119,"initialValue":{"baseExpression":{"id":3116,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"16681:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":3118,"indexExpression":{"id":3117,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"16691:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16681:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"16653:49:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3121,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"16720:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3122,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16729:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"16720:15:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3123,"name":"CampaignStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"16739:14:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_CampaignStatus_$2068_$","typeString":"type(enum SqudyCampaignManager.CampaignStatus)"}},"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"16754:8:17","memberName":"FINISHED","nodeType":"MemberAccess","referencedDeclaration":2066,"src":"16739:23:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"16720:42:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616d706169676e206e6f742066696e6973686564","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"16781:45:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ba04815cf56e76948b9af1817f71059c5c68aa93afd5aaf3d8a024864795addf","typeString":"literal_string \"SqudyCampaignManager: campaign not finished\""},"value":"SqudyCampaignManager: campaign not finished"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ba04815cf56e76948b9af1817f71059c5c68aa93afd5aaf3d8a024864795addf","typeString":"literal_string \"SqudyCampaignManager: campaign not finished\""}],"id":3120,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"16712:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16712:115:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3128,"nodeType":"ExpressionStatement","src":"16712:115:17"},{"assignments":[3133],"declarations":[{"constant":false,"id":3133,"mutability":"mutable","name":"winners","nameLocation":"16931:7:17","nodeType":"VariableDeclaration","scope":3170,"src":"16914:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3131,"name":"address","nodeType":"ElementaryTypeName","src":"16914:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3132,"nodeType":"ArrayTypeName","src":"16914:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3138,"initialValue":{"arguments":[{"id":3135,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"16956:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3136,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"16968:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":3134,"name":"_selectWinners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3362,"src":"16941:14:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256,uint256[] memory) returns (address[] memory)"}},"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16941:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"16914:66:17"},{"expression":{"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3139,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"16990:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3141,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16999:7:17","memberName":"winners","nodeType":"MemberAccess","referencedDeclaration":2035,"src":"16990:16:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3142,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"17009:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"src":"16990:26:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":3144,"nodeType":"ExpressionStatement","src":"16990:26:17"},{"expression":{"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3145,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"17026:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"17035:21:17","memberName":"winnerSelectionTxHash","nodeType":"MemberAccess","referencedDeclaration":2044,"src":"17026:30:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3150,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"17067:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3149,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17059:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17059:7:17","typeDescriptions":{}}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17059:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"17026:51:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3153,"nodeType":"ExpressionStatement","src":"17026:51:17"},{"expression":{"id":3159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3154,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3115,"src":"17087:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3156,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"17096:9:17","memberName":"updatedAt","nodeType":"MemberAccess","referencedDeclaration":2048,"src":"17087:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3157,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"17108:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17114:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"17108:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17087:36:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3160,"nodeType":"ExpressionStatement","src":"17087:36:17"},{"eventCall":{"arguments":[{"id":3162,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"17163:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3163,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"17175:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"arguments":[{"id":3166,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3093,"src":"17192:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3165,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"17184:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3164,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17184:7:17","typeDescriptions":{}}},"id":3167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17184:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3161,"name":"WinnersSelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"17147:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$_t_bytes32_$returns$__$","typeString":"function (uint256,address[] memory,bytes32)"}},"id":3168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17147:56:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3169,"nodeType":"EmitStatement","src":"17142:61:17"}]},"documentation":{"id":3091,"nodeType":"StructuredDocumentation","src":"16290:90:17","text":" @dev Callback function used by VRF Coordinator to return random numbers"},"id":3171,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"16394:18:17","nodeType":"FunctionDefinition","overrides":{"id":3098,"nodeType":"OverrideSpecifier","overrides":[],"src":"16489:8:17"},"parameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3093,"mutability":"mutable","name":"requestId","nameLocation":"16421:9:17","nodeType":"VariableDeclaration","scope":3171,"src":"16413:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3092,"name":"uint256","nodeType":"ElementaryTypeName","src":"16413:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"randomWords","nameLocation":"16449:11:17","nodeType":"VariableDeclaration","scope":3171,"src":"16432:28:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3094,"name":"uint256","nodeType":"ElementaryTypeName","src":"16432:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ArrayTypeName","src":"16432:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16412:49:17"},"returnParameters":{"id":3099,"nodeType":"ParameterList","parameters":[],"src":"16503:0:17"},"scope":3657,"src":"16385:825:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3361,"nodeType":"Block","src":"17440:1812:17","statements":[{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"campaign","nameLocation":"17467:8:17","nodeType":"VariableDeclaration","scope":3361,"src":"17450:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":3184,"nodeType":"UserDefinedTypeName","pathNode":{"id":3183,"name":"Campaign","nameLocations":["17450:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"17450:8:17"},"referencedDeclaration":2049,"src":"17450:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":3189,"initialValue":{"baseExpression":{"id":3186,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"17478:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":3188,"indexExpression":{"id":3187,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"17488:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17478:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17450:49:17"},{"assignments":[3191],"declarations":[{"constant":false,"id":3191,"mutability":"mutable","name":"totalTickets","nameLocation":"17517:12:17","nodeType":"VariableDeclaration","scope":3361,"src":"17509:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3190,"name":"uint256","nodeType":"ElementaryTypeName","src":"17509:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3193,"initialValue":{"hexValue":"30","id":3192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17532:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17509:24:17"},{"assignments":[3195],"declarations":[{"constant":false,"id":3195,"mutability":"mutable","name":"eligibleParticipants","nameLocation":"17551:20:17","nodeType":"VariableDeclaration","scope":3361,"src":"17543:28:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3194,"name":"uint256","nodeType":"ElementaryTypeName","src":"17543:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3197,"initialValue":{"hexValue":"30","id":3196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17574:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17543:32:17"},{"body":{"id":3238,"nodeType":"Block","src":"17707:296:17","statements":[{"assignments":[3210],"declarations":[{"constant":false,"id":3210,"mutability":"mutable","name":"participant","nameLocation":"17729:11:17","nodeType":"VariableDeclaration","scope":3238,"src":"17721:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3209,"name":"address","nodeType":"ElementaryTypeName","src":"17721:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3216,"initialValue":{"baseExpression":{"baseExpression":{"id":3211,"name":"participantIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"17743:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":3213,"indexExpression":{"id":3212,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"17762:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17743:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3215,"indexExpression":{"id":3214,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"17774:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17743:33:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"17721:55:17"},{"assignments":[3219],"declarations":[{"constant":false,"id":3219,"mutability":"mutable","name":"p","nameLocation":"17810:1:17","nodeType":"VariableDeclaration","scope":3238,"src":"17790:21:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"},"typeName":{"id":3218,"nodeType":"UserDefinedTypeName","pathNode":{"id":3217,"name":"Participant","nameLocations":["17790:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2062,"src":"17790:11:17"},"referencedDeclaration":2062,"src":"17790:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"}},"visibility":"internal"}],"id":3225,"initialValue":{"baseExpression":{"baseExpression":{"id":3220,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"17814:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3222,"indexExpression":{"id":3221,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"17827:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17814:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3224,"indexExpression":{"id":3223,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"17839:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17814:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"nodeType":"VariableDeclarationStatement","src":"17790:61:17"},{"condition":{"expression":{"id":3226,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"17869:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":3227,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17871:18:17","memberName":"hasCompletedSocial","nodeType":"MemberAccess","referencedDeclaration":2055,"src":"17869:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3237,"nodeType":"IfStatement","src":"17865:128:17","trueBody":{"id":3236,"nodeType":"Block","src":"17891:102:17","statements":[{"expression":{"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3228,"name":"totalTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"17909:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":3229,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"17925:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":3230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17927:11:17","memberName":"ticketCount","nodeType":"MemberAccess","referencedDeclaration":2053,"src":"17925:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17909:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3232,"nodeType":"ExpressionStatement","src":"17909:29:17"},{"expression":{"id":3234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17956:22:17","subExpression":{"id":3233,"name":"eligibleParticipants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"17956:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3235,"nodeType":"ExpressionStatement","src":"17956:22:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3202,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"17671:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3203,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"17675:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17684:16:17","memberName":"participantCount","nodeType":"MemberAccess","referencedDeclaration":2029,"src":"17675:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17671:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3239,"initializationExpression":{"assignments":[3199],"declarations":[{"constant":false,"id":3199,"mutability":"mutable","name":"i","nameLocation":"17664:1:17","nodeType":"VariableDeclaration","scope":3239,"src":"17656:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3198,"name":"uint256","nodeType":"ElementaryTypeName","src":"17656:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3201,"initialValue":{"hexValue":"30","id":3200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17668:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"17656:13:17"},"loopExpression":{"expression":{"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"17702:3:17","subExpression":{"id":3206,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3199,"src":"17702:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3208,"nodeType":"ExpressionStatement","src":"17702:3:17"},"nodeType":"ForStatement","src":"17651:352:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3241,"name":"totalTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"18029:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18044:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"18029:16:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206e6f20656c696769626c65207061727469636970616e7473","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"18047:48:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_be9d69d75a209e8e52f5c8425e891caacda16a61b2ff81ba79692953f06f7c26","typeString":"literal_string \"SqudyCampaignManager: no eligible participants\""},"value":"SqudyCampaignManager: no eligible participants"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_be9d69d75a209e8e52f5c8425e891caacda16a61b2ff81ba79692953f06f7c26","typeString":"literal_string \"SqudyCampaignManager: no eligible participants\""}],"id":3240,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"18021:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18021:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3246,"nodeType":"ExpressionStatement","src":"18021:75:17"},{"assignments":[3248],"declarations":[{"constant":false,"id":3248,"mutability":"mutable","name":"winnerCount","nameLocation":"18170:11:17","nodeType":"VariableDeclaration","scope":3361,"src":"18162:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3247,"name":"uint256","nodeType":"ElementaryTypeName","src":"18162:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3252,"initialValue":{"expression":{"expression":{"id":3249,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"18184:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3250,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18193:6:17","memberName":"prizes","nodeType":"MemberAccess","referencedDeclaration":2032,"src":"18184:15:17","typeDescriptions":{"typeIdentifier":"t_array$_t_string_storage_$dyn_storage","typeString":"string storage ref[] storage ref"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18200:6:17","memberName":"length","nodeType":"MemberAccess","src":"18184:22:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18162:44:17"},{"assignments":[3257],"declarations":[{"constant":false,"id":3257,"mutability":"mutable","name":"winners","nameLocation":"18233:7:17","nodeType":"VariableDeclaration","scope":3361,"src":"18216:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3255,"name":"address","nodeType":"ElementaryTypeName","src":"18216:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3256,"nodeType":"ArrayTypeName","src":"18216:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":3263,"initialValue":{"arguments":[{"id":3261,"name":"winnerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"18257:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18243:13:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address[] memory)"},"typeName":{"baseType":{"id":3258,"name":"address","nodeType":"ElementaryTypeName","src":"18247:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3259,"nodeType":"ArrayTypeName","src":"18247:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}}},"id":3262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18243:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18216:53:17"},{"assignments":[3265],"declarations":[{"constant":false,"id":3265,"mutability":"mutable","name":"winnersSelected","nameLocation":"18287:15:17","nodeType":"VariableDeclaration","scope":3361,"src":"18279:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3264,"name":"uint256","nodeType":"ElementaryTypeName","src":"18279:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3267,"initialValue":{"hexValue":"30","id":3266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18305:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18279:27:17"},{"body":{"id":3357,"nodeType":"Block","src":"18407:806:17","statements":[{"assignments":[3284],"declarations":[{"constant":false,"id":3284,"mutability":"mutable","name":"randomTicket","nameLocation":"18429:12:17","nodeType":"VariableDeclaration","scope":3357,"src":"18421:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3283,"name":"uint256","nodeType":"ElementaryTypeName","src":"18421:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3290,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3285,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"18444:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3287,"indexExpression":{"id":3286,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"18456:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18444:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":3288,"name":"totalTickets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"18461:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18444:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18421:52:17"},{"assignments":[3292],"declarations":[{"constant":false,"id":3292,"mutability":"mutable","name":"selectedWinner","nameLocation":"18495:14:17","nodeType":"VariableDeclaration","scope":3357,"src":"18487:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3291,"name":"address","nodeType":"ElementaryTypeName","src":"18487:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3297,"initialValue":{"arguments":[{"id":3294,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"18532:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3295,"name":"randomTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3284,"src":"18544:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3293,"name":"_findWinnerByTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"18512:19:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_address_$","typeString":"function (uint256,uint256) view returns (address)"}},"id":3296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18512:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"18487:70:17"},{"assignments":[3299],"declarations":[{"constant":false,"id":3299,"mutability":"mutable","name":"alreadySelected","nameLocation":"18646:15:17","nodeType":"VariableDeclaration","scope":3357,"src":"18641:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3298,"name":"bool","nodeType":"ElementaryTypeName","src":"18641:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3301,"initialValue":{"hexValue":"66616c7365","id":3300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18664:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"18641:28:17"},{"body":{"id":3324,"nodeType":"Block","src":"18729:156:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3312,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"18751:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3314,"indexExpression":{"id":3313,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"18759:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18751:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3315,"name":"selectedWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"18765:14:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18751:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3323,"nodeType":"IfStatement","src":"18747:124:17","trueBody":{"id":3322,"nodeType":"Block","src":"18781:90:17","statements":[{"expression":{"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3317,"name":"alreadySelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"18803:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"18821:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"18803:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3320,"nodeType":"ExpressionStatement","src":"18803:22:17"},{"id":3321,"nodeType":"Break","src":"18847:5:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"18703:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3307,"name":"winnersSelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"18707:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18703:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3325,"initializationExpression":{"assignments":[3303],"declarations":[{"constant":false,"id":3303,"mutability":"mutable","name":"j","nameLocation":"18696:1:17","nodeType":"VariableDeclaration","scope":3325,"src":"18688:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3302,"name":"uint256","nodeType":"ElementaryTypeName","src":"18688:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3305,"initialValue":{"hexValue":"30","id":3304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18700:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18688:13:17"},"loopExpression":{"expression":{"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18724:3:17","subExpression":{"id":3309,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3303,"src":"18724:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3311,"nodeType":"ExpressionStatement","src":"18724:3:17"},"nodeType":"ForStatement","src":"18683:202:17"},{"condition":{"id":3327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"18915:16:17","subExpression":{"id":3326,"name":"alreadySelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"18916:15:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3356,"nodeType":"IfStatement","src":"18911:292:17","trueBody":{"id":3355,"nodeType":"Block","src":"18933:270:17","statements":[{"expression":{"id":3332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3328,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"18951:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3330,"indexExpression":{"id":3329,"name":"winnersSelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"18959:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18951:24:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3331,"name":"selectedWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"18978:14:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18951:41:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3333,"nodeType":"ExpressionStatement","src":"18951:41:17"},{"expression":{"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":3334,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"19010:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3337,"indexExpression":{"id":3335,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"19023:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19010:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3338,"indexExpression":{"id":3336,"name":"selectedWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"19035:14:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19010:40:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"id":3339,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19051:8:17","memberName":"isWinner","nodeType":"MemberAccess","referencedDeclaration":2057,"src":"19010:49:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3340,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"19062:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"19010:56:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3342,"nodeType":"ExpressionStatement","src":"19010:56:17"},{"expression":{"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"baseExpression":{"id":3343,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"19084:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3346,"indexExpression":{"id":3344,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3174,"src":"19097:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19084:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3347,"indexExpression":{"id":3345,"name":"selectedWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"19109:14:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19084:40:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"id":3348,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19125:10:17","memberName":"prizeIndex","nodeType":"MemberAccess","referencedDeclaration":2059,"src":"19084:51:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3349,"name":"winnersSelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"19138:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19084:69:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3351,"nodeType":"ExpressionStatement","src":"19084:69:17"},{"expression":{"id":3353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19171:17:17","subExpression":{"id":3352,"name":"winnersSelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"19171:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3354,"nodeType":"ExpressionStatement","src":"19171:17:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3272,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"18345:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3273,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3177,"src":"18349:11:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18361:6:17","memberName":"length","nodeType":"MemberAccess","src":"18349:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18345:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3276,"name":"winnersSelected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3265,"src":"18371:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3277,"name":"winnerCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3248,"src":"18389:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18371:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"18345:55:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3358,"initializationExpression":{"assignments":[3269],"declarations":[{"constant":false,"id":3269,"mutability":"mutable","name":"i","nameLocation":"18338:1:17","nodeType":"VariableDeclaration","scope":3358,"src":"18330:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3268,"name":"uint256","nodeType":"ElementaryTypeName","src":"18330:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3271,"initialValue":{"hexValue":"30","id":3270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18342:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18330:13:17"},"loopExpression":{"expression":{"id":3281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18402:3:17","subExpression":{"id":3280,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3269,"src":"18402:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3282,"nodeType":"ExpressionStatement","src":"18402:3:17"},"nodeType":"ForStatement","src":"18325:888:17"},{"expression":{"id":3359,"name":"winners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3257,"src":"19238:7:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"functionReturnParameters":3182,"id":3360,"nodeType":"Return","src":"19231:14:17"}]},"documentation":{"id":3172,"nodeType":"StructuredDocumentation","src":"17220:82:17","text":" @dev Internal function to select winners using weighted lottery"},"id":3362,"implemented":true,"kind":"function","modifiers":[],"name":"_selectWinners","nameLocation":"17316:14:17","nodeType":"FunctionDefinition","parameters":{"id":3178,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3174,"mutability":"mutable","name":"campaignId","nameLocation":"17339:10:17","nodeType":"VariableDeclaration","scope":3362,"src":"17331:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3173,"name":"uint256","nodeType":"ElementaryTypeName","src":"17331:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3177,"mutability":"mutable","name":"randomWords","nameLocation":"17368:11:17","nodeType":"VariableDeclaration","scope":3362,"src":"17351:28:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3175,"name":"uint256","nodeType":"ElementaryTypeName","src":"17351:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3176,"nodeType":"ArrayTypeName","src":"17351:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17330:50:17"},"returnParameters":{"id":3182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3362,"src":"17417:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3179,"name":"address","nodeType":"ElementaryTypeName","src":"17417:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3180,"nodeType":"ArrayTypeName","src":"17417:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"17416:18:17"},"scope":3657,"src":"17307:1945:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3435,"nodeType":"Block","src":"19475:681:17","statements":[{"assignments":[3374],"declarations":[{"constant":false,"id":3374,"mutability":"mutable","name":"campaign","nameLocation":"19502:8:17","nodeType":"VariableDeclaration","scope":3435,"src":"19485:25:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":3373,"nodeType":"UserDefinedTypeName","pathNode":{"id":3372,"name":"Campaign","nameLocations":["19485:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"19485:8:17"},"referencedDeclaration":2049,"src":"19485:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"id":3378,"initialValue":{"baseExpression":{"id":3375,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"19513:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":3377,"indexExpression":{"id":3376,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"19523:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19513:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19485:49:17"},{"assignments":[3380],"declarations":[{"constant":false,"id":3380,"mutability":"mutable","name":"currentTicket","nameLocation":"19552:13:17","nodeType":"VariableDeclaration","scope":3435,"src":"19544:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3379,"name":"uint256","nodeType":"ElementaryTypeName","src":"19544:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3382,"initialValue":{"hexValue":"30","id":3381,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19568:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19544:25:17"},{"body":{"id":3427,"nodeType":"Block","src":"19644:380:17","statements":[{"assignments":[3395],"declarations":[{"constant":false,"id":3395,"mutability":"mutable","name":"participant","nameLocation":"19666:11:17","nodeType":"VariableDeclaration","scope":3427,"src":"19658:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3394,"name":"address","nodeType":"ElementaryTypeName","src":"19658:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3401,"initialValue":{"baseExpression":{"baseExpression":{"id":3396,"name":"participantIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"19680:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":3398,"indexExpression":{"id":3397,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"19699:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19680:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3400,"indexExpression":{"id":3399,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"19711:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19680:33:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"19658:55:17"},{"assignments":[3404],"declarations":[{"constant":false,"id":3404,"mutability":"mutable","name":"p","nameLocation":"19747:1:17","nodeType":"VariableDeclaration","scope":3427,"src":"19727:21:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"},"typeName":{"id":3403,"nodeType":"UserDefinedTypeName","pathNode":{"id":3402,"name":"Participant","nameLocations":["19727:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2062,"src":"19727:11:17"},"referencedDeclaration":2062,"src":"19727:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"}},"visibility":"internal"}],"id":3410,"initialValue":{"baseExpression":{"baseExpression":{"id":3405,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"19751:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3407,"indexExpression":{"id":3406,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"19764:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19751:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3409,"indexExpression":{"id":3408,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3395,"src":"19776:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19751:37:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19727:61:17"},{"condition":{"expression":{"id":3411,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"19819:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":3412,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19821:18:17","memberName":"hasCompletedSocial","nodeType":"MemberAccess","referencedDeclaration":2055,"src":"19819:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3426,"nodeType":"IfStatement","src":"19815:199:17","trueBody":{"id":3425,"nodeType":"Block","src":"19841:173:17","statements":[{"expression":{"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3413,"name":"currentTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"19859:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":3414,"name":"p","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3404,"src":"19876:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant storage pointer"}},"id":3415,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19878:11:17","memberName":"ticketCount","nodeType":"MemberAccess","referencedDeclaration":2053,"src":"19876:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19859:30:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3417,"nodeType":"ExpressionStatement","src":"19859:30:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3418,"name":"targetTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3367,"src":"19911:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3419,"name":"currentTicket","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3380,"src":"19926:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19911:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3424,"nodeType":"IfStatement","src":"19907:93:17","trueBody":{"id":3423,"nodeType":"Block","src":"19941:59:17","statements":[{"expression":{"id":3421,"name":"participant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3395,"src":"19970:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3371,"id":3422,"nodeType":"Return","src":"19963:18:17"}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3387,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"19608:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3388,"name":"campaign","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3374,"src":"19612:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign storage pointer"}},"id":3389,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19621:16:17","memberName":"participantCount","nodeType":"MemberAccess","referencedDeclaration":2029,"src":"19612:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19608:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3428,"initializationExpression":{"assignments":[3384],"declarations":[{"constant":false,"id":3384,"mutability":"mutable","name":"i","nameLocation":"19601:1:17","nodeType":"VariableDeclaration","scope":3428,"src":"19593:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3383,"name":"uint256","nodeType":"ElementaryTypeName","src":"19593:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3386,"initialValue":{"hexValue":"30","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19605:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19593:13:17"},"loopExpression":{"expression":{"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19639:3:17","subExpression":{"id":3391,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3384,"src":"19639:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3393,"nodeType":"ExpressionStatement","src":"19639:3:17"},"nodeType":"ForStatement","src":"19588:436:17"},{"expression":{"baseExpression":{"baseExpression":{"id":3429,"name":"participantIndexes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"20116:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(uint256 => mapping(uint256 => address))"}},"id":3431,"indexExpression":{"id":3430,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3365,"src":"20135:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20116:30:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3433,"indexExpression":{"hexValue":"30","id":3432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20147:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20116:33:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3371,"id":3434,"nodeType":"Return","src":"20109:40:17"}]},"documentation":{"id":3363,"nodeType":"StructuredDocumentation","src":"19262:73:17","text":" @dev Internal function to find winner by ticket number"},"id":3436,"implemented":true,"kind":"function","modifiers":[],"name":"_findWinnerByTicket","nameLocation":"19349:19:17","nodeType":"FunctionDefinition","parameters":{"id":3368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3365,"mutability":"mutable","name":"campaignId","nameLocation":"19377:10:17","nodeType":"VariableDeclaration","scope":3436,"src":"19369:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3364,"name":"uint256","nodeType":"ElementaryTypeName","src":"19369:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3367,"mutability":"mutable","name":"targetTicket","nameLocation":"19397:12:17","nodeType":"VariableDeclaration","scope":3436,"src":"19389:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3366,"name":"uint256","nodeType":"ElementaryTypeName","src":"19389:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19368:42:17"},"returnParameters":{"id":3371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3370,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3436,"src":"19461:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3369,"name":"address","nodeType":"ElementaryTypeName","src":"19461:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"19460:9:17"},"scope":3657,"src":"19340:816:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3452,"nodeType":"Block","src":"20414:45:17","statements":[{"expression":{"baseExpression":{"id":3448,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"20431:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":3450,"indexExpression":{"id":3449,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"20441:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20431:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"functionReturnParameters":3447,"id":3451,"nodeType":"Return","src":"20424:28:17"}]},"documentation":{"id":3437,"nodeType":"StructuredDocumentation","src":"20215:45:17","text":" @dev Gets campaign details"},"functionSelector":"5598f8cc","id":3453,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3442,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3439,"src":"20362:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3443,"kind":"modifierInvocation","modifierName":{"id":3441,"name":"campaignExists","nameLocations":["20347:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"20347:14:17"},"nodeType":"ModifierInvocation","src":"20347:26:17"}],"name":"getCampaign","nameLocation":"20274:11:17","nodeType":"FunctionDefinition","parameters":{"id":3440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3439,"mutability":"mutable","name":"campaignId","nameLocation":"20294:10:17","nodeType":"VariableDeclaration","scope":3453,"src":"20286:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3438,"name":"uint256","nodeType":"ElementaryTypeName","src":"20286:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20285:20:17"},"returnParameters":{"id":3447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3453,"src":"20392:15:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_memory_ptr","typeString":"struct SqudyCampaignManager.Campaign"},"typeName":{"id":3445,"nodeType":"UserDefinedTypeName","pathNode":{"id":3444,"name":"Campaign","nameLocations":["20392:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":2049,"src":"20392:8:17"},"referencedDeclaration":2049,"src":"20392:8:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage_ptr","typeString":"struct SqudyCampaignManager.Campaign"}},"visibility":"internal"}],"src":"20391:17:17"},"scope":3657,"src":"20265:194:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3473,"nodeType":"Block","src":"20691:54:17","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":3467,"name":"participants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"20708:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$_$","typeString":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant storage ref))"}},"id":3469,"indexExpression":{"id":3468,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"20721:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20708:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_Participant_$2062_storage_$","typeString":"mapping(address => struct SqudyCampaignManager.Participant storage ref)"}},"id":3471,"indexExpression":{"id":3470,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3458,"src":"20733:4:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20708:30:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage","typeString":"struct SqudyCampaignManager.Participant storage ref"}},"functionReturnParameters":3466,"id":3472,"nodeType":"Return","src":"20701:37:17"}]},"documentation":{"id":3454,"nodeType":"StructuredDocumentation","src":"20469:48:17","text":" @dev Gets participant details"},"functionSelector":"35f3ad7a","id":3474,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3461,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3456,"src":"20636:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3462,"kind":"modifierInvocation","modifierName":{"id":3460,"name":"campaignExists","nameLocations":["20621:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"20621:14:17"},"nodeType":"ModifierInvocation","src":"20621:26:17"}],"name":"getParticipant","nameLocation":"20531:14:17","nodeType":"FunctionDefinition","parameters":{"id":3459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3456,"mutability":"mutable","name":"campaignId","nameLocation":"20554:10:17","nodeType":"VariableDeclaration","scope":3474,"src":"20546:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"20546:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3458,"mutability":"mutable","name":"user","nameLocation":"20574:4:17","nodeType":"VariableDeclaration","scope":3474,"src":"20566:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3457,"name":"address","nodeType":"ElementaryTypeName","src":"20566:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"20545:34:17"},"returnParameters":{"id":3466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3474,"src":"20666:18:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_memory_ptr","typeString":"struct SqudyCampaignManager.Participant"},"typeName":{"id":3464,"nodeType":"UserDefinedTypeName","pathNode":{"id":3463,"name":"Participant","nameLocations":["20666:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2062,"src":"20666:11:17"},"referencedDeclaration":2062,"src":"20666:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_Participant_$2062_storage_ptr","typeString":"struct SqudyCampaignManager.Participant"}},"visibility":"internal"}],"src":"20665:20:17"},"scope":3657,"src":"20522:223:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3490,"nodeType":"Block","src":"20982:56:17","statements":[{"expression":{"baseExpression":{"id":3486,"name":"campaignParticipants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"20999:20:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_array$_t_address_$dyn_storage_$","typeString":"mapping(uint256 => address[] storage ref)"}},"id":3488,"indexExpression":{"id":3487,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"21020:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20999:32:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"functionReturnParameters":3485,"id":3489,"nodeType":"Return","src":"20992:39:17"}]},"documentation":{"id":3475,"nodeType":"StructuredDocumentation","src":"20755:60:17","text":" @dev Gets all participants for a campaign"},"functionSelector":"8c6ab238","id":3491,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":3480,"name":"campaignId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"20929:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3481,"kind":"modifierInvocation","modifierName":{"id":3479,"name":"campaignExists","nameLocations":["20914:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2187,"src":"20914:14:17"},"nodeType":"ModifierInvocation","src":"20914:26:17"}],"name":"getCampaignParticipants","nameLocation":"20829:23:17","nodeType":"FunctionDefinition","parameters":{"id":3478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3477,"mutability":"mutable","name":"campaignId","nameLocation":"20861:10:17","nodeType":"VariableDeclaration","scope":3491,"src":"20853:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3476,"name":"uint256","nodeType":"ElementaryTypeName","src":"20853:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20852:20:17"},"returnParameters":{"id":3485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3491,"src":"20959:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3482,"name":"address","nodeType":"ElementaryTypeName","src":"20959:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3483,"nodeType":"ArrayTypeName","src":"20959:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"20958:18:17"},"scope":3657,"src":"20820:218:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3499,"nodeType":"Block","src":"21167:36:17","statements":[{"expression":{"id":3497,"name":"_campaignIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"21184:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3496,"id":3498,"nodeType":"Return","src":"21177:19:17"}]},"documentation":{"id":3492,"nodeType":"StructuredDocumentation","src":"21048:54:17","text":" @dev Gets total number of campaigns"},"functionSelector":"6caa9218","id":3500,"implemented":true,"kind":"function","modifiers":[],"name":"getCampaignCount","nameLocation":"21116:16:17","nodeType":"FunctionDefinition","parameters":{"id":3493,"nodeType":"ParameterList","parameters":[],"src":"21132:2:17"},"returnParameters":{"id":3496,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3500,"src":"21158:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3494,"name":"uint256","nodeType":"ElementaryTypeName","src":"21158:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21157:9:17"},"scope":3657,"src":"21107:96:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3587,"nodeType":"Block","src":"21392:682:17","statements":[{"assignments":[3511],"declarations":[{"constant":false,"id":3511,"mutability":"mutable","name":"count","nameLocation":"21410:5:17","nodeType":"VariableDeclaration","scope":3587,"src":"21402:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3510,"name":"uint256","nodeType":"ElementaryTypeName","src":"21402:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3513,"initialValue":{"hexValue":"30","id":3512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21418:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"21402:17:17"},{"assignments":[3515],"declarations":[{"constant":false,"id":3515,"mutability":"mutable","name":"totalCampaigns","nameLocation":"21437:14:17","nodeType":"VariableDeclaration","scope":3587,"src":"21429:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3514,"name":"uint256","nodeType":"ElementaryTypeName","src":"21429:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3517,"initialValue":{"id":3516,"name":"_campaignIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1980,"src":"21454:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21429:37:17"},{"body":{"id":3539,"nodeType":"Block","src":"21584:99:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":3533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3528,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"21602:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":3530,"indexExpression":{"id":3529,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"21612:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21602:12:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"id":3531,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21615:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"21602:19:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3532,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"21625:6:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"21602:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3538,"nodeType":"IfStatement","src":"21598:75:17","trueBody":{"id":3537,"nodeType":"Block","src":"21633:40:17","statements":[{"expression":{"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"21651:7:17","subExpression":{"id":3534,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"21651:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3536,"nodeType":"ExpressionStatement","src":"21651:7:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3524,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3522,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"21558:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3523,"name":"totalCampaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"21563:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21558:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3540,"initializationExpression":{"assignments":[3519],"declarations":[{"constant":false,"id":3519,"mutability":"mutable","name":"i","nameLocation":"21551:1:17","nodeType":"VariableDeclaration","scope":3540,"src":"21543:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3518,"name":"uint256","nodeType":"ElementaryTypeName","src":"21543:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3521,"initialValue":{"hexValue":"31","id":3520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21555:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"21543:13:17"},"loopExpression":{"expression":{"id":3526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"21579:3:17","subExpression":{"id":3525,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3519,"src":"21579:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3527,"nodeType":"ExpressionStatement","src":"21579:3:17"},"nodeType":"ForStatement","src":"21538:145:17"},{"assignments":[3545],"declarations":[{"constant":false,"id":3545,"mutability":"mutable","name":"result","nameLocation":"21781:6:17","nodeType":"VariableDeclaration","scope":3587,"src":"21764:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3543,"name":"uint256","nodeType":"ElementaryTypeName","src":"21764:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3544,"nodeType":"ArrayTypeName","src":"21764:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":3551,"initialValue":{"arguments":[{"id":3549,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3511,"src":"21804:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3548,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"21790:13:17","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":3546,"name":"uint256","nodeType":"ElementaryTypeName","src":"21794:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3547,"nodeType":"ArrayTypeName","src":"21794:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":3550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21790:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"21764:46:17"},{"assignments":[3553],"declarations":[{"constant":false,"id":3553,"mutability":"mutable","name":"index","nameLocation":"21828:5:17","nodeType":"VariableDeclaration","scope":3587,"src":"21820:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3552,"name":"uint256","nodeType":"ElementaryTypeName","src":"21820:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3555,"initialValue":{"hexValue":"30","id":3554,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21836:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"21820:17:17"},{"body":{"id":3583,"nodeType":"Block","src":"21902:134:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"id":3571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3566,"name":"campaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"21920:9:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Campaign_$2049_storage_$","typeString":"mapping(uint256 => struct SqudyCampaignManager.Campaign storage ref)"}},"id":3568,"indexExpression":{"id":3567,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"21930:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21920:12:17","typeDescriptions":{"typeIdentifier":"t_struct$_Campaign_$2049_storage","typeString":"struct SqudyCampaignManager.Campaign storage ref"}},"id":3569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21933:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":2038,"src":"21920:19:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3570,"name":"status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3504,"src":"21943:6:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"src":"21920:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3582,"nodeType":"IfStatement","src":"21916:110:17","trueBody":{"id":3581,"nodeType":"Block","src":"21951:75:17","statements":[{"expression":{"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3572,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"21969:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3574,"indexExpression":{"id":3573,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"21976:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21969:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3575,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"21985:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21969:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3577,"nodeType":"ExpressionStatement","src":"21969:17:17"},{"expression":{"id":3579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"22004:7:17","subExpression":{"id":3578,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"22004:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3580,"nodeType":"ExpressionStatement","src":"22004:7:17"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"21876:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3561,"name":"totalCampaigns","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3515,"src":"21881:14:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21876:19:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3584,"initializationExpression":{"assignments":[3557],"declarations":[{"constant":false,"id":3557,"mutability":"mutable","name":"i","nameLocation":"21869:1:17","nodeType":"VariableDeclaration","scope":3584,"src":"21861:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3556,"name":"uint256","nodeType":"ElementaryTypeName","src":"21861:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3559,"initialValue":{"hexValue":"31","id":3558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21873:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"21861:13:17"},"loopExpression":{"expression":{"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"21897:3:17","subExpression":{"id":3563,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3557,"src":"21897:1:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3565,"nodeType":"ExpressionStatement","src":"21897:3:17"},"nodeType":"ForStatement","src":"21856:180:17"},{"expression":{"id":3585,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3545,"src":"22061:6:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"functionReturnParameters":3509,"id":3586,"nodeType":"Return","src":"22054:13:17"}]},"documentation":{"id":3501,"nodeType":"StructuredDocumentation","src":"21213:48:17","text":" @dev Gets campaigns by status"},"functionSelector":"4e182157","id":3588,"implemented":true,"kind":"function","modifiers":[],"name":"getCampaignsByStatus","nameLocation":"21275:20:17","nodeType":"FunctionDefinition","parameters":{"id":3505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3504,"mutability":"mutable","name":"status","nameLocation":"21311:6:17","nodeType":"VariableDeclaration","scope":3588,"src":"21296:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"},"typeName":{"id":3503,"nodeType":"UserDefinedTypeName","pathNode":{"id":3502,"name":"CampaignStatus","nameLocations":["21296:14:17"],"nodeType":"IdentifierPath","referencedDeclaration":2068,"src":"21296:14:17"},"referencedDeclaration":2068,"src":"21296:14:17","typeDescriptions":{"typeIdentifier":"t_enum$_CampaignStatus_$2068","typeString":"enum SqudyCampaignManager.CampaignStatus"}},"visibility":"internal"}],"src":"21295:23:17"},"returnParameters":{"id":3509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3588,"src":"21369:16:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3506,"name":"uint256","nodeType":"ElementaryTypeName","src":"21369:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3507,"nodeType":"ArrayTypeName","src":"21369:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"21368:18:17"},"scope":3657,"src":"21266:808:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3597,"nodeType":"Block","src":"22236:25:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3594,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1604,"src":"22246:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22246:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3596,"nodeType":"ExpressionStatement","src":"22246:8:17"}]},"documentation":{"id":3589,"nodeType":"StructuredDocumentation","src":"22138:48:17","text":" @dev Emergency pause function"},"functionSelector":"51858e27","id":3598,"implemented":true,"kind":"function","modifiers":[{"id":3592,"kind":"modifierInvocation","modifierName":{"id":3591,"name":"onlyAdmin","nameLocations":["22226:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2152,"src":"22226:9:17"},"nodeType":"ModifierInvocation","src":"22226:9:17"}],"name":"emergencyPause","nameLocation":"22200:14:17","nodeType":"FunctionDefinition","parameters":{"id":3590,"nodeType":"ParameterList","parameters":[],"src":"22214:2:17"},"returnParameters":{"id":3593,"nodeType":"ParameterList","parameters":[],"src":"22236:0:17"},"scope":3657,"src":"22191:70:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3607,"nodeType":"Block","src":"22373:27:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3604,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"22383:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":3605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22383:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3606,"nodeType":"ExpressionStatement","src":"22383:10:17"}]},"documentation":{"id":3599,"nodeType":"StructuredDocumentation","src":"22271:50:17","text":" @dev Emergency unpause function"},"functionSelector":"4a4e3bd5","id":3608,"implemented":true,"kind":"function","modifiers":[{"id":3602,"kind":"modifierInvocation","modifierName":{"id":3601,"name":"onlyAdmin","nameLocations":["22363:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2152,"src":"22363:9:17"},"nodeType":"ModifierInvocation","src":"22363:9:17"}],"name":"emergencyUnpause","nameLocation":"22335:16:17","nodeType":"FunctionDefinition","parameters":{"id":3600,"nodeType":"ParameterList","parameters":[],"src":"22351:2:17"},"returnParameters":{"id":3603,"nodeType":"ParameterList","parameters":[],"src":"22373:0:17"},"scope":3657,"src":"22326:74:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3655,"nodeType":"Block","src":"22597:303:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3619,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"22615:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":3622,"name":"squdyToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"22632:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ISqudyToken_$1843","typeString":"contract ISqudyToken"}],"id":3621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22624:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3620,"name":"address","nodeType":"ElementaryTypeName","src":"22624:7:17","typeDescriptions":{}}},"id":3623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22624:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22615:28:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a2063616e6e6f74207265636f76657220535155445920746f6b656e73","id":3625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22645:51:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c7190235681f4b35cba1832662cbec2edd322458b6f17f94ae100babb184a9c6","typeString":"literal_string \"SqudyCampaignManager: cannot recover SQUDY tokens\""},"value":"SqudyCampaignManager: cannot recover SQUDY tokens"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c7190235681f4b35cba1832662cbec2edd322458b6f17f94ae100babb184a9c6","typeString":"literal_string \"SqudyCampaignManager: cannot recover SQUDY tokens\""}],"id":3618,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22607:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22607:90:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3627,"nodeType":"ExpressionStatement","src":"22607:90:17"},{"assignments":[3629],"declarations":[{"constant":false,"id":3629,"mutability":"mutable","name":"balance","nameLocation":"22715:7:17","nodeType":"VariableDeclaration","scope":3655,"src":"22707:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3628,"name":"uint256","nodeType":"ElementaryTypeName","src":"22707:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3639,"initialValue":{"arguments":[{"arguments":[{"id":3636,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"22757:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_SqudyCampaignManager_$3657","typeString":"contract SqudyCampaignManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SqudyCampaignManager_$3657","typeString":"contract SqudyCampaignManager"}],"id":3635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22749:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3634,"name":"address","nodeType":"ElementaryTypeName","src":"22749:7:17","typeDescriptions":{}}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22749:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":3631,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"22732:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3630,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"22725:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1411_$","typeString":"type(contract IERC20)"}},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22725:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1411","typeString":"contract IERC20"}},"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22739:9:17","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1368,"src":"22725:23:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22725:38:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22707:56:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3641,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"22781:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22791:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22781:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537175647943616d706169676e4d616e616765723a206e6f20746f6b656e7320746f207265636f766572","id":3644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"22794:44:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_53177711acdeb23bf17d804c031baf83440ddda3414be582b71f567ad8c731c0","typeString":"literal_string \"SqudyCampaignManager: no tokens to recover\""},"value":"SqudyCampaignManager: no tokens to recover"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_53177711acdeb23bf17d804c031baf83440ddda3414be582b71f567ad8c731c0","typeString":"literal_string \"SqudyCampaignManager: no tokens to recover\""}],"id":3640,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"22773:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22773:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3646,"nodeType":"ExpressionStatement","src":"22773:66:17"},{"expression":{"arguments":[{"id":3651,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3613,"src":"22881:2:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3652,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3629,"src":"22885:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":3648,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3611,"src":"22865:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3647,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"22858:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1411_$","typeString":"type(contract IERC20)"}},"id":3649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22858:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1411","typeString":"contract IERC20"}},"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22872:8:17","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1378,"src":"22858:22:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22858:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3654,"nodeType":"ExpressionStatement","src":"22858:35:17"}]},"documentation":{"id":3609,"nodeType":"StructuredDocumentation","src":"22410:81:17","text":" @dev Emergency function to recover tokens (only if not burned)"},"functionSelector":"b7e26a2e","id":3656,"implemented":true,"kind":"function","modifiers":[{"id":3616,"kind":"modifierInvocation","modifierName":{"id":3615,"name":"onlyAdmin","nameLocations":["22582:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":2152,"src":"22582:9:17"},"nodeType":"ModifierInvocation","src":"22582:9:17"}],"name":"emergencyRecoverTokens","nameLocation":"22505:22:17","nodeType":"FunctionDefinition","parameters":{"id":3614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3611,"mutability":"mutable","name":"token","nameLocation":"22536:5:17","nodeType":"VariableDeclaration","scope":3656,"src":"22528:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3610,"name":"address","nodeType":"ElementaryTypeName","src":"22528:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3613,"mutability":"mutable","name":"to","nameLocation":"22551:2:17","nodeType":"VariableDeclaration","scope":3656,"src":"22543:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3612,"name":"address","nodeType":"ElementaryTypeName","src":"22543:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"22527:27:17"},"returnParameters":{"id":3617,"nodeType":"ParameterList","parameters":[],"src":"22597:0:17"},"scope":3657,"src":"22496:404:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3658,"src":"579:22323:17","usedErrors":[104,460,463,1535,1538,1635],"usedEvents":[472,481,490,1527,1532,2080,2090,2096,2100,2104,2108,2117,2123,2131,2135,2139]}],"src":"32:22871:17"},"id":17}},"contracts":{"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":181,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)176_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)176_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)176_storage"},"t_struct(RoleData)176_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":173,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":175,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC-165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC-165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the address provided by the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":542,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC6093.sol":{"IERC1155Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC1155InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC1155InvalidApprover","type":"error"},{"inputs":[{"internalType":"uint256","name":"idsLength","type":"uint256"},{"internalType":"uint256","name":"valuesLength","type":"uint256"}],"name":"ERC1155InvalidArrayLength","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC1155InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC1155InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC1155InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC1155MissingApprovalForAll","type":"error"}],"devdoc":{"details":"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.","errors":{"ERC1155InsufficientBalance(address,uint256,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC1155InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC1155InvalidArrayLength(uint256,uint256)":[{"details":"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","params":{"idsLength":"Length of the array of token identifiers","valuesLength":"Length of the array of token amounts"}}],"ERC1155InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC1155InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC1155InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC1155MissingApprovalForAll(address,address)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","owner":"Address of the current owner of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC20Errors":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"}],"devdoc":{"details":"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}},"IERC721Errors":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"}],"devdoc":{"details":"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.","errors":{"ERC721IncorrectOwner(address,uint256,address)":[{"details":"Indicates an error related to the ownership over a particular token. Used in transfers.","params":{"owner":"Address of the current owner of a token.","sender":"Address whose tokens are being transferred.","tokenId":"Identifier number of a token."}}],"ERC721InsufficientApproval(address,uint256)":[{"details":"Indicates a failure with the `operator`’s approval. Used in transfers.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner.","tokenId":"Identifier number of a token."}}],"ERC721InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC721InvalidOperator(address)":[{"details":"Indicates a failure with the `operator` to be approved. Used in approvals.","params":{"operator":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC721InvalidOwner(address)":[{"details":"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.","params":{"owner":"Address of the current owner of a token."}}],"ERC721InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC721InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC721NonexistentToken(uint256)":[{"details":"Indicates a `tokenId` whose `owner` is the zero address.","params":{"tokenId":"Identifier number of a token."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"constructor":{"details":"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":841,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":847,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":849,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":851,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":853,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-20 standard as defined in the ERC.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol":{"ERC20Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"burn(uint256)":{"details":"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":841,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":847,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":849,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":851,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":853,"contract":"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC-20 standard.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Pausable.sol":{"Pausable":{"abi":[{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","errors":{"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1522,"contract":"@openzeppelin/contracts/utils/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1632,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ISqudyToken.sol":{"ISqudyToken":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the SQUDY token contract (BEP-20)","events":{"Approval(address,address,uint256)":{"details":"Emitted when allowance is set"},"Burn(address,uint256)":{"details":"Emitted when tokens are burned"},"Transfer(address,address,uint256)":{"details":"Emitted when tokens are transferred"}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the allowance given to spender by owner"},"approve(address,uint256)":{"details":"Approves the specified address to spend the specified amount of tokens"},"balanceOf(address)":{"details":"Returns the balance of the specified account"},"burn(uint256)":{"details":"Burns tokens from the caller's account"},"burnFrom(address,uint256)":{"details":"Burns tokens from the specified account (requires allowance)"},"decimals()":{"details":"Returns the decimals of the token"},"name()":{"details":"Returns the name of the token"},"symbol()":{"details":"Returns the symbol of the token"},"totalSupply()":{"details":"Returns the total supply of the token"},"transfer(address,uint256)":{"details":"Transfers tokens from the caller to the specified recipient"},"transferFrom(address,address,uint256)":{"details":"Transfers tokens from one address to another using the allowance mechanism"}},"title":"ISqudyToken","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SQUDY token contract (BEP-20)\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when allowance is set\"},\"Burn(address,uint256)\":{\"details\":\"Emitted when tokens are burned\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when tokens are transferred\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the allowance given to spender by owner\"},\"approve(address,uint256)\":{\"details\":\"Approves the specified address to spend the specified amount of tokens\"},\"balanceOf(address)\":{\"details\":\"Returns the balance of the specified account\"},\"burn(uint256)\":{\"details\":\"Burns tokens from the caller's account\"},\"burnFrom(address,uint256)\":{\"details\":\"Burns tokens from the specified account (requires allowance)\"},\"decimals()\":{\"details\":\"Returns the decimals of the token\"},\"name()\":{\"details\":\"Returns the name of the token\"},\"symbol()\":{\"details\":\"Returns the symbol of the token\"},\"totalSupply()\":{\"details\":\"Returns the total supply of the token\"},\"transfer(address,uint256)\":{\"details\":\"Transfers tokens from the caller to the specified recipient\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers tokens from one address to another using the allowance mechanism\"}},\"title\":\"ISqudyToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ISqudyToken.sol\":\"ISqudyToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/ISqudyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ISqudyToken\\n * @dev Interface for the SQUDY token contract (BEP-20)\\n */\\ninterface ISqudyToken {\\n    /**\\n     * @dev Returns the name of the token\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of the token\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the total supply of the token\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the balance of the specified account\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Transfers tokens from the caller to the specified recipient\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the allowance given to spender by owner\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Approves the specified address to spend the specified amount of tokens\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Transfers tokens from one address to another using the allowance mechanism\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Burns tokens from the caller's account\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Burns tokens from the specified account (requires allowance)\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Emitted when tokens are transferred\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when allowance is set\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when tokens are burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n} \",\"keccak256\":\"0xd25ab99dc276d6078a8779b0cfd054f10c983c17abf8b34b4d478b3d5d7dfbb8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MockSqudyToken.sol":{"MockSqudyToken":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Squdy Team","details":"Mock SQUDY token for testing purposes","errors":{"ERC20InsufficientAllowance(address,uint256,uint256)":[{"details":"Indicates a failure with the `spender`’s `allowance`. Used in transfers.","params":{"allowance":"Amount of tokens a `spender` is allowed to operate with.","needed":"Minimum amount required to perform a transfer.","spender":"Address that may be allowed to operate on tokens without being their owner."}}],"ERC20InsufficientBalance(address,uint256,uint256)":[{"details":"Indicates an error related to the current `balance` of a `sender`. Used in transfers.","params":{"balance":"Current balance for the interacting account.","needed":"Minimum amount required to perform a transfer.","sender":"Address whose tokens are being transferred."}}],"ERC20InvalidApprover(address)":[{"details":"Indicates a failure with the `approver` of a token to be approved. Used in approvals.","params":{"approver":"Address initiating an approval operation."}}],"ERC20InvalidReceiver(address)":[{"details":"Indicates a failure with the token `receiver`. Used in transfers.","params":{"receiver":"Address to which tokens are being transferred."}}],"ERC20InvalidSender(address)":[{"details":"Indicates a failure with the token `sender`. Used in transfers.","params":{"sender":"Address whose tokens are being transferred."}}],"ERC20InvalidSpender(address)":[{"details":"Indicates a failure with the `spender` to be approved. Used in approvals.","params":{"spender":"Address that may be allowed to operate on tokens without being their owner."}}],"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}]},"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"burn(uint256)":{"details":"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."},"burnFrom(address,uint256)":{"details":"Burns tokens from the specified account (requires allowance)"},"decimals()":{"details":"Returns the number of decimals used to get its user representation"},"mint(address,uint256)":{"details":"Mints tokens to the specified address (for testing)"},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"title":"MockSqudyToken","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080346200041d576040906001600160401b03818301818111838210176200031f578352600b82526020906a29b8bab23c902a37b5b2b760a91b82840152835192848401848110838211176200031f57855260059182855264535155445960d81b8486015281518181116200031f576003908154906001948583811c9316801562000412575b88841014620003fc578190601f93848111620003a8575b508890848311600114620003415760009262000335575b505060001982851b1c191690851b1782555b86519283116200031f5760049687548581811c9116801562000314575b88821014620002ff57828111620002b6575b50869184116001146200024b579383949184926000956200023f575b50501b92600019911b1c19161783555b33156200022857805460ff9190336001600160a01b0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600160a81b0319163360a084811b199190911691909117600960a11b17918290551c16604d81116200021357600a0a91633b9aca009280840293840403620001fe5760025490838201809211620001fe57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a351610a559081620004238239f35b601190634e487b7160e01b6000525260246000fd5b601183634e487b7160e01b6000525260246000fd5b8351631e4fbdf760e01b8152600081850152602490fd5b01519350388062000110565b9190601f198416928860005284886000209460005b8a898383106200029e575050501062000283575b50505050811b01835562000120565b01519060f884600019921b161c191690553880808062000274565b86860151895590970196948501948893500162000260565b886000528760002083808701891c8201928a8810620002f5575b01881c019086905b828110620002e8575050620000f4565b60008155018690620002d8565b92508192620002d0565b602289634e487b7160e01b6000525260246000fd5b90607f1690620000e2565b634e487b7160e01b600052604160045260246000fd5b015190503880620000b3565b90879350601f19831691866000528a6000209260005b8c82821062000391575050841162000378575b505050811b018255620000c5565b015160001983871b60f8161c191690553880806200036a565b8385015186558b9790950194938401930162000357565b9091508460005288600020848085018a1c8201928b8610620003f2575b91899186959493018b1c01915b828110620003e25750506200009c565b60008155859450899101620003d2565b92508192620003c5565b634e487b7160e01b600052602260045260246000fd5b92607f169262000085565b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461070757508063095ea7b31461065e57806318160ddd1461063f57806323b872dd1461054c578063313ce5671461052757806340c10f191461047857806342966c681461045a57806370a0823114610423578063715018a6146103c357806379cc6790146103215780638da5cb5b146102f857806395d89b41146101d8578063a9059cbb146101a7578063dd62ed3e1461015a5763f2fde38b146100c857600080fd5b34610156576020366003190112610156576100e1610845565b906100ea610876565b6001600160a01b03918216928315610140575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101a357806003193601126101a35780602092610178610845565b610180610860565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b5050346101a357806003193601126101a3576020906101d16101c7610845565b60243590336108a2565b5160018152f35b509190346101a357816003193601126101a357805190828454600181811c908083169283156102ee575b60209384841081146102db578388529081156102bf575060011461026a575b505050829003601f01601f191682019267ffffffffffffffff84118385101761025757508291826102539252826107fc565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102ab5750505050830101388080610221565b805488860183015293019284908201610295565b60ff1916878501525050151560051b8401019050388080610221565b634e487b7160e01b895260228a52602489fd5b91607f1691610202565b5050346101a357816003193601126101a35760055490516001600160a01b039091168152602090f35b508290346101a357826003193601126101a35761033c610845565b6024359160018060a01b0382168452600160205284842033855260205282858520541061037157509061036e91610980565b80f35b608490602086519162461bcd60e51b8352820152602660248201527f4d6f636b5371756479546f6b656e3a20696e73756666696369656e7420616c6c6044820152656f77616e636560d01b6064820152fd5b83346104205780600319360112610420576103dc610876565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346101a35760203660031901126101a35760209181906001600160a01b0361044b610845565b16815280845220549051908152f35b8382346101a35760203660031901126101a35761036e903533610980565b509034610156578060031936011261015657610492610845565b906024359161049f610876565b6001600160a01b031692831561051257600254908382018092116104ff575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b5050346101a357816003193601126101a35760209060ff60055460a01c169051908152f35b50823461042057606036600319011261042057610567610845565b61056f610860565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983106105ab575b6020886101d18989896108a2565b8683106106135781156105fc5733156105e5575082526001602090815286832033845281529186902090859003905582906101d18761059d565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b5050346101a357816003193601126101a3576020906002549051908152f35b5034610156578160031936011261015657610677610845565b6024359033156106f0576001600160a01b03169182156106d957508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461015657826003193601126101565782600354600181811c908083169283156107f2575b60209384841081146102db578388529081156107d6575060011461078057505050829003601f01601f191682019267ffffffffffffffff84118385101761025757508291826102539252826107fc565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107c25750505050830101858080610221565b8054888601830152930192849082016107ac565b60ff1916878501525050151560051b8401019050858080610221565b91607f1691610730565b6020808252825181830181905290939260005b82811061083157505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161080f565b600435906001600160a01b038216820361085b57565b600080fd5b602435906001600160a01b038216820361085b57565b6005546001600160a01b0316330361088a57565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b03808416928315610967571692831561094e576000908382528160205260408220549083821061091c575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b906001600160a01b03821690811561096757600092828452836020526040842054908282106109ed5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fdfea264697066735822122022b6123d2ef388985688af7b3b6e15b88be6b25027d4278cfad1c4cbee0a00e664736f6c63430008140033","opcodes":"PUSH1 0x80 CALLVALUE PUSH3 0x41D JUMPI PUSH1 0x40 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 DUP4 ADD DUP2 DUP2 GT DUP4 DUP3 LT OR PUSH3 0x31F JUMPI DUP4 MSTORE PUSH1 0xB DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH11 0x29B8BAB23C902A37B5B2B7 PUSH1 0xA9 SHL DUP3 DUP5 ADD MSTORE DUP4 MLOAD SWAP3 DUP5 DUP5 ADD DUP5 DUP2 LT DUP4 DUP3 GT OR PUSH3 0x31F JUMPI DUP6 MSTORE PUSH1 0x5 SWAP2 DUP3 DUP6 MSTORE PUSH5 0x5351554459 PUSH1 0xD8 SHL DUP5 DUP7 ADD MSTORE DUP2 MLOAD DUP2 DUP2 GT PUSH3 0x31F JUMPI PUSH1 0x3 SWAP1 DUP2 SLOAD SWAP1 PUSH1 0x1 SWAP5 DUP6 DUP4 DUP2 SHR SWAP4 AND DUP1 ISZERO PUSH3 0x412 JUMPI JUMPDEST DUP9 DUP5 LT EQ PUSH3 0x3FC JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP4 DUP5 DUP2 GT PUSH3 0x3A8 JUMPI JUMPDEST POP DUP9 SWAP1 DUP5 DUP4 GT PUSH1 0x1 EQ PUSH3 0x341 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x335 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP6 SHL SHR NOT AND SWAP1 DUP6 SHL OR DUP3 SSTORE JUMPDEST DUP7 MLOAD SWAP3 DUP4 GT PUSH3 0x31F JUMPI PUSH1 0x4 SWAP7 DUP8 SLOAD DUP6 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x314 JUMPI JUMPDEST DUP9 DUP3 LT EQ PUSH3 0x2FF JUMPI DUP3 DUP2 GT PUSH3 0x2B6 JUMPI JUMPDEST POP DUP7 SWAP2 DUP5 GT PUSH1 0x1 EQ PUSH3 0x24B JUMPI SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x23F JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR DUP4 SSTORE JUMPDEST CALLER ISZERO PUSH3 0x228 JUMPI DUP1 SLOAD PUSH1 0xFF SWAP2 SWAP1 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x0 DUP1 LOG3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA8 SHL SUB NOT AND CALLER PUSH1 0xA0 DUP5 DUP2 SHL NOT SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR PUSH1 0x9 PUSH1 0xA1 SHL OR SWAP2 DUP3 SWAP1 SSTORE SHR AND PUSH1 0x4D DUP2 GT PUSH3 0x213 JUMPI PUSH1 0xA EXP SWAP2 PUSH4 0x3B9ACA00 SWAP3 DUP1 DUP5 MUL SWAP4 DUP5 DIV SUB PUSH3 0x1FE JUMPI PUSH1 0x2 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH3 0x1FE JUMPI POP PUSH1 0x0 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 PUSH1 0x2 SSTORE CALLER DUP4 MSTORE DUP3 DUP2 MSTORE DUP5 DUP4 KECCAK256 DUP5 DUP2 SLOAD ADD SWAP1 SSTORE DUP5 MLOAD SWAP4 DUP5 MSTORE CALLER SWAP4 LOG3 MLOAD PUSH2 0xA55 SWAP1 DUP2 PUSH3 0x423 DUP3 CODECOPY RETURN JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP4 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP4 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 DUP2 DUP6 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x110 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND SWAP3 DUP9 PUSH1 0x0 MSTORE DUP5 DUP9 PUSH1 0x0 KECCAK256 SWAP5 PUSH1 0x0 JUMPDEST DUP11 DUP10 DUP4 DUP4 LT PUSH3 0x29E JUMPI POP POP POP LT PUSH3 0x283 JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0x120 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x274 JUMP JUMPDEST DUP7 DUP7 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP ADD PUSH3 0x260 JUMP JUMPDEST DUP9 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 DUP4 DUP1 DUP8 ADD DUP10 SHR DUP3 ADD SWAP3 DUP11 DUP9 LT PUSH3 0x2F5 JUMPI JUMPDEST ADD DUP9 SHR ADD SWAP1 DUP7 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x2E8 JUMPI POP POP PUSH3 0xF4 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP7 SWAP1 PUSH3 0x2D8 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2D0 JUMP JUMPDEST PUSH1 0x22 DUP10 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xB3 JUMP JUMPDEST SWAP1 DUP8 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP7 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x391 JUMPI POP POP DUP5 GT PUSH3 0x378 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP3 SSTORE PUSH3 0xC5 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP8 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x36A JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP12 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x357 JUMP JUMPDEST SWAP1 SWAP2 POP DUP5 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP6 ADD DUP11 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x3F2 JUMPI JUMPDEST SWAP2 DUP10 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD DUP12 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x3E2 JUMPI POP POP PUSH3 0x9C JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP10 SWAP2 ADD PUSH3 0x3D2 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x3C5 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP3 PUSH1 0x7F AND SWAP3 PUSH3 0x85 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x6FDDE03 EQ PUSH2 0x707 JUMPI POP DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x478 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x15A JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x156 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x156 JUMPI PUSH2 0xE1 PUSH2 0x845 JUMP JUMPDEST SWAP1 PUSH2 0xEA PUSH2 0x876 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x140 JUMPI POP POP PUSH1 0x5 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x5 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x178 PUSH2 0x845 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x860 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1D1 PUSH2 0x1C7 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x8A2 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2EE JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2DB JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x26A JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x257 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x253 SWAP3 MSTORE DUP3 PUSH2 0x7FC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x2AB JUMPI POP POP POP POP DUP4 ADD ADD CODESIZE DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x295 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP CODESIZE DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x202 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x5 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x1A3 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x33C PUSH2 0x845 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP5 DUP5 KECCAK256 CALLER DUP6 MSTORE PUSH1 0x20 MSTORE DUP3 DUP6 DUP6 KECCAK256 SLOAD LT PUSH2 0x371 JUMPI POP SWAP1 PUSH2 0x36E SWAP2 PUSH2 0x980 JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6F636B5371756479546F6B656E3A20696E73756666696369656E7420616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x6F77616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0x420 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x420 JUMPI PUSH2 0x3DC PUSH2 0x876 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x44B PUSH2 0x845 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x36E SWAP1 CALLDATALOAD CALLER PUSH2 0x980 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x156 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x156 JUMPI PUSH2 0x492 PUSH2 0x845 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x49F PUSH2 0x876 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0x512 JUMPI PUSH1 0x2 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x4FF JUMPI POP DUP5 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP5 PUSH1 0x24 SWAP3 MLOAD SWAP2 PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x5 SLOAD PUSH1 0xA0 SHR AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x420 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x420 JUMPI PUSH2 0x567 PUSH2 0x845 JUMP JUMPDEST PUSH2 0x56F PUSH2 0x860 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP7 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x20 MSTORE DUP7 DUP4 KECCAK256 SLOAD SWAP2 PUSH1 0x0 NOT DUP4 LT PUSH2 0x5AB JUMPI JUMPDEST PUSH1 0x20 DUP9 PUSH2 0x1D1 DUP10 DUP10 DUP10 PUSH2 0x8A2 JUMP JUMPDEST DUP7 DUP4 LT PUSH2 0x613 JUMPI DUP2 ISZERO PUSH2 0x5FC JUMPI CALLER ISZERO PUSH2 0x5E5 JUMPI POP DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP7 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP2 MSTORE SWAP2 DUP7 SWAP1 KECCAK256 SWAP1 DUP6 SWAP1 SUB SWAP1 SSTORE DUP3 SWAP1 PUSH2 0x1D1 DUP8 PUSH2 0x59D JUMP JUMPDEST DUP8 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE CALLER SWAP2 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP2 ADD DUP8 SWAP1 MSTORE DUP3 SWAP2 POP PUSH1 0x60 ADD SUB SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x156 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x156 JUMPI PUSH2 0x677 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x6D9 JUMPI POP DUP1 DUP4 PUSH1 0x20 SWAP6 CALLER DUP2 MSTORE PUSH1 0x1 DUP8 MSTORE DUP2 DUP2 KECCAK256 DUP6 DUP3 MSTORE DUP8 MSTORE KECCAK256 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 CALLER SWAP3 LOG3 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP4 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP4 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP5 SWAP2 POP DUP4 CALLVALUE PUSH2 0x156 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x156 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x7F2 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2DB JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x7D6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x780 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x257 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x253 SWAP3 MSTORE DUP3 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x7C2 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x7AC JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x831 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x80F JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x85B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x85B JUMPI JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x88A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x967 JUMPI AND SWAP3 DUP4 ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x91C JUMPI POP SWAP2 PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 SWAP3 DUP3 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x9ED JUMPI POP DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 DUP8 MSTORE DUP7 DUP5 MSTORE SUB PUSH1 0x40 DUP7 KECCAK256 SSTORE DUP1 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xB6 SLT RETURNDATASIZE 0x2E RETURN DUP9 SWAP9 JUMP DUP9 0xAF PUSH28 0x3B6E15B88BE6B25027D4278CFAD1C4CBEE0A00E664736F6C63430008 EQ STOP CALLER ","sourceMap":"344:996:16:-:0;;;;;;-1:-1:-1;;;;;344:996:16;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;344:996:16;;;;;;;;;;;1648:13:6;344:996:16;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;-1:-1:-1;344:996:16;;;;-1:-1:-1;;;;344:996:16;;;;;;;;;;;;;;;;;;;;1671:17:6;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;498:10;1273:26:4;1269:95;;344:996:16;;;;;498:10;-1:-1:-1;;;;;344:996:16;;3052:40:4;-1:-1:-1;;3052:40:4;-1:-1:-1;;;;;;344:996:16;498:10;344:996;;;;;;;;;;;;;-1:-1:-1;;;344:996:16;;;;;;;;;;;;;;581:10;;344:996;;;;;;;;;;6137:21:6;344:996:16;;;;;;;;;;;-1:-1:-1;344:996:16;6987:25:6;344:996:16;6137:21:6;344:996:16;498:10;344:996;;;;;;;;;;;;;;;;;;;498:10;6987:25:6;;344:996:16;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;-1:-1:-1;344:996:16;;;;;;;-1:-1:-1;344:996:16;;;-1:-1:-1;344:996:16;1269:95:4;344:996:16;;-1:-1:-1;;;1322:31:4;;-1:-1:-1;1322:31:4;;;344:996:16;;;1322:31:4;344:996:16;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;-1:-1:-1;344:996:16;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;-1:-1:-1;344:996:16;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;-1:-1:-1;344:996:16;;;;;;;;;;;;-1:-1:-1;344:996:16;;1671:17:6;344:996:16;;-1:-1:-1;344:996:16;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;-1:-1:-1;344:996:16;;-1:-1:-1;344:996:16;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2144,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_4660":{"entryPoint":2117,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_address_uint256_uint256":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_string":{"entryPoint":2044,"id":null,"parameterSlots":2,"returnSlots":1},"fun_burn":{"entryPoint":2432,"id":1206,"parameterSlots":2,"returnSlots":0},"fun_checkOwner":{"entryPoint":2166,"id":618,"parameterSlots":0,"returnSlots":0},"fun_transfer":{"entryPoint":2210,"id":1063,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461070757508063095ea7b31461065e57806318160ddd1461063f57806323b872dd1461054c578063313ce5671461052757806340c10f191461047857806342966c681461045a57806370a0823114610423578063715018a6146103c357806379cc6790146103215780638da5cb5b146102f857806395d89b41146101d8578063a9059cbb146101a7578063dd62ed3e1461015a5763f2fde38b146100c857600080fd5b34610156576020366003190112610156576100e1610845565b906100ea610876565b6001600160a01b03918216928315610140575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101a357806003193601126101a35780602092610178610845565b610180610860565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b5050346101a357806003193601126101a3576020906101d16101c7610845565b60243590336108a2565b5160018152f35b509190346101a357816003193601126101a357805190828454600181811c908083169283156102ee575b60209384841081146102db578388529081156102bf575060011461026a575b505050829003601f01601f191682019267ffffffffffffffff84118385101761025757508291826102539252826107fc565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102ab5750505050830101388080610221565b805488860183015293019284908201610295565b60ff1916878501525050151560051b8401019050388080610221565b634e487b7160e01b895260228a52602489fd5b91607f1691610202565b5050346101a357816003193601126101a35760055490516001600160a01b039091168152602090f35b508290346101a357826003193601126101a35761033c610845565b6024359160018060a01b0382168452600160205284842033855260205282858520541061037157509061036e91610980565b80f35b608490602086519162461bcd60e51b8352820152602660248201527f4d6f636b5371756479546f6b656e3a20696e73756666696369656e7420616c6c6044820152656f77616e636560d01b6064820152fd5b83346104205780600319360112610420576103dc610876565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346101a35760203660031901126101a35760209181906001600160a01b0361044b610845565b16815280845220549051908152f35b8382346101a35760203660031901126101a35761036e903533610980565b509034610156578060031936011261015657610492610845565b906024359161049f610876565b6001600160a01b031692831561051257600254908382018092116104ff575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b84602492519163ec442f0560e01b8352820152fd5b5050346101a357816003193601126101a35760209060ff60055460a01c169051908152f35b50823461042057606036600319011261042057610567610845565b61056f610860565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983106105ab575b6020886101d18989896108a2565b8683106106135781156105fc5733156105e5575082526001602090815286832033845281529186902090859003905582906101d18761059d565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b5050346101a357816003193601126101a3576020906002549051908152f35b5034610156578160031936011261015657610677610845565b6024359033156106f0576001600160a01b03169182156106d957508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461015657826003193601126101565782600354600181811c908083169283156107f2575b60209384841081146102db578388529081156107d6575060011461078057505050829003601f01601f191682019267ffffffffffffffff84118385101761025757508291826102539252826107fc565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107c25750505050830101858080610221565b8054888601830152930192849082016107ac565b60ff1916878501525050151560051b8401019050858080610221565b91607f1691610730565b6020808252825181830181905290939260005b82811061083157505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161080f565b600435906001600160a01b038216820361085b57565b600080fd5b602435906001600160a01b038216820361085b57565b6005546001600160a01b0316330361088a57565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b03808416928315610967571692831561094e576000908382528160205260408220549083821061091c575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b906001600160a01b03821690811561096757600092828452836020526040842054908282106109ed5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fdfea264697066735822122022b6123d2ef388985688af7b3b6e15b88be6b25027d4278cfad1c4cbee0a00e664736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATASIZE LT ISZERO PUSH2 0x15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x6FDDE03 EQ PUSH2 0x707 JUMPI POP DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x65E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x63F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x478 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3C3 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x321 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2F8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x15A JUMPI PUSH4 0xF2FDE38B EQ PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x156 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x156 JUMPI PUSH2 0xE1 PUSH2 0x845 JUMP JUMPDEST SWAP1 PUSH2 0xEA PUSH2 0x876 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP3 DUP4 ISZERO PUSH2 0x140 JUMPI POP POP PUSH1 0x5 SLOAD DUP3 PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 AND OR PUSH1 0x5 SSTORE AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0x178 PUSH2 0x845 JUMP JUMPDEST PUSH2 0x180 PUSH2 0x860 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x1D1 PUSH2 0x1C7 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x8A2 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST POP SWAP2 SWAP1 CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2EE JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2DB JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2BF JUMPI POP PUSH1 0x1 EQ PUSH2 0x26A JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x257 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x253 SWAP3 MSTORE DUP3 PUSH2 0x7FC JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x2AB JUMPI POP POP POP POP DUP4 ADD ADD CODESIZE DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x295 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP CODESIZE DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x202 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x5 SLOAD SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP DUP3 SWAP1 CALLVALUE PUSH2 0x1A3 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x33C PUSH2 0x845 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP5 DUP5 KECCAK256 CALLER DUP6 MSTORE PUSH1 0x20 MSTORE DUP3 DUP6 DUP6 KECCAK256 SLOAD LT PUSH2 0x371 JUMPI POP SWAP1 PUSH2 0x36E SWAP2 PUSH2 0x980 JUMP JUMPDEST DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D6F636B5371756479546F6B656E3A20696E73756666696369656E7420616C6C PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x6F77616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 CALLVALUE PUSH2 0x420 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x420 JUMPI PUSH2 0x3DC PUSH2 0x876 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x44B PUSH2 0x845 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 DUP3 CALLVALUE PUSH2 0x1A3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x1A3 JUMPI PUSH2 0x36E SWAP1 CALLDATALOAD CALLER PUSH2 0x980 JUMP JUMPDEST POP SWAP1 CALLVALUE PUSH2 0x156 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x156 JUMPI PUSH2 0x492 PUSH2 0x845 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP2 PUSH2 0x49F PUSH2 0x876 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 DUP4 ISZERO PUSH2 0x512 JUMPI PUSH1 0x2 SLOAD SWAP1 DUP4 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x4FF JUMPI POP DUP5 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 SWAP1 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP5 PUSH1 0x24 SWAP3 MLOAD SWAP2 PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP4 MSTORE DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x5 SLOAD PUSH1 0xA0 SHR AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP3 CALLVALUE PUSH2 0x420 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x420 JUMPI PUSH2 0x567 PUSH2 0x845 JUMP JUMPDEST PUSH2 0x56F PUSH2 0x860 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP4 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP7 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x20 MSTORE DUP7 DUP4 KECCAK256 SLOAD SWAP2 PUSH1 0x0 NOT DUP4 LT PUSH2 0x5AB JUMPI JUMPDEST PUSH1 0x20 DUP9 PUSH2 0x1D1 DUP10 DUP10 DUP10 PUSH2 0x8A2 JUMP JUMPDEST DUP7 DUP4 LT PUSH2 0x613 JUMPI DUP2 ISZERO PUSH2 0x5FC JUMPI CALLER ISZERO PUSH2 0x5E5 JUMPI POP DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP7 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP2 MSTORE SWAP2 DUP7 SWAP1 KECCAK256 SWAP1 DUP6 SWAP1 SUB SWAP1 SSTORE DUP3 SWAP1 PUSH2 0x1D1 DUP8 PUSH2 0x59D JUMP JUMPDEST DUP8 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE CALLER SWAP2 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 DUP2 ADD DUP8 SWAP1 MSTORE DUP3 SWAP2 POP PUSH1 0x60 ADD SUB SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x1A3 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1A3 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x156 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x156 JUMPI PUSH2 0x677 PUSH2 0x845 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x6D9 JUMPI POP DUP1 DUP4 PUSH1 0x20 SWAP6 CALLER DUP2 MSTORE PUSH1 0x1 DUP8 MSTORE DUP2 DUP2 KECCAK256 DUP6 DUP3 MSTORE DUP8 MSTORE KECCAK256 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 CALLER SWAP3 LOG3 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP4 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP4 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE DUP1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP5 SWAP2 POP DUP4 CALLVALUE PUSH2 0x156 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x156 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x7F2 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2DB JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x7D6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x780 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x257 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x253 SWAP3 MSTORE DUP3 PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x7C2 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x7AC JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x221 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x730 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x831 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x80F JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x85B JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x85B JUMPI JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x88A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 DUP4 ISZERO PUSH2 0x967 JUMPI AND SWAP3 DUP4 ISZERO PUSH2 0x94E JUMPI PUSH1 0x0 SWAP1 DUP4 DUP3 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP1 DUP4 DUP3 LT PUSH2 0x91C JUMPI POP SWAP2 PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 SWAP3 DUP3 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x9ED JUMPI POP DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 DUP8 MSTORE DUP7 DUP5 MSTORE SUB PUSH1 0x40 DUP7 KECCAK256 SSTORE DUP1 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xB6 SLT RETURNDATASIZE 0x2E RETURN DUP9 SWAP9 JUMP DUP9 0xAF PUSH28 0x3B6E15B88BE6B25027D4278CFAD1C4CBEE0A00E664736F6C63430008 EQ STOP CALLER ","sourceMap":"344:996:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;;;:::i;:::-;1500:62:4;;;:::i;:::-;-1:-1:-1;;;;;344:996:16;;;;2627:22:4;;2623:91;;344:996:16;;3004:6:4;344:996:16;;;;;;;;3004:6:4;344:996:16;;3052:40:4;;;;344:996:16;;2623:91:4;344:996:16;-1:-1:-1;;;2672:31:4;;;;;344:996:16;;;;;2672:31:4;344:996:16;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3388:5:6;344:996:16;;:::i;:::-;;;735:10:10;;3388:5:6;:::i;:::-;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;344:996:16;;;;;-1:-1:-1;;344:996:16;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;344:996:16;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;;-1:-1:-1;;344:996:16;;;;;;;;-1:-1:-1;344:996:16;;;;;;-1:-1:-1;;;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1710:6:4;344:996:16;;;-1:-1:-1;;;;;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1235:10;344:996;;;;;;;;;1216:40;344:996;;1324:6;;;;;:::i;:::-;344:996;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;344:996:16;;;;;;;;;;;;;;;;;;1500:62:4;;:::i;:::-;3004:6;344:996:16;;-1:-1:-1;;;;;;344:996:16;;;;;;;-1:-1:-1;;;;;344:996:16;3052:40:4;344:996:16;;3052:40:4;344:996:16;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;;;;;-1:-1:-1;;;;;344:996:16;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;692:5:8;344:996:16;;735:10:10;692:5:8;:::i;344:996:16:-;;;;;;;;;;;;;;;;:::i;:::-;;;;1500:62:4;;;:::i;:::-;-1:-1:-1;;;;;344:996:16;;7432:21:6;;7428:91;;6137:21;344:996:16;;;;;;;;;;;;;6987:25:6;344:996:16;;;6137:21:6;344:996:16;;;;;;;;;;;;;;;;;;;;6987:25:6;344:996:16;;;-1:-1:-1;;;344:996:16;;;;;;;;7428:91:6;344:996:16;;;;7476:32:6;;;;;;;;344:996:16;7476:32:6;344:996:16;;;;;;;;;;;;;;;;;823:9;344:996;;;;;;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;735:10:10;344:996:16;;;;;;;;10503:17:6;;;10484:36;;10480:309;;344:996:16;;4890:5:6;;;;;;:::i;10480:309::-;10540:24;;;10536:130;;9717:19;;9713:89;;735:10:10;9815:21:6;9811:90;;-1:-1:-1;344:996:16;;;;;;;;;;735:10:10;344:996:16;;;;;;;;;;;;;;;;4890:5:6;10480:309;;;9811:90;344:996:16;;-1:-1:-1;;;9859:31:6;;;;;344:996:16;;;;;9859:31:6;9713:89;344:996:16;;-1:-1:-1;;;9759:32:6;;;;;344:996:16;;;;;9759:32:6;10536:130;344:996:16;;-1:-1:-1;;;10591:60:6;;735:10:10;10591:60:6;;;344:996:16;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;10591:60:6;;;344:996:16;;;;;;;;;;;;;;;;2881:12:6;344:996:16;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;735:10:10;;9717:19:6;9713:89;;-1:-1:-1;;;;;344:996:16;;9815:21:6;;9811:90;;735:10:10;;;344:996:16;735:10:10;;344:996:16;;;;;;;;;;;;;;;;;;;;9989:31:6;735:10:10;;9989:31:6;;344:996:16;;;;;9811:90:6;344:996:16;;-1:-1:-1;;;9859:31:6;;;;;344:996:16;;;;;9859:31:6;9713:89;344:996:16;;-1:-1:-1;;;9759:32:6;;;;;344:996:16;;;;;9759:32:6;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;344:996:16;;;;;-1:-1:-1;;344:996:16;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;344:996:16;;;;;-1:-1:-1;;344:996:16;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;344:996:16;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;344:996:16;;;;;;:::o;1796:162:4:-;1710:6;344:996:16;-1:-1:-1;;;;;344:996:16;735:10:10;1855:23:4;1851:101;;1796:162::o;1851:101::-;344:996:16;;-1:-1:-1;;;1901:40:4;;735:10:10;1901:40:4;;;344:996:16;;;1901:40:4;5297:300:6;;-1:-1:-1;;;;;344:996:16;;;;5380:18:6;;5376:86;;344:996:16;5475:16:6;;;5471:86;;5997:540;344:996:16;;;;;;;;;;;6244:19:6;;;;6240:115;;344:996:16;;;;;6987:25:6;344:996:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;6987:25:6;5297:300::o;6240:115::-;344:996:16;;-1:-1:-1;;;6290:50:6;;-1:-1:-1;;;;;344:996:16;;;;6290:50:6;;;344:996:16;;;;;;;;;;;;;;;;10591:60:6;5471:86;344:996:16;;-1:-1:-1;;;5514:32:6;;5396:1;5514:32;;;344:996:16;;;5514:32:6;5376:86;344:996:16;;-1:-1:-1;;;5421:30:6;;5396:1;5421:30;;;344:996:16;;;5421:30:6;7888:206;;-1:-1:-1;;;;;344:996:16;;;7958:21:6;;7954:89;;5997:540;344:996:16;;;;;;;;;;;6244:19:6;;;;6240:115;;344:996:16;;6987:25:6;344:996:16;;;;;;;;;;;;;;;6714:21:6;344:996:16;;6714:21:6;344:996:16;;;;;;6987:25:6;7888:206::o;6240:115::-;344:996:16;;-1:-1:-1;;;6290:50:6;;-1:-1:-1;;;;;344:996:16;;;;6290:50:6;;;344:996:16;;;;;;;;;;;;;;;;10591:60:6"},"gasEstimates":{"creation":{"codeDepositCost":"529000","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"2856","approve(address,uint256)":"24343","balanceOf(address)":"2582","burn(uint256)":"50734","burnFrom(address,uint256)":"53149","decimals()":"2377","mint(address,uint256)":"52861","name()":"infinite","owner()":"2518","renounceOwnership()":"28257","symbol()":"infinite","totalSupply()":"2321","transfer(address,uint256)":"51040","transferFrom(address,address,uint256)":"75538","transferOwnership(address)":"28479"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790","decimals()":"313ce567","mint(address,uint256)":"40c10f19","name()":"06fdde03","owner()":"8da5cb5b","renounceOwnership()":"715018a6","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Squdy Team\",\"details\":\"Mock SQUDY token for testing purposes\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Burns tokens from the specified account (requires allowance)\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation\"},\"mint(address,uint256)\":{\"details\":\"Mints tokens to the specified address (for testing)\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MockSqudyToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockSqudyToken.sol\":\"MockSqudyToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MockSqudyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title MockSqudyToken\\n * @dev Mock SQUDY token for testing purposes\\n * @author Squdy Team\\n */\\ncontract MockSqudyToken is ERC20, ERC20Burnable, Ownable {\\n    uint8 private _decimals = 18;\\n    \\n    constructor() ERC20(\\\"Squdy Token\\\", \\\"SQUDY\\\") Ownable(msg.sender) {\\n        // Mint initial supply to deployer\\n        _mint(msg.sender, 1000000000 * 10**decimals()); // 1 billion tokens\\n    }\\n    \\n    /**\\n     * @dev Returns the number of decimals used to get its user representation\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n    \\n    /**\\n     * @dev Mints tokens to the specified address (for testing)\\n     */\\n    function mint(address to, uint256 amount) external onlyOwner {\\n        _mint(to, amount);\\n    }\\n    \\n    /**\\n     * @dev Burns tokens from the specified account (requires allowance)\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual override {\\n        require(allowance(account, msg.sender) >= amount, \\\"MockSqudyToken: insufficient allowance\\\");\\n        _burn(account, amount);\\n    }\\n} \",\"keccak256\":\"0x649c5bc1e21189ae6bde98c9ecef43624ec132d19dce438c20e591bb55a0aaaf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":841,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":847,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":849,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":851,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":853,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":542,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_owner","offset":0,"slot":"5","type":"t_address"},{"astId":1858,"contract":"contracts/MockSqudyToken.sol:MockSqudyToken","label":"_decimals","offset":20,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/SqudyCampaignManager.sol":{"SqudyCampaignManager":{"abi":[{"inputs":[{"internalType":"address","name":"_squdyToken","type":"address"},{"internalType":"address","name":"_vrfCoordinator","type":"address"},{"internalType":"bytes32","name":"_keyHash","type":"bytes32"},{"internalType":"uint64","name":"_subscriptionId","type":"uint64"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"admin","type":"address"}],"name":"AdminAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"admin","type":"address"}],"name":"AdminRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"CampaignClosed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint256","name":"startDate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endDate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"ticketAmount","type":"uint256"}],"name":"CampaignCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"CampaignPaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"CampaignResumed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":true,"internalType":"address","name":"winner","type":"address"},{"indexed":false,"internalType":"uint256","name":"prizeIndex","type":"uint256"}],"name":"PrizeClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"}],"name":"SocialTasksCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalBurned","type":"uint256"}],"name":"TokensBurned","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"tickets","type":"uint256"}],"name":"UserStaked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"campaignId","type":"uint256"},{"indexed":false,"internalType":"address[]","name":"winners","type":"address[]"},{"indexed":false,"internalType":"bytes32","name":"requestId","type":"bytes32"}],"name":"WinnersSelected","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"activateCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"addAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"burnAllTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"campaignParticipants","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"campaigns","outputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"imageUrl","type":"string"},{"internalType":"uint256","name":"softCap","type":"uint256"},{"internalType":"uint256","name":"hardCap","type":"uint256"},{"internalType":"uint256","name":"ticketAmount","type":"uint256"},{"internalType":"uint256","name":"currentAmount","type":"uint256"},{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"endDate","type":"uint256"},{"internalType":"uint256","name":"participantCount","type":"uint256"},{"internalType":"enum SqudyCampaignManager.CampaignStatus","name":"status","type":"uint8"},{"internalType":"bool","name":"tokensAreBurned","type":"bool"},{"internalType":"uint256","name":"totalBurned","type":"uint256"},{"internalType":"bytes32","name":"winnerSelectionTxHash","type":"bytes32"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"closeCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"confirmSocialTasks","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"imageUrl","type":"string"},{"internalType":"uint256","name":"softCap","type":"uint256"},{"internalType":"uint256","name":"hardCap","type":"uint256"},{"internalType":"uint256","name":"ticketAmount","type":"uint256"},{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"endDate","type":"uint256"},{"internalType":"string[]","name":"prizes","type":"string[]"}],"name":"createCampaign","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyPause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"}],"name":"emergencyRecoverTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyUnpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"getCampaign","outputs":[{"components":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"string","name":"imageUrl","type":"string"},{"internalType":"uint256","name":"softCap","type":"uint256"},{"internalType":"uint256","name":"hardCap","type":"uint256"},{"internalType":"uint256","name":"ticketAmount","type":"uint256"},{"internalType":"uint256","name":"currentAmount","type":"uint256"},{"internalType":"uint256","name":"startDate","type":"uint256"},{"internalType":"uint256","name":"endDate","type":"uint256"},{"internalType":"uint256","name":"participantCount","type":"uint256"},{"internalType":"string[]","name":"prizes","type":"string[]"},{"internalType":"address[]","name":"winners","type":"address[]"},{"internalType":"enum SqudyCampaignManager.CampaignStatus","name":"status","type":"uint8"},{"internalType":"bool","name":"tokensAreBurned","type":"bool"},{"internalType":"uint256","name":"totalBurned","type":"uint256"},{"internalType":"bytes32","name":"winnerSelectionTxHash","type":"bytes32"},{"internalType":"uint256","name":"createdAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"}],"internalType":"struct SqudyCampaignManager.Campaign","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCampaignCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"getCampaignParticipants","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum SqudyCampaignManager.CampaignStatus","name":"status","type":"uint8"}],"name":"getCampaignsByStatus","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"getParticipant","outputs":[{"components":[{"internalType":"uint256","name":"stakedAmount","type":"uint256"},{"internalType":"uint256","name":"ticketCount","type":"uint256"},{"internalType":"bool","name":"hasCompletedSocial","type":"bool"},{"internalType":"bool","name":"isWinner","type":"bool"},{"internalType":"uint256","name":"prizeIndex","type":"uint256"},{"internalType":"uint256","name":"joinedAt","type":"uint256"}],"internalType":"struct SqudyCampaignManager.Participant","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"getTicketCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"},{"internalType":"address","name":"user","type":"address"}],"name":"isEligibleForWinning","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"participantIndexes","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"participants","outputs":[{"internalType":"uint256","name":"stakedAmount","type":"uint256"},{"internalType":"uint256","name":"ticketCount","type":"uint256"},{"internalType":"bool","name":"hasCompletedSocial","type":"bool"},{"internalType":"bool","name":"isWinner","type":"bool"},{"internalType":"uint256","name":"prizeIndex","type":"uint256"},{"internalType":"uint256","name":"joinedAt","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"pauseCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"admin","type":"address"}],"name":"removeAdmin","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"resumeCampaign","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"}],"name":"selectWinners","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"squdyToken","outputs":[{"internalType":"contract ISqudyToken","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"campaignId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"stakeSQUDY","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vrfRequests","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Squdy Team","details":"Manages burn-to-win campaigns for SQUDY tokens","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"EnforcedPause()":[{"details":"The operation failed because the contract is paused."}],"ExpectedPause()":[{"details":"The operation failed because the contract is not paused."}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"activateCampaign(uint256)":{"details":"Activates a pending campaign"},"addAdmin(address)":{"details":"Adds a new admin"},"burnAllTokens(uint256)":{"details":"Burns all staked tokens after winner selection"},"closeCampaign(uint256)":{"details":"Closes a campaign and prepares for winner selection"},"confirmSocialTasks(uint256,address)":{"details":"Marks social media tasks as completed for a user","params":{"campaignId":"The campaign ID","user":"The user address"}},"createCampaign(string,string,string,uint256,uint256,uint256,uint256,uint256,string[])":{"details":"Creates a new campaign","params":{"description":"Campaign description","endDate":"Campaign end timestamp","hardCap":"Maximum amount of tokens that can be staked","imageUrl":"Campaign image URL","name":"Campaign name","prizes":"Array of prize descriptions","softCap":"Minimum amount of tokens required","startDate":"Campaign start timestamp","ticketAmount":"Amount of tokens per ticket"}},"emergencyPause()":{"details":"Emergency pause function"},"emergencyRecoverTokens(address,address)":{"details":"Emergency function to recover tokens (only if not burned)"},"emergencyUnpause()":{"details":"Emergency unpause function"},"getCampaign(uint256)":{"details":"Gets campaign details"},"getCampaignCount()":{"details":"Gets total number of campaigns"},"getCampaignParticipants(uint256)":{"details":"Gets all participants for a campaign"},"getCampaignsByStatus(uint8)":{"details":"Gets campaigns by status"},"getParticipant(uint256,address)":{"details":"Gets participant details"},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getTicketCount(uint256,address)":{"details":"Gets the ticket count for a user in a campaign"},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"isEligibleForWinning(uint256,address)":{"details":"Checks if a user is eligible for winning (has completed social tasks)"},"pauseCampaign(uint256)":{"details":"Pauses an active campaign"},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"removeAdmin(address)":{"details":"Removes an admin"},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"resumeCampaign(uint256)":{"details":"Resumes a paused campaign"},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"selectWinners(uint256)":{"details":"Initiates winner selection using Chainlink VRF"},"stakeSQUDY(uint256,uint256)":{"details":"Allows users to stake SQUDY tokens in a campaign","params":{"amount":"Amount of tokens to stake (must be multiple of ticketAmount)","campaignId":"The campaign ID to stake in"}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"title":"SqudyCampaignManager","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":294,"id":null,"parameterSlots":1,"returnSlots":1},"fun_grantRole":{"entryPoint":605,"id":411,"parameterSlots":1,"returnSlots":1},"fun_grantRole_870":{"entryPoint":315,"id":411,"parameterSlots":1,"returnSlots":1},"fun_grantRole_871":{"entryPoint":443,"id":411,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH2 0x120 CALLVALUE PUSH3 0x10B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x1F PUSH3 0x4116 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP5 ADD SWAP2 DUP4 DUP4 GT DUP6 DUP5 LT OR PUSH3 0x110 JUMPI DUP1 DUP6 SWAP3 PUSH1 0x80 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x10B JUMPI PUSH3 0x4F DUP3 PUSH3 0x126 JUMP JUMPDEST SWAP2 PUSH3 0x5E PUSH1 0x20 DUP3 ADD PUSH3 0x126 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 DUP4 ADD MLOAD SWAP3 ADD MLOAD SWAP3 DUP4 AND DUP4 SUB PUSH3 0x10B JUMPI PUSH1 0x1 DUP1 SSTORE PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND PUSH2 0x100 SWAP1 DUP2 MSTORE SWAP4 AND PUSH1 0xA0 MSTORE PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE PUSH3 0xA2 CALLER PUSH3 0x13B JUMP JUMPDEST POP PUSH3 0xAE CALLER PUSH3 0x1BB JUMP JUMPDEST POP PUSH3 0xBA CALLER PUSH3 0x25D JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3DFB SWAP2 DUP3 PUSH3 0x2FB DUP4 CODECOPY PUSH1 0x80 MLOAD DUP3 PUSH2 0x20E5 ADD MSTORE PUSH1 0xA0 MLOAD DUP3 PUSH2 0x1D67 ADD MSTORE PUSH1 0xC0 MLOAD DUP3 PUSH2 0x1CEE ADD MSTORE PUSH1 0xE0 MLOAD DUP3 PUSH2 0x1D14 ADD MSTORE MLOAD DUP2 DUP2 DUP2 PUSH2 0x35A ADD MSTORE DUP2 DUP2 PUSH2 0x829 ADD MSTORE DUP2 DUP2 PUSH2 0x109B ADD MSTORE PUSH2 0x1874 ADD MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x10B JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0xAD3228B676F7D3CD4284A5443F17F1962B36E491B30A40B2405849E597BA5FB5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND PUSH3 0x1B7 JUMPI DUP2 DUP1 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP2 DUP4 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x40F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x7D7FFB7A348E1C6A02869081A26547B49160DD3DF72D1D75A570EB9B698292EC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP1 PUSH1 0xFF AND PUSH3 0x258 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x40F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0xEE57CD81E84075558E8FCC182A1F4393F91FC97F963A136E66B7F949A62F319F PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 SWAP1 PUSH1 0xFF AND PUSH3 0x258 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x40F6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP INVALID PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x33DD JUMPI POP DUP1 PUSH4 0x2E060C6 EQ PUSH2 0x335B JUMPI DUP1 PUSH4 0x3463DD9 EQ PUSH2 0x2748 JUMPI DUP1 PUSH4 0x141961BC EQ PUSH2 0x25F1 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x2536 JUMPI DUP1 PUSH4 0x1A1D9252 EQ PUSH2 0x250C JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x2071 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2045 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2008 JUMPI DUP1 PUSH4 0x35ABD49B EQ PUSH2 0x1FBD JUMPI DUP1 PUSH4 0x35F3AD7A EQ PUSH2 0x1EBE JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1E76 JUMPI DUP1 PUSH4 0x39A2EB2A EQ PUSH2 0x1C2B JUMPI DUP1 PUSH4 0x493F1726 EQ PUSH2 0x1ACC JUMPI DUP1 PUSH4 0x4A4E3BD5 EQ PUSH2 0x1A3A JUMPI DUP1 PUSH4 0x4E182157 EQ PUSH2 0x18A3 JUMPI DUP1 PUSH4 0x4EB53F99 EQ PUSH2 0x185E JUMPI DUP1 PUSH4 0x51858E27 EQ PUSH2 0x17C9 JUMPI DUP1 PUSH4 0x5598F8CC EQ PUSH2 0x1425 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1402 JUMPI DUP1 PUSH4 0x5E3583F5 EQ PUSH2 0x13CB JUMPI DUP1 PUSH4 0x6A14DFFD EQ PUSH2 0x1371 JUMPI DUP1 PUSH4 0x6CAA9218 EQ PUSH2 0x1353 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x1296 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x126D JUMPI DUP1 PUSH4 0x8C0C5902 EQ PUSH2 0xFD7 JUMPI DUP1 PUSH4 0x8C6AB238 EQ PUSH2 0xF7E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xF33 JUMPI DUP1 PUSH4 0x9E3696D9 EQ PUSH2 0xD9D JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0xD81 JUMPI DUP1 PUSH4 0xB0E1C1E1 EQ PUSH2 0xBC6 JUMPI DUP1 PUSH4 0xB5801D91 EQ PUSH2 0x9DF JUMPI DUP1 PUSH4 0xB7E26A2E EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x786 JUMPI DUP1 PUSH4 0xDA8125FB EQ PUSH2 0x70C JUMPI DUP1 PUSH4 0xDE99347A EQ PUSH2 0x619 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x5F0 JUMPI PUSH4 0xF8EC73D1 EQ PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x5ED JUMPI PUSH2 0x1D1 CALLDATASIZE PUSH2 0x367C JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x2 DUP4 SLOAD EQ PUSH2 0x5DB JUMPI PUSH1 0x2 DUP4 SSTORE DUP1 DUP5 MSTORE PUSH1 0x20 PUSH1 0x4 DUP2 MSTORE PUSH2 0x1F9 PUSH1 0x40 DUP7 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP8 KECCAK256 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI DUP5 PUSH2 0x21F SWAP2 EQ PUSH2 0x3AA1 JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP4 ISZERO PUSH2 0x567 JUMPI PUSH1 0x6 DUP3 ADD SLOAD SWAP2 PUSH2 0x241 DUP4 DUP7 PUSH2 0x3B9B JUMP JUMPDEST PUSH2 0x4FC JUMPI PUSH1 0x7 DUP2 ADD PUSH2 0x254 DUP7 DUP3 SLOAD PUSH2 0x3BBB JUMP JUMPDEST PUSH1 0x5 DUP4 ADD SLOAD LT PUSH2 0x4A3 JUMPI DUP5 DUP9 MSTORE PUSH1 0x5 DUP4 MSTORE PUSH1 0x40 DUP9 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP4 DUP1 ISZERO PUSH2 0x48F JUMPI DUP8 SWAP1 DUP8 DIV SWAP5 DUP8 DUP2 SLOAD DUP1 ISZERO PUSH1 0x0 EQ PUSH2 0x470 JUMPI POP SWAP1 DUP1 SWAP3 POP SSTORE DUP5 DUP9 DUP3 ADD SSTORE PUSH1 0x4 TIMESTAMP SWAP2 ADD SSTORE DUP5 DUP9 MSTORE PUSH1 0x6 DUP4 MSTORE PUSH1 0x40 DUP9 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0x45C JUMPI SWAP1 PUSH2 0x2C6 SWAP2 DUP10 DUP3 ADD DUP2 SSTORE PUSH2 0x3692 JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 CALLER DUP3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SHL NOT AND OR SWAP1 SSTORE DUP5 DUP9 MSTORE PUSH1 0x7 DUP4 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH1 0xA DUP4 ADD SWAP1 DUP2 SLOAD DUP11 MSTORE DUP5 MSTORE PUSH1 0x40 DUP10 KECCAK256 CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x31A DUP2 SLOAD PUSH2 0x3A03 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST PUSH2 0x328 DUP7 DUP3 SLOAD PUSH2 0x3BBB JUMP JUMPDEST SWAP1 SSTORE TIMESTAMP PUSH1 0x11 SWAP2 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 DUP2 PUSH1 0x64 DUP2 DUP11 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x451 JUMPI DUP8 SWAP2 PUSH2 0x424 JUMPI JUMPDEST POP ISZERO PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE DUP4 ADD MSTORE PUSH32 0xBF3A2998BF95EFFB9622E3AEEA768EC248F238862FD602100075C04D21CAA23C PUSH1 0x40 CALLER SWAP4 LOG3 DUP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20746F6B656E207472616E PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1CD9995C8819985A5B1959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x444 SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x44A JUMPI JUMPDEST PUSH2 0x43C DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3BC8 JUMP JUMPDEST CODESIZE PUSH2 0x392 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST SWAP1 PUSH2 0x47A SWAP2 PUSH2 0x3BBB JUMP JUMPDEST DUP2 SSTORE ADD PUSH2 0x488 DUP6 DUP3 SLOAD PUSH2 0x3BBB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x31D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20776F756C642065786365 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x656420686172642063617 PUSH1 0xAC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20616D6F756E74206D7573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206265206D756C7469706C65206F66207469636B657420616D6F756E740000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20616D6F756E74206D7573 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x742062652067726561746572207468616E203 PUSH1 0x6C SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x6DB JUMPI JUMPDEST PUSH2 0x668 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP3 DUP5 MSTORE DUP2 DUP2 MSTORE PUSH2 0x67D PUSH1 0x40 DUP6 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 DUP5 MSTORE MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0xD DUP2 ADD DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI SWAP1 PUSH2 0x6A7 PUSH1 0x1 PUSH1 0x2 SWAP4 EQ PUSH2 0x3AA1 JUMP JUMPDEST PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH32 0xAB1902EE37C92D1A78DDA53814D64B815E7E3EE287D60843A3DBD6954E3206B4 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x65F JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP2 PUSH2 0x72C PUSH2 0x3432 JUMP JUMPDEST SWAP3 DUP1 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x743 DUP4 DUP4 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD ISZERO ISZERO SWAP1 DUP2 PUSH2 0x777 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP2 POP PUSH1 0x2 ADD SLOAD AND CODESIZE PUSH2 0x76C JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x7C3 PUSH1 0x4 CALLDATALOAD PUSH2 0x7A6 PUSH2 0x3432 JUMP JUMPDEST SWAP1 DUP1 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH2 0x7BE PUSH1 0x1 PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH2 0x3755 JUMP JUMPDEST PUSH2 0x392D JUMP JUMPDEST POP DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x7E1 PUSH2 0x3448 JUMP JUMPDEST PUSH2 0x7E9 PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0x20 SWAP2 DUP4 DUP4 MSTORE PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH2 0x81B PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x3D07 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH32 0x0 AND DUP2 EQ PUSH2 0x980 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 DUP4 PUSH1 0x24 DUP2 DUP6 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x975 JUMPI DUP6 SWAP4 PUSH2 0x941 JUMPI JUMPDEST POP DUP3 ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP8 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x8DE JUMPI PUSH2 0x8C1 JUMPI DUP3 DUP1 RETURN JUMPDEST DUP2 PUSH2 0x8D7 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x44A JUMPI PUSH2 0x43C DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST POP CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F20746F6B656E7320 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3A37903932B1B7BB32B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP3 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x96E JUMPI JUMPDEST PUSH2 0x959 DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x969 JUMPI MLOAD SWAP2 CODESIZE PUSH2 0x879 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x94F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616E6E6F7420726563 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x6F76657220535155445920746F6B656E73 PUSH1 0x78 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x9FC PUSH2 0x3432 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xB99 JUMPI JUMPDEST PUSH2 0xA36 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xA4C PUSH1 0x40 DUP6 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE SWAP5 DUP4 MSTORE SWAP4 KECCAK256 SLOAD ISZERO PUSH2 0xB40 JUMPI DUP2 DUP5 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP4 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND PUSH2 0xADF JUMPI DUP2 DUP5 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP1 DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0xD8E2A0FB3631991DD34AC6AF97A04F3485326D9F70043BB29F54E66F0C5577C6 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20736F6369616C20746173 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x1ADCC8185B1C9958591E4818DBDB5C1B195D1959 PUSH1 0x62 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2075736572206E6F742070 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x617274696369706174696E67 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA2D JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xD54 JUMPI JUMPDEST PUSH2 0xC14 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xC2A PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 PUSH1 0xD DUP3 ADD SWAP1 DUP2 SLOAD SWAP1 PUSH1 0xFF DUP3 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xD40 JUMPI PUSH1 0x1 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0xD35 JUMPI JUMPDEST POP ISZERO PUSH2 0xCE7 JUMPI PUSH1 0x9 DUP5 ADD SLOAD TIMESTAMP LT PUSH2 0xCA0 JUMPI POP PUSH1 0x3 SWAP1 PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH32 0x5E6EB33A418DE5DBBC17F989F7AE362CDFBB1748C5D603137C767027A354EDBC DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1BDD08195B991959081E595D PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x1BDD081858DD1A5D99481BDC881C185D5CD959 PUSH1 0x6A SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x2 SWAP2 POP EQ CODESIZE PUSH2 0xC57 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC0B JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xF06 JUMPI JUMPDEST PUSH2 0xDEB SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xE01 PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 PUSH1 0xD DUP3 ADD SWAP1 DUP2 SLOAD SWAP1 PUSH1 0xFF DUP3 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xD40 JUMPI PUSH1 0x2 SUB PUSH2 0xEC2 JUMPI PUSH1 0x9 DUP5 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0xE6D JUMPI POP PUSH1 0x1 SWAP1 PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH32 0x25128B02D37802123547E1526AB020238ABF16BBC37A5BD0A918D5088B016E95 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616D706169676E2068 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x185CC8195B991959 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1BDD081C185D5CD959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDE2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH2 0xF4F PUSH2 0x3432 JUMP JUMPDEST SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0xFBF PUSH1 0x40 PUSH2 0xFD3 SWAP3 PUSH1 0x4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0xFB2 DUP4 DUP4 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE KECCAK256 PUSH2 0x3CAF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x36C0 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x1243 JUMPI JUMPDEST PUSH2 0x1022 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH2 0x1038 PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH2 0x1056 PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x3AED JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0xD DUP4 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x3 PUSH2 0x1081 SWAP2 EQ PUSH2 0x3B4D JUMP JUMPDEST PUSH1 0xC DUP2 ADD SLOAD ISZERO PUSH2 0x11EB JUMPI PUSH1 0x7 DUP2 ADD DUP1 SLOAD DUP1 ISZERO PUSH2 0x1196 JUMPI DUP7 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1192 JUMPI PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x451 JUMPI PUSH2 0x1147 JUMPI JUMPDEST POP PUSH32 0x8BC81353CF6671D259D22783E39ED930583C86F3F4CF7E981298E6A872DFB15D SWAP4 SWAP5 PUSH2 0x100 PUSH2 0xFF00 NOT DUP3 SLOAD AND OR SWAP1 SSTORE SLOAD SWAP1 DUP2 PUSH1 0xE DUP3 ADD SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x117E JUMPI PUSH1 0x40 MSTORE PUSH32 0x8BC81353CF6671D259D22783E39ED930583C86F3F4CF7E981298E6A872DFB15D PUSH2 0x10FE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F20746F6B656E7320 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x3A3790313AB937 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2077696E6E657273206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1D081CD95B1958DD1959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP4 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1019 JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x12B0 PUSH2 0x3448 JUMP JUMPDEST PUSH2 0x12B8 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x12FA JUMPI PUSH2 0x12D2 SWAP1 PUSH2 0x377B JUMP JUMPDEST POP PUSH32 0x44D6D25963F097AD14F29F06854A01F575648A1EF82F30E562CCD3889717E339 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20696E76616C6964206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6D696E2061646472657373 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x1 PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD PUSH2 0x1395 PUSH2 0x3432 JUMP JUMPDEST SWAP1 DUP1 DUP4 MSTORE PUSH1 0x4 DUP7 MSTORE PUSH2 0x13AB DUP5 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x5 DUP6 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP5 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP5 MSTORE KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 SWAP1 PUSH2 0x13DD CALLDATASIZE PUSH2 0x367C JUMP JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x7 DUP4 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP3 MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI DUP1 PUSH2 0x240 PUSH1 0x40 MLOAD PUSH2 0x1447 DUP2 PUSH2 0x345E JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE DUP3 PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x180 DUP3 ADD MSTORE DUP3 PUSH2 0x1A0 DUP3 ADD MSTORE DUP3 PUSH2 0x1C0 DUP3 ADD MSTORE DUP3 PUSH2 0x1E0 DUP3 ADD MSTORE DUP3 PUSH2 0x200 DUP3 ADD MSTORE DUP3 PUSH2 0x220 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x14DA PUSH1 0x40 DUP4 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x14F2 DUP3 PUSH2 0x345E JUMP JUMPDEST DUP1 SLOAD DUP3 MSTORE PUSH2 0x1502 PUSH1 0x1 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1513 PUSH1 0x2 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1524 PUSH1 0x3 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x8 DUP2 ADD SLOAD PUSH2 0x100 DUP4 ADD MSTORE PUSH1 0x9 DUP2 ADD SLOAD PUSH2 0x120 DUP4 ADD MSTORE PUSH1 0xA DUP2 ADD SLOAD PUSH2 0x140 DUP4 ADD MSTORE PUSH1 0xB DUP2 ADD SLOAD PUSH2 0x1580 DUP2 PUSH2 0x3522 JUMP JUMPDEST SWAP1 PUSH2 0x158E PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0xB DUP5 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x17AC JUMPI POP POP POP POP PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x15BF PUSH1 0xC DUP3 ADD PUSH2 0x3CAF JUMP JUMPDEST PUSH2 0x180 DUP4 ADD MSTORE PUSH1 0xD DUP2 ADD SLOAD PUSH1 0x5 PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0x1798 JUMPI SWAP1 PUSH1 0xFF DUP3 DUP2 PUSH1 0x11 SWAP5 AND PUSH2 0x1A0 DUP7 ADD MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH2 0x1C0 DUP5 ADD MSTORE PUSH1 0xE DUP2 ADD SLOAD PUSH2 0x1E0 DUP5 ADD MSTORE PUSH1 0xF DUP2 ADD SLOAD PUSH2 0x200 DUP5 ADD MSTORE PUSH1 0x10 DUP2 ADD SLOAD PUSH2 0x220 DUP5 ADD MSTORE ADD SLOAD PUSH2 0x240 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1676 PUSH2 0x1660 PUSH2 0x164A PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x260 PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x280 DUP7 ADD SWAP1 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP6 DUP3 SUB PUSH1 0x1F NOT ADD PUSH1 0x60 DUP8 ADD MSTORE PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x1F NOT ADD PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x3619 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x120 DUP5 ADD MSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x160 DUP3 ADD MLOAD SWAP4 PUSH1 0x1F NOT DUP5 DUP3 SUB ADD PUSH2 0x180 DUP6 ADD MSTORE DUP5 MLOAD SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x20 DUP1 DUP5 PUSH1 0x5 SHL DUP5 ADD ADD SWAP8 ADD SWAP4 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x176B JUMPI DUP7 DUP1 DUP8 PUSH2 0x240 PUSH2 0x171A DUP13 PUSH2 0x180 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP7 DUP4 SUB ADD PUSH2 0x1A0 DUP8 ADD MSTORE PUSH2 0x36C0 JUMP JUMPDEST SWAP2 PUSH2 0x172F PUSH2 0x1A0 DUP3 ADD MLOAD PUSH2 0x1C0 DUP7 ADD SWAP1 PUSH2 0x3659 JUMP JUMPDEST PUSH2 0x1C0 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x1E0 DUP6 ADD MSTORE PUSH2 0x1E0 DUP2 ADD MLOAD PUSH2 0x200 DUP6 ADD MSTORE PUSH2 0x200 DUP2 ADD MLOAD PUSH2 0x220 DUP6 ADD MSTORE PUSH2 0x220 DUP2 ADD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD PUSH2 0x260 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP7 PUSH1 0x20 DUP1 PUSH2 0x1789 PUSH1 0x1 SWAP4 PUSH1 0x1F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP12 MLOAD PUSH2 0x3619 JUMP JUMPDEST SWAP10 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x16F1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP3 PUSH2 0x17BB DUP6 PUSH2 0x3573 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1809 PUSH1 0xFF PUSH1 0x40 DUP4 KECCAK256 SLOAD AND PUSH2 0x3D07 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x184C JUMPI PUSH1 0x1 SWAP1 PUSH1 0xFF NOT AND OR PUSH1 0x2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x5 SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 DUP2 LT ISZERO SWAP2 DUP3 PUSH2 0x1A36 JUMPI SWAP2 SWAP3 DUP5 SWAP2 DUP2 SWAP1 PUSH1 0x3 SLOAD PUSH1 0x1 SWAP5 DUP6 JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x19CB JUMPI POP PUSH2 0x1900 PUSH2 0x18EA DUP6 PUSH2 0x3522 JUMP JUMPDEST SWAP5 PUSH2 0x18F8 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP7 MSTORE PUSH2 0x3522 JUMP JUMPDEST DUP5 DUP9 ADD SWAP9 SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP11 CALLDATACOPY DUP6 SWAP2 DUP8 JUMPDEST DUP5 DUP2 GT ISZERO PUSH2 0x1954 JUMPI POP POP POP POP POP POP PUSH1 0x40 MLOAD SWAP4 DUP1 DUP6 ADD SWAP2 DUP2 DUP7 MSTORE MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP6 ADD SWAP6 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x1941 JUMPI DUP6 DUP8 SUB DUP7 RETURN JUMPDEST DUP4 MLOAD DUP8 MSTORE SWAP6 DUP2 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP5 ADD PUSH2 0x1934 JUMP JUMPDEST DUP1 DUP9 SWAP11 SWAP8 SWAP9 SWAP12 SWAP10 SWAP12 MSTORE PUSH1 0x4 DUP8 MSTORE DUP3 PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP14 KECCAK256 ADD SLOAD AND SWAP1 PUSH2 0x19B7 JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x19B7 JUMPI DUP7 EQ PUSH2 0x1996 JUMPI JUMPDEST PUSH2 0x198A SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP10 SWAP8 SWAP10 SWAP9 SWAP7 SWAP6 SWAP9 PUSH2 0x1910 JUMP JUMPDEST SWAP3 PUSH2 0x19AF DUP2 DUP6 PUSH2 0x19A9 PUSH2 0x198A SWAP5 DUP13 PUSH2 0x3BE0 JUMP JUMPDEST MSTORE PUSH2 0x3A03 JUMP JUMPDEST SWAP4 SWAP1 POP PUSH2 0x1981 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP1 DUP7 SWAP9 SWAP6 SWAP7 SWAP10 SWAP8 SWAP10 MSTORE PUSH1 0x4 DUP6 MSTORE DUP7 PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP12 KECCAK256 ADD SLOAD AND SWAP1 PUSH2 0x1A22 JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x1A22 JUMPI DUP5 EQ PUSH2 0x1A0D JUMPI JUMPDEST PUSH2 0x1A01 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP8 SWAP6 SWAP8 SWAP7 SWAP5 SWAP4 SWAP7 PUSH2 0x18D5 JUMP JUMPDEST SWAP5 PUSH2 0x1A1A PUSH2 0x1A01 SWAP2 PUSH2 0x3A03 JUMP JUMPDEST SWAP6 SWAP1 POP PUSH2 0x19F8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1A7A PUSH1 0xFF PUSH1 0x40 DUP4 KECCAK256 SLOAD AND PUSH2 0x3D07 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1ABA JUMPI PUSH1 0xFF NOT AND PUSH1 0x2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x1C01 JUMPI JUMPDEST PUSH2 0x1B17 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH2 0x1B2D PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0xD DUP3 ADD SWAP1 DUP2 SLOAD SWAP1 PUSH1 0xFF DUP3 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI PUSH2 0x1BBC JUMPI PUSH1 0x8 DUP5 ADD SLOAD TIMESTAMP LT PUSH2 0x1B70 JUMPI POP PUSH1 0x1 SWAP1 PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1BDD081C9958591E481D1BC81CDD185C9D PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6F742070656E64696E67 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP4 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B0E JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x1E4C JUMPI JUMPDEST PUSH2 0x1C77 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x1C8D PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x1CAB PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x3AED JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF PUSH1 0xD DUP3 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1E38 JUMPI SWAP1 PUSH2 0x1CD6 PUSH1 0x3 PUSH1 0xA SWAP4 EQ PUSH2 0x3B4D JUMP JUMPDEST ADD SLOAD SWAP1 DUP2 ISZERO PUSH2 0x1DE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x186A0 PUSH1 0x64 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x84 DUP4 ADD MSTORE DUP1 DUP3 PUSH1 0xA4 DUP2 DUP8 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x1DDB JUMPI DUP5 SWAP1 PUSH2 0x1DAD JUMPI JUMPDEST PUSH1 0x8 SWAP3 POP DUP5 MSTORE MSTORE PUSH1 0x40 DUP3 KECCAK256 SSTORE DUP1 RETURN JUMPDEST POP DUP1 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1DD4 JUMPI JUMPDEST PUSH2 0x1DC3 DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1A36 JUMPI PUSH1 0x8 SWAP2 MLOAD PUSH2 0x1D9E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1DB9 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F2070617274696369 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x70616E7473 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1C6E JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x1E90 PUSH2 0x3432 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1EAC JUMPI PUSH2 0x7C3 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x392D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0xC0 SWAP1 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP2 PUSH2 0x1EE1 PUSH2 0x3432 JUMP JUMPDEST DUP3 MLOAD SWAP4 PUSH2 0x1EED DUP6 PUSH2 0x3490 JUMP JUMPDEST DUP3 DUP6 MSTORE DUP3 PUSH1 0xA0 PUSH1 0x20 SWAP7 DUP3 DUP9 DUP3 ADD MSTORE DUP3 DUP8 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE DUP1 DUP4 MSTORE PUSH1 0x4 DUP6 MSTORE PUSH2 0x1F23 DUP5 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x5 DUP5 MSTORE DUP3 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP3 MSTORE DUP4 MSTORE KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1F49 DUP3 PUSH2 0x3490 JUMP JUMPDEST DUP1 SLOAD SWAP3 DUP4 DUP4 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 DUP5 ADD SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP2 PUSH1 0x40 DUP6 ADD SWAP2 PUSH1 0xFF DUP5 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0xFF PUSH1 0x60 DUP8 ADD SWAP5 PUSH1 0x8 SHR AND ISZERO ISZERO DUP5 MSTORE PUSH1 0xA0 PUSH1 0x4 PUSH1 0x3 DUP8 ADD SLOAD SWAP7 PUSH1 0x80 DUP10 ADD SWAP8 DUP9 MSTORE ADD SLOAD SWAP7 ADD SWAP6 DUP7 MSTORE PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE MLOAD SWAP1 DUP7 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE MLOAD PUSH1 0x80 DUP4 ADD MSTORE MLOAD PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH2 0x1FCC CALLDATASIZE PUSH2 0x367C JUMP JUMPDEST SWAP2 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH2 0x1FEF DUP5 DUP5 PUSH2 0x3692 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x7C3 PUSH1 0x4 CALLDATALOAD PUSH2 0x2028 PUSH2 0x3432 JUMP JUMPDEST SWAP1 DUP1 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH2 0x2040 PUSH1 0x1 PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH2 0x3755 JUMP JUMPDEST PUSH2 0x381B JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x1 PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x5ED JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x5ED JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x20AF DUP4 PUSH2 0x3522 JUMP JUMPDEST SWAP3 PUSH2 0x20BD PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x24 PUSH1 0x20 DUP6 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x1A36 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x24FC JUMPI POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP2 SWAP1 SUB PUSH2 0x24DE JUMPI POP PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2488 JUMPI DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0xFF PUSH1 0xD DUP3 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x2474 JUMPI PUSH1 0x3 PUSH2 0x2157 SWAP2 EQ PUSH2 0x3B4D JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP3 DUP3 SWAP4 DUP4 DUP5 SWAP1 PUSH1 0xA DUP4 ADD SLOAD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x23FF JUMPI POP POP POP DUP5 ISZERO PUSH2 0x23A3 JUMPI PUSH1 0xB ADD SLOAD SWAP4 PUSH2 0x218E DUP6 PUSH2 0x3522 JUMP JUMPDEST SWAP6 PUSH2 0x219C PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x34AB JUMP JUMPDEST DUP6 DUP8 MSTORE PUSH1 0x1F NOT PUSH2 0x21AB DUP8 PUSH2 0x3522 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP5 SWAP4 DUP6 JUMPDEST DUP3 MLOAD DUP2 LT DUP1 PUSH2 0x239A JUMPI JUMPDEST ISZERO PUSH2 0x22B0 JUMPI PUSH2 0x21E2 PUSH2 0x21DC DUP6 PUSH2 0x21D6 DUP5 DUP8 PUSH2 0x3BE0 JUMP JUMPDEST MLOAD PUSH2 0x3B9B JUMP JUMPDEST DUP7 PUSH2 0x3BF4 JUMP JUMPDEST DUP8 DUP9 JUMPDEST DUP9 DUP2 LT PUSH2 0x227B JUMPI JUMPDEST POP ISZERO PUSH2 0x2203 JUMPI JUMPDEST POP PUSH2 0x21FE SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x21B6 JUMP JUMPDEST SWAP1 SWAP6 PUSH2 0x21FE SWAP2 PUSH2 0x2274 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2222 DUP4 DUP15 PUSH2 0x3BE0 JUMP JUMPDEST MSTORE DUP8 DUP11 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP14 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP1 DUP15 MSTORE SWAP4 DUP3 MSTORE DUP1 DUP14 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE DUP11 DUP14 MSTORE SWAP2 DUP2 MSTORE DUP2 DUP13 KECCAK256 SWAP3 DUP13 MSTORE SWAP2 SWAP1 SWAP2 MSTORE DUP10 KECCAK256 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE PUSH2 0x3A03 JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0x21F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP1 PUSH2 0x2291 DUP4 DUP16 PUSH2 0x3BE0 JUMP JUMPDEST MLOAD AND EQ PUSH2 0x22A6 JUMPI PUSH2 0x22A1 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x21E5 JUMP JUMPDEST POP POP PUSH1 0x1 CODESIZE PUSH2 0x21ED JUMP JUMPDEST DUP7 DUP6 DUP11 DUP5 PUSH1 0xC DUP2 ADD DUP3 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2386 JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x2386 JUMPI DUP1 SLOAD DUP3 DUP3 SSTORE DUP1 DUP4 LT PUSH2 0x236B JUMPI JUMPDEST POP PUSH1 0x20 DUP5 ADD SWAP1 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP4 DUP2 LT PUSH2 0x234E JUMPI DUP8 DUP8 PUSH32 0xB7330AB5EFF0061DCC2CE398CDCBA65229F5E42D18318346E19C17B1CC1EBEC6 PUSH2 0x2340 DUP10 DUP10 PUSH1 0x4 CALLDATALOAD PUSH1 0xF DUP3 ADD SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x40 DUP4 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 LOG2 DUP1 RETURN JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP4 ADD SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x22EF JUMP JUMPDEST DUP2 DUP8 MSTORE PUSH1 0x20 DUP8 KECCAK256 PUSH2 0x2380 SWAP2 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x3A28 JUMP JUMPDEST DUP7 PUSH2 0x22E1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP DUP8 DUP7 LT PUSH2 0x21C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F20656C696769626C PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x65207061727469636970616E7473 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP5 DUP8 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP8 KECCAK256 DUP2 DUP9 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP9 KECCAK256 SLOAD AND DUP6 DUP9 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 SWAP1 DUP9 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP8 KECCAK256 PUSH1 0xFF PUSH1 0x2 DUP3 ADD SLOAD AND PUSH2 0x2450 JUMPI JUMPDEST POP PUSH2 0x244B SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x2170 JUMP JUMPDEST PUSH2 0x2467 PUSH2 0x244B SWAP3 SWAP4 SWAP10 PUSH1 0x1 PUSH2 0x246D SWAP4 ADD SLOAD SWAP1 PUSH2 0x3BBB JUMP JUMPDEST SWAP9 PUSH2 0x3A03 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2441 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20696E76616C6964207265 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x1C5D595CDD081251 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x20DA JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x8 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x2550 PUSH2 0x3448 JUMP JUMPDEST PUSH2 0x2558 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 CALLER DUP3 EQ PUSH2 0x259B JUMPI PUSH2 0x2573 SWAP1 PUSH2 0x3894 JUMP JUMPDEST POP PUSH32 0xA3B62BC36326052D97EA62D63C3D60308ED4C3EA8AC079DD8499F1E9C4F80C0F DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616E6E6F742072656D PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x37BB329039B2B633 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x4 DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x261E PUSH1 0x1 DUP4 ADD PUSH2 0x3573 JUMP JUMPDEST SWAP2 PUSH2 0x262B PUSH1 0x2 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST SWAP3 PUSH2 0x2638 PUSH1 0x3 DUP4 ADD PUSH2 0x3573 JUMP JUMPDEST SWAP4 PUSH1 0x4 DUP4 ADD SLOAD SWAP5 PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 DUP7 ADD SLOAD PUSH1 0x8 DUP8 ADD SLOAD SWAP1 PUSH1 0x9 DUP9 ADD SLOAD SWAP3 PUSH1 0xA DUP10 ADD SLOAD SWAP5 PUSH1 0xD DUP11 ADD SLOAD SWAP7 PUSH1 0xE DUP12 ADD SLOAD SWAP9 PUSH1 0xF DUP13 ADD SLOAD SWAP11 PUSH1 0x10 DUP14 ADD SLOAD SWAP13 PUSH1 0x11 ADD SLOAD SWAP14 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 MSTORE MSTORE PUSH2 0x220 DUP1 PUSH1 0x80 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x80 MLOAD ADD PUSH2 0x269D SWAP2 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x80 MLOAD DUP1 DUP3 SUB SWAP1 PUSH1 0x40 ADD MSTORE PUSH2 0x26B1 SWAP2 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x80 MLOAD DUP1 DUP3 SUB SWAP1 PUSH1 0x60 ADD MSTORE PUSH2 0x26C5 SWAP2 PUSH2 0x3619 JUMP JUMPDEST SWAP12 PUSH1 0x80 MLOAD PUSH1 0x80 ADD MSTORE PUSH1 0x80 MLOAD PUSH1 0xA0 ADD MSTORE PUSH1 0x80 MLOAD PUSH1 0xC0 ADD MSTORE PUSH1 0x80 MLOAD PUSH1 0xE0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x100 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x120 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x140 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x160 ADD PUSH1 0xFF DUP3 AND SWAP1 PUSH2 0x270F SWAP2 PUSH2 0x3659 JUMP JUMPDEST PUSH1 0x8 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 MLOAD PUSH2 0x180 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x1A0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x1C0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x1E0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x200 ADD MSTORE PUSH1 0x80 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x708 JUMPI PUSH2 0x277A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34CC JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x708 JUMPI PUSH2 0x279A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34CC JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x708 JUMPI PUSH2 0x27BA SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34CC JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x104 CALLDATALOAD GT PUSH2 0x708 JUMPI CALLDATASIZE PUSH1 0x23 PUSH2 0x104 CALLDATALOAD ADD SLT ISZERO PUSH2 0x708 JUMPI PUSH2 0x104 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD SWAP3 PUSH2 0x27EC DUP5 PUSH2 0x3522 JUMP JUMPDEST SWAP4 PUSH2 0x27FA PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH2 0x104 CALLDATALOAD ADD ADD GT PUSH2 0x3357 JUMPI PUSH1 0x24 PUSH2 0x104 CALLDATALOAD ADD SWAP2 JUMPDEST PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH2 0x104 CALLDATALOAD ADD ADD DUP4 LT PUSH2 0x331F JUMPI POP POP POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x32F2 JUMPI JUMPDEST PUSH2 0x2869 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP5 MLOAD ISZERO PUSH2 0x329A JUMPI PUSH1 0x64 CALLDATALOAD ISZERO PUSH2 0x3237 JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD GT ISZERO PUSH2 0x31CC JUMPI PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0x3161 JUMPI TIMESTAMP PUSH1 0xC4 CALLDATALOAD GT ISZERO PUSH2 0x30FD JUMPI PUSH1 0xC4 CALLDATALOAD PUSH1 0xE4 CALLDATALOAD GT ISZERO PUSH2 0x3092 JUMPI DUP4 MLOAD ISZERO PUSH2 0x3032 JUMPI PUSH2 0x28B4 PUSH1 0x3 SLOAD PUSH2 0x3A03 JUMP JUMPDEST SWAP4 DUP5 PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP6 ADD GT OR PUSH2 0x301E JUMPI PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE DUP5 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x28EC DUP6 PUSH2 0x345E JUMP JUMPDEST DUP7 DUP6 MSTORE DUP8 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP4 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x120 DUP5 ADD MSTORE DUP4 PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x180 DUP3 ADD MSTORE DUP2 PUSH2 0x1A0 DUP3 ADD MSTORE DUP2 PUSH2 0x1C0 DUP3 ADD MSTORE DUP2 PUSH2 0x1E0 DUP3 ADD MSTORE DUP2 PUSH2 0x200 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x220 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x240 DUP3 ADD MSTORE DUP3 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 DUP2 MLOAD DUP4 SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI DUP2 SWAP1 PUSH2 0x29A2 PUSH1 0x1 DUP8 ADD SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2FEB JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2F7C JUMPI DUP5 SWAP3 PUSH2 0x2F71 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP5 ADD SSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI DUP2 SWAP1 PUSH2 0x29FE PUSH1 0x2 DUP8 ADD SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2F3E JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2ECF JUMPI DUP5 SWAP3 PUSH2 0x2EC4 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP5 ADD SSTORE JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI DUP2 SWAP1 PUSH2 0x2A5A PUSH1 0x3 DUP8 ADD SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2E91 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2E22 JUMPI DUP5 SWAP3 PUSH2 0x2E17 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP5 ADD SSTORE JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP5 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x8 DUP5 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x9 DUP5 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0xA DUP5 ADD SSTORE PUSH2 0x160 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x2C75 JUMPI PUSH1 0xB DUP6 ADD SLOAD DUP3 PUSH1 0xB DUP8 ADD SSTORE DUP1 DUP4 LT PUSH2 0x2DA3 JUMPI JUMPDEST POP PUSH1 0x20 ADD PUSH1 0xB DUP6 ADD DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 DUP4 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x2C89 JUMPI POP POP POP POP PUSH2 0x180 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x2C75 JUMPI PUSH1 0x20 PUSH1 0xC DUP7 ADD SWAP2 DUP3 SLOAD DUP5 DUP5 SSTORE DUP1 DUP6 LT PUSH2 0x2C5B JUMPI JUMPDEST POP ADD SWAP1 DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 DUP4 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C3E JUMPI POP POP POP POP PUSH2 0x1A0 DUP3 ADD MLOAD PUSH1 0xD DUP5 ADD SWAP2 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x2C2A JUMPI POP SWAP5 DUP5 SWAP4 PUSH1 0x11 PUSH2 0x240 PUSH32 0x3A495479E40F7BA7D7F6395EDF32B142DC0C2DC52EE9BC5AAE0DD2541321074C SWAP6 DUP6 PUSH1 0x20 SWAP11 PUSH2 0x2C08 SWAP8 SLOAD PUSH1 0xFF PUSH2 0xFF00 PUSH2 0x1C0 DUP7 ADD MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP3 AND SWAP1 PUSH2 0xFFFF NOT AND OR OR SWAP1 SSTORE PUSH2 0x1E0 DUP2 ADD MLOAD PUSH1 0xE DUP6 ADD SSTORE PUSH2 0x200 DUP2 ADD MLOAD PUSH1 0xF DUP6 ADD SSTORE PUSH2 0x220 DUP2 ADD MLOAD PUSH1 0x10 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x80 DUP4 MSTORE PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0xC4 CALLDATALOAD DUP8 DUP4 ADD MSTORE PUSH1 0xE4 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE SUB SWAP1 LOG2 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP4 ADD SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B5E JUMP JUMPDEST DUP4 DUP7 MSTORE DUP3 DUP7 KECCAK256 PUSH2 0x2C6F SWAP2 DUP2 ADD SWAP1 DUP7 ADD PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2B53 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x117E JUMPI PUSH2 0x2CA6 DUP5 SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2D68 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2CFB JUMPI SWAP3 DUP3 PUSH1 0x1 SWAP5 SWAP4 PUSH1 0x20 SWAP4 DUP7 SWAP6 DUP12 SWAP3 PUSH2 0x2CF0 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP6 SSTORE JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x2B12 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2CD0 JUMP JUMPDEST SWAP1 DUP5 DUP9 MSTORE PUSH1 0x20 DUP9 KECCAK256 SWAP2 DUP9 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x2D50 JUMPI POP DUP4 PUSH1 0x20 SWAP4 PUSH1 0x1 SWAP7 SWAP4 DUP8 SWAP7 SWAP4 DUP8 SWAP5 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2D37 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP6 SSTORE PUSH2 0x2CE4 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2D2A JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x2D06 JUMP JUMPDEST PUSH2 0x2D93 SWAP1 DUP6 DUP10 MSTORE PUSH1 0x20 DUP10 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2CAF JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0xB DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP4 DUP3 ADD JUMPDEST DUP2 DUP4 ADD DUP2 LT PUSH2 0x2DC2 JUMPI POP POP PUSH2 0x2B01 JUMP JUMPDEST DUP1 DUP7 PUSH2 0x2DD0 PUSH1 0x1 SWAP4 SLOAD PUSH2 0x3539 JUMP JUMPDEST DUP1 PUSH2 0x2DDE JUMPI JUMPDEST POP POP ADD PUSH2 0x2DB2 JUMP JUMPDEST PUSH1 0x1F DUP2 GT DUP5 EQ PUSH2 0x2DF3 JUMPI POP DUP2 SSTORE JUMPDEST DUP7 CODESIZE PUSH2 0x2DD6 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH2 0x2E0E PUSH1 0x1F PUSH1 0x20 DUP5 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD DUP6 DUP4 ADD PUSH2 0x3A28 JUMP JUMPDEST DUP2 DUP4 SSTORE SSTORE PUSH2 0x2DEC JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2A79 JUMP JUMPDEST SWAP3 POP PUSH1 0x3 DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP5 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x2E76 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2E5D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x2A91 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2E4D JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2E32 JUMP JUMPDEST PUSH2 0x2EBE SWAP1 PUSH1 0x3 DUP9 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2A63 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2A1D JUMP JUMPDEST SWAP3 POP PUSH1 0x2 DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP5 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x2F23 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2F0A JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP5 ADD SSTORE PUSH2 0x2A35 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2EFA JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2F6B SWAP1 PUSH1 0x2 DUP9 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2A07 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x29C1 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP5 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x2FD0 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2FB7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 DUP5 ADD SSTORE PUSH2 0x29D9 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2FA7 JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x3018 SWAP1 PUSH1 0x1 DUP9 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x29AB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206D757374206861766520 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6174206C65617374206F6E65207072697A65 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20656E642064617465206D PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7573742062652061667465722073746172742064617465000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2073746172742064617465 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x206D75737420626520696E2074686520667574757265 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A207469636B657420616D6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x756E74206D7573742062652067726561746572207468616E2030000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206861726420636170206D PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7573742062652067726561746572207468616E20736F66742063617000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20736F667420636170206D PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x7573742062652067726561746572207468616E203 PUSH1 0x5C SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E616D652063616E6E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x7420626520656D707479 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2860 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 CALLDATALOAD GT PUSH2 0x3353 JUMPI PUSH1 0x20 DUP1 PUSH1 0x24 SWAP3 PUSH2 0x3346 CALLDATASIZE DUP6 DUP9 CALLDATALOAD PUSH2 0x104 CALLDATALOAD ADD ADD PUSH2 0x34CC JUMP JUMPDEST DUP2 MSTORE ADD SWAP4 ADD SWAP3 SWAP1 POP PUSH2 0x281D JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH1 0xC0 SWAP2 PUSH2 0x337A PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0xFF PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x4 PUSH1 0x3 DUP5 ADD SLOAD SWAP4 ADD SLOAD SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE DUP2 DUP2 AND ISZERO ISZERO PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x708 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x1192 JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x3421 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x341A JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x969 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x969 JUMPI JUMP JUMPDEST PUSH2 0x260 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x347A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x347A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x347A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x969 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x347A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3500 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH2 0x34AB JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x969 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x347A JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x3569 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x3553 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x3548 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x3587 DUP5 PUSH2 0x3539 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x35F6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x35B3 JUMPI JUMPDEST POP POP PUSH2 0x35B1 SWAP3 POP SUB DUP4 PUSH2 0x34AB JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x35DE JUMPI POP POP PUSH2 0x35B1 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x35A3 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x35C6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x35B1 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x35A3 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3645 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x3624 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x3666 JUMPI MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x969 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x36AA JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x36E0 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x36D2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xAD3228B676F7D3CD4284A5443F17F1962B36E491B30A40B2405849E597BA5FB5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3737 JUMPI POP JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x3737 JUMPI POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x7D7FFB7A348E1C6A02869081A26547B49160DD3DF72D1D75A570EB9B698292EC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xFF AND PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND ISZERO PUSH1 0x0 EQ PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x7D7FFB7A348E1C6A02869081A26547B49160DD3DF72D1D75A570EB9B698292EC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x0 EQ PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x39A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206F70657261746F722072 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1BDB19481C995C5D5A5C9959 PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3A12 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x3A33 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3A28 JUMP JUMPDEST ISZERO PUSH2 0x3A46 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616D706169676E2064 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BD95CC81B9BDD08195E1A5CDD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3AA8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x6F7420616374697665 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3AF4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20746F6B656E7320616C72 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1958591E48189D5C9B9959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3B54 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1BDD08199A5B9A5CDA1959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x3BA5 JUMPI MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3A12 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x969 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x969 JUMPI SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x36AA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP6 KECCAK256 SWAP1 DUP6 PUSH1 0xA DUP8 SWAP4 ADD SLOAD SWAP3 JUMPDEST DUP4 DUP2 LT PUSH2 0x3C3B JUMPI POP POP POP SWAP1 DUP5 MSTORE POP PUSH1 0x7 DUP2 MSTORE DUP2 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP5 DUP9 MSTORE PUSH1 0x7 DUP7 MSTORE DUP7 DUP9 KECCAK256 DUP2 DUP10 MSTORE DUP7 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 DUP10 KECCAK256 SLOAD AND DUP6 DUP10 MSTORE PUSH1 0x5 DUP8 MSTORE DUP8 DUP10 KECCAK256 DUP2 DUP11 MSTORE DUP8 MSTORE DUP8 DUP10 KECCAK256 PUSH1 0xFF PUSH1 0x2 DUP3 ADD SLOAD AND PUSH2 0x3C85 JUMPI JUMPDEST POP POP PUSH2 0x3C80 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x3C12 JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0x3C95 SWAP3 SWAP5 ADD SLOAD SWAP1 PUSH2 0x3BBB JUMP JUMPDEST SWAP2 DUP3 DUP5 LT PUSH2 0x3CA3 JUMPI DUP1 PUSH2 0x3C75 JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x3CE4 JUMPI POP POP POP PUSH2 0x35B1 SWAP3 POP SUB DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x3CCE JUMP JUMPDEST ISZERO PUSH2 0x3D0E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2061646D696E20726F6C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x81C995C5D5A5C9959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID MSTORE8 PUSH18 0x75647943616D706169676E4D616E61676572 GASPRICE KECCAK256 PUSH4 0x616D7061 PUSH10 0x676E206E97667070C54E CALL DUP3 0xB0 CREATE2 DUP6 DUP12 SUB 0x4B 0xEA 0xC1 0xB6 RETURN ADDMOD SWAP11 LOG2 0xD3 XOR DUP12 0xB1 0xE8 SWAP3 SWAP16 0x4F 0xA9 0xB9 0x29 LOG4 SWAP9 SMOD KECCAK256 0x5C 0xE4 0xD3 SSTORE MULMOD 0x2E CREATE2 0xA8 LOG1 DUP16 JUMP 0xE8 SWAP2 EXTCODECOPY DELEGATECALL LOG2 ADD 0xFB 0xE2 DUP8 DUP3 JUMPDEST MULMOD JUMP SWAP4 0xC2 OR PUSH22 0xA264697066735822122087E87B61ABA1C117EFCA5B8A 0xB9 SELFBALANCE 0x2A BYTE 0xCB SWAP16 ADDRESS 0x4B SWAP2 0xED PUSH32 0x697C41BAD84D8BB54064736F6C634300081400332F8788117E7EFF1D82E926EC PUSH26 0x4901D17C78024A50270940304540A733656F0D00000000000000 ","sourceMap":"579:22323:17:-:0;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1857:1:12;;579:22323:17;5599:32:1;;;-1:-1:-1;;;;;579:22323:17;;;4905:37;;;;579:22323;;;4952:56;5018:19;;5047:33;;5099:42;5130:10;5099:42;:::i;:::-;;5151:34;5130:10;5151:34;:::i;:::-;;5195:37;5130:10;5195:37;:::i;:::-;;579:22323;;;;;;;;;;;;;;;;;;;;5018:19;579:22323;;;;;5047:33;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;-1:-1:-1;579:22323:17;;;;;-1:-1:-1;579:22323:17;;;;-1:-1:-1;;;;;579:22323:17;;;;;;:::o;6155:316:2:-;-1:-1:-1;;;;;579:22323:17;2241:4:2;579:22323:17;;;;;;;;;;2241:4:2;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;735:10:10;6346:40:2;-1:-1:-1;;;;;;;;;;;6346:40:2;;;579:22323:17;6400:11:2;:::o;6248:217::-;6442:12;;:::o;6155:316::-;-1:-1:-1;;;;;579:22323:17;2930:6:2;579:22323:17;;;;;;;;;;2930:6:2;;579:22323:17;759:23;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:10;6346:40:2;;;579:22323:17;6400:11:2;:::o;6248:217::-;6442:12;;;:::o;6155:316::-;-1:-1:-1;;;;;579:22323:17;2930:6:2;579:22323:17;;;;;;;;;;2930:6:2;;579:22323:17;828:26;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;735:10:10;6346:40:2;;;579:22323:17;6400:11:2;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":13384,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_59307":{"entryPoint":13362,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":15304,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_string":{"entryPoint":13516,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint256t_uint256":{"entryPoint":13948,"id":null,"parameterSlots":1,"returnSlots":2},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_array_address_dyn":{"entryPoint":14016,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_enum_CampaignStatus":{"entryPoint":13913,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":13849,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_array_string_dyn":{"entryPoint":13602,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":15291,"id":null,"parameterSlots":2,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":14888,"id":null,"parameterSlots":2,"returnSlots":0},"copy_array_from_storage_to_memory_array_address_dyn":{"entryPoint":15535,"id":null,"parameterSlots":1,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":13683,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":13625,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":13483,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_59310":{"entryPoint":13406,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_59320":{"entryPoint":13456,"id":null,"parameterSlots":1,"returnSlots":0},"fun_checkRole":{"entryPoint":14165,"id":248,"parameterSlots":1,"returnSlots":0},"fun_checkRole_59315":{"entryPoint":14077,"id":248,"parameterSlots":0,"returnSlots":0},"fun_findWinnerByTicket":{"entryPoint":15348,"id":3436,"parameterSlots":2,"returnSlots":1},"fun_grantRole":{"entryPoint":14363,"id":411,"parameterSlots":2,"returnSlots":1},"fun_grantRole_59330":{"entryPoint":14203,"id":411,"parameterSlots":1,"returnSlots":1},"fun_revokeRole":{"entryPoint":14637,"id":449,"parameterSlots":2,"returnSlots":1},"fun_revokeRole_59316":{"entryPoint":14484,"id":449,"parameterSlots":1,"returnSlots":1},"increment_uint256":{"entryPoint":14851,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":15328,"id":null,"parameterSlots":2,"returnSlots":1},"mod_uint256":{"entryPoint":15259,"id":null,"parameterSlots":2,"returnSlots":1},"require_helper_stringliteral":{"entryPoint":15623,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_1e57":{"entryPoint":15009,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_4946":{"entryPoint":14754,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_656a":{"entryPoint":15085,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_ba04":{"entryPoint":15181,"id":null,"parameterSlots":1,"returnSlots":0},"require_helper_stringliteral_bcdf":{"entryPoint":14911,"id":null,"parameterSlots":1,"returnSlots":0},"storage_array_index_access_address_dyn":{"entryPoint":13970,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[],"immutableReferences":{"106":[{"length":32,"start":8421}],"1965":[{"length":32,"start":7527}],"1967":[{"length":32,"start":7406}],"1969":[{"length":32,"start":7444}],"1978":[{"length":32,"start":858},{"length":32,"start":2089},{"length":32,"start":4251},{"length":32,"start":6260}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0xA0 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP1 DUP2 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x33DD JUMPI POP DUP1 PUSH4 0x2E060C6 EQ PUSH2 0x335B JUMPI DUP1 PUSH4 0x3463DD9 EQ PUSH2 0x2748 JUMPI DUP1 PUSH4 0x141961BC EQ PUSH2 0x25F1 JUMPI DUP1 PUSH4 0x1785F53C EQ PUSH2 0x2536 JUMPI DUP1 PUSH4 0x1A1D9252 EQ PUSH2 0x250C JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x2071 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x2045 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2008 JUMPI DUP1 PUSH4 0x35ABD49B EQ PUSH2 0x1FBD JUMPI DUP1 PUSH4 0x35F3AD7A EQ PUSH2 0x1EBE JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1E76 JUMPI DUP1 PUSH4 0x39A2EB2A EQ PUSH2 0x1C2B JUMPI DUP1 PUSH4 0x493F1726 EQ PUSH2 0x1ACC JUMPI DUP1 PUSH4 0x4A4E3BD5 EQ PUSH2 0x1A3A JUMPI DUP1 PUSH4 0x4E182157 EQ PUSH2 0x18A3 JUMPI DUP1 PUSH4 0x4EB53F99 EQ PUSH2 0x185E JUMPI DUP1 PUSH4 0x51858E27 EQ PUSH2 0x17C9 JUMPI DUP1 PUSH4 0x5598F8CC EQ PUSH2 0x1425 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x1402 JUMPI DUP1 PUSH4 0x5E3583F5 EQ PUSH2 0x13CB JUMPI DUP1 PUSH4 0x6A14DFFD EQ PUSH2 0x1371 JUMPI DUP1 PUSH4 0x6CAA9218 EQ PUSH2 0x1353 JUMPI DUP1 PUSH4 0x70480275 EQ PUSH2 0x1296 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x126D JUMPI DUP1 PUSH4 0x8C0C5902 EQ PUSH2 0xFD7 JUMPI DUP1 PUSH4 0x8C6AB238 EQ PUSH2 0xF7E JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xF33 JUMPI DUP1 PUSH4 0x9E3696D9 EQ PUSH2 0xD9D JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0xD81 JUMPI DUP1 PUSH4 0xB0E1C1E1 EQ PUSH2 0xBC6 JUMPI DUP1 PUSH4 0xB5801D91 EQ PUSH2 0x9DF JUMPI DUP1 PUSH4 0xB7E26A2E EQ PUSH2 0x7C7 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x786 JUMPI DUP1 PUSH4 0xDA8125FB EQ PUSH2 0x70C JUMPI DUP1 PUSH4 0xDE99347A EQ PUSH2 0x619 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x5F0 JUMPI PUSH4 0xF8EC73D1 EQ PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x5ED JUMPI PUSH2 0x1D1 CALLDATASIZE PUSH2 0x367C JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x2 DUP4 SLOAD EQ PUSH2 0x5DB JUMPI PUSH1 0x2 DUP4 SSTORE DUP1 DUP5 MSTORE PUSH1 0x20 PUSH1 0x4 DUP2 MSTORE PUSH2 0x1F9 PUSH1 0x40 DUP7 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP8 KECCAK256 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI DUP5 PUSH2 0x21F SWAP2 EQ PUSH2 0x3AA1 JUMP JUMPDEST DUP2 DUP6 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP6 KECCAK256 SWAP1 DUP4 ISZERO PUSH2 0x567 JUMPI PUSH1 0x6 DUP3 ADD SLOAD SWAP2 PUSH2 0x241 DUP4 DUP7 PUSH2 0x3B9B JUMP JUMPDEST PUSH2 0x4FC JUMPI PUSH1 0x7 DUP2 ADD PUSH2 0x254 DUP7 DUP3 SLOAD PUSH2 0x3BBB JUMP JUMPDEST PUSH1 0x5 DUP4 ADD SLOAD LT PUSH2 0x4A3 JUMPI DUP5 DUP9 MSTORE PUSH1 0x5 DUP4 MSTORE PUSH1 0x40 DUP9 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP4 DUP1 ISZERO PUSH2 0x48F JUMPI DUP8 SWAP1 DUP8 DIV SWAP5 DUP8 DUP2 SLOAD DUP1 ISZERO PUSH1 0x0 EQ PUSH2 0x470 JUMPI POP SWAP1 DUP1 SWAP3 POP SSTORE DUP5 DUP9 DUP3 ADD SSTORE PUSH1 0x4 TIMESTAMP SWAP2 ADD SSTORE DUP5 DUP9 MSTORE PUSH1 0x6 DUP4 MSTORE PUSH1 0x40 DUP9 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT ISZERO PUSH2 0x45C JUMPI SWAP1 PUSH2 0x2C6 SWAP2 DUP10 DUP3 ADD DUP2 SSTORE PUSH2 0x3692 JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 CALLER DUP3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SHL NOT AND OR SWAP1 SSTORE DUP5 DUP9 MSTORE PUSH1 0x7 DUP4 MSTORE PUSH1 0x40 DUP9 KECCAK256 PUSH1 0xA DUP4 ADD SWAP1 DUP2 SLOAD DUP11 MSTORE DUP5 MSTORE PUSH1 0x40 DUP10 KECCAK256 CALLER PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x31A DUP2 SLOAD PUSH2 0x3A03 JUMP JUMPDEST SWAP1 SSTORE JUMPDEST PUSH2 0x328 DUP7 DUP3 SLOAD PUSH2 0x3BBB JUMP JUMPDEST SWAP1 SSTORE TIMESTAMP PUSH1 0x11 SWAP2 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE ADDRESS PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 DUP2 PUSH1 0x64 DUP2 DUP11 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x451 JUMPI DUP8 SWAP2 PUSH2 0x424 JUMPI JUMPDEST POP ISZERO PUSH2 0x3CC JUMPI PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE DUP4 ADD MSTORE PUSH32 0xBF3A2998BF95EFFB9622E3AEEA768EC248F238862FD602100075C04D21CAA23C PUSH1 0x40 CALLER SWAP4 LOG3 DUP1 SSTORE DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20746F6B656E207472616E PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1CD9995C8819985A5B1959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH2 0x444 SWAP2 POP DUP3 RETURNDATASIZE DUP5 GT PUSH2 0x44A JUMPI JUMPDEST PUSH2 0x43C DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x3BC8 JUMP JUMPDEST CODESIZE PUSH2 0x392 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x432 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST SWAP1 PUSH2 0x47A SWAP2 PUSH2 0x3BBB JUMP JUMPDEST DUP2 SSTORE ADD PUSH2 0x488 DUP6 DUP3 SLOAD PUSH2 0x3BBB JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x31D JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20776F756C642065786365 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x656420686172642063617 PUSH1 0xAC SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x3E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20616D6F756E74206D7573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74206265206D756C7469706C65206F66207469636B657420616D6F756E740000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20616D6F756E74206D7573 PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x742062652067726561746572207468616E203 PUSH1 0x6C SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3EE5AEB5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 DUP1 CALLDATALOAD SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x6DB JUMPI JUMPDEST PUSH2 0x668 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP3 DUP5 MSTORE DUP2 DUP2 MSTORE PUSH2 0x67D PUSH1 0x40 DUP6 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 DUP5 MSTORE MSTORE PUSH1 0x40 DUP3 KECCAK256 PUSH1 0xD DUP2 ADD DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI SWAP1 PUSH2 0x6A7 PUSH1 0x1 PUSH1 0x2 SWAP4 EQ PUSH2 0x3AA1 JUMP JUMPDEST PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH32 0xAB1902EE37C92D1A78DDA53814D64B815E7E3EE287D60843A3DBD6954E3206B4 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x65F JUMP JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP2 PUSH2 0x72C PUSH2 0x3432 JUMP JUMPDEST SWAP3 DUP1 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x743 DUP4 DUP4 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD ISZERO ISZERO SWAP1 DUP2 PUSH2 0x777 JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0xFF SWAP2 POP PUSH1 0x2 ADD SLOAD AND CODESIZE PUSH2 0x76C JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x7C3 PUSH1 0x4 CALLDATALOAD PUSH2 0x7A6 PUSH2 0x3432 JUMP JUMPDEST SWAP1 DUP1 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH2 0x7BE PUSH1 0x1 PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH2 0x3755 JUMP JUMPDEST PUSH2 0x392D JUMP JUMPDEST POP DUP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x7E1 PUSH2 0x3448 JUMP JUMPDEST PUSH2 0x7E9 PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0x20 SWAP2 DUP4 DUP4 MSTORE PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH2 0x81B PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x3D07 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH32 0x0 AND DUP2 EQ PUSH2 0x980 JUMPI PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP4 DUP4 PUSH1 0x24 DUP2 DUP6 GAS STATICCALL SWAP3 DUP4 ISZERO PUSH2 0x975 JUMPI DUP6 SWAP4 PUSH2 0x941 JUMPI JUMPDEST POP DUP3 ISZERO PUSH2 0x8E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP8 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x8DE JUMPI PUSH2 0x8C1 JUMPI DUP3 DUP1 RETURN JUMPDEST DUP2 PUSH2 0x8D7 SWAP3 SWAP1 RETURNDATASIZE LT PUSH2 0x44A JUMPI PUSH2 0x43C DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST POP CODESIZE DUP1 DUP3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP6 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F20746F6B656E7320 PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x3A37903932B1B7BB32B9 PUSH1 0xB1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST SWAP1 SWAP3 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x96E JUMPI JUMPDEST PUSH2 0x959 DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x969 JUMPI MLOAD SWAP2 CODESIZE PUSH2 0x879 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x94F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP8 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616E6E6F7420726563 PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x6F76657220535155445920746F6B656E73 PUSH1 0x78 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x9FC PUSH2 0x3432 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xB99 JUMPI JUMPDEST PUSH2 0xA36 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xA4C PUSH1 0x40 DUP6 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE SWAP5 DUP4 MSTORE SWAP4 KECCAK256 SLOAD ISZERO PUSH2 0xB40 JUMPI DUP2 DUP5 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP4 PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD AND PUSH2 0xADF JUMPI DUP2 DUP5 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH1 0x40 DUP5 KECCAK256 SWAP1 DUP4 PUSH1 0x0 MSTORE MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0xD8E2A0FB3631991DD34AC6AF97A04F3485326D9F70043BB29F54E66F0C5577C6 DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20736F6369616C20746173 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x1ADCC8185B1C9958591E4818DBDB5C1B195D1959 PUSH1 0x62 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2075736572206E6F742070 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x617274696369706174696E67 PUSH1 0xA0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP5 MSTORE DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xA2D JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xD54 JUMPI JUMPDEST PUSH2 0xC14 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xC2A PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 PUSH1 0xD DUP3 ADD SWAP1 DUP2 SLOAD SWAP1 PUSH1 0xFF DUP3 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xD40 JUMPI PUSH1 0x1 DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0xD35 JUMPI JUMPDEST POP ISZERO PUSH2 0xCE7 JUMPI PUSH1 0x9 DUP5 ADD SLOAD TIMESTAMP LT PUSH2 0xCA0 JUMPI POP PUSH1 0x3 SWAP1 PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH32 0x5E6EB33A418DE5DBBC17F989F7AE362CDFBB1748C5D603137C767027A354EDBC DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1BDD08195B991959081E595D PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x33 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH19 0x1BDD081858DD1A5D99481BDC881C185D5CD959 PUSH1 0x6A SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x2 SWAP2 POP EQ CODESIZE PUSH2 0xC57 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xC0B JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 SWAP1 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0xF06 JUMPI JUMPDEST PUSH2 0xDEB SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0xE01 PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP1 PUSH1 0xD DUP3 ADD SWAP1 DUP2 SLOAD SWAP1 PUSH1 0xFF DUP3 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0xD40 JUMPI PUSH1 0x2 SUB PUSH2 0xEC2 JUMPI PUSH1 0x9 DUP5 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 0xE6D JUMPI POP PUSH1 0x1 SWAP1 PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH32 0x25128B02D37802123547E1526AB020238ABF16BBC37A5BD0A918D5088B016E95 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616D706169676E2068 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x185CC8195B991959 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1BDD081C185D5CD959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE SWAP1 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0xDE2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH2 0xF4F PUSH2 0x3432 JUMP JUMPDEST SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0xFBF PUSH1 0x40 PUSH2 0xFD3 SWAP3 PUSH1 0x4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0xFB2 DUP4 DUP4 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE KECCAK256 PUSH2 0x3CAF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x36C0 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x1243 JUMPI JUMPDEST PUSH2 0x1022 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH2 0x1038 PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH2 0x1056 PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x3AED JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0xD DUP4 ADD SWAP3 PUSH1 0xFF DUP5 SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x3 PUSH2 0x1081 SWAP2 EQ PUSH2 0x3B4D JUMP JUMPDEST PUSH1 0xC DUP2 ADD SLOAD ISZERO PUSH2 0x11EB JUMPI PUSH1 0x7 DUP2 ADD DUP1 SLOAD DUP1 ISZERO PUSH2 0x1196 JUMPI DUP7 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 EXTCODESIZE ISZERO PUSH2 0x1192 JUMPI PUSH1 0x40 MLOAD PUSH4 0x79CC679 PUSH1 0xE4 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP5 SWAP1 GAS CALL DUP1 ISZERO PUSH2 0x451 JUMPI PUSH2 0x1147 JUMPI JUMPDEST POP PUSH32 0x8BC81353CF6671D259D22783E39ED930583C86F3F4CF7E981298E6A872DFB15D SWAP4 SWAP5 PUSH2 0x100 PUSH2 0xFF00 NOT DUP3 SLOAD AND OR SWAP1 SSTORE SLOAD SWAP1 DUP2 PUSH1 0xE DUP3 ADD SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG2 DUP1 RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x117E JUMPI PUSH1 0x40 MSTORE PUSH32 0x8BC81353CF6671D259D22783E39ED930583C86F3F4CF7E981298E6A872DFB15D PUSH2 0x10FE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F20746F6B656E7320 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x3A3790313AB937 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2077696E6E657273206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1D081CD95B1958DD1959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP4 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1019 JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x12B0 PUSH2 0x3448 JUMP JUMPDEST PUSH2 0x12B8 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 ISZERO PUSH2 0x12FA JUMPI PUSH2 0x12D2 SWAP1 PUSH2 0x377B JUMP JUMPDEST POP PUSH32 0x44D6D25963F097AD14F29F06854A01F575648A1EF82F30E562CCD3889717E339 DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20696E76616C6964206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x6D696E2061646472657373 PUSH1 0xA8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x1 PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD PUSH2 0x1395 PUSH2 0x3432 JUMP JUMPDEST SWAP1 DUP1 DUP4 MSTORE PUSH1 0x4 DUP7 MSTORE PUSH2 0x13AB DUP5 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x5 DUP6 MSTORE DUP3 DUP3 KECCAK256 SWAP1 DUP5 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP5 MSTORE KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 SWAP1 PUSH2 0x13DD CALLDATASIZE PUSH2 0x367C JUMP JUMPDEST SWAP1 DUP3 MSTORE PUSH1 0x7 DUP4 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP3 MSTORE DUP3 MSTORE PUSH1 0x40 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI DUP1 PUSH2 0x240 PUSH1 0x40 MLOAD PUSH2 0x1447 DUP2 PUSH2 0x345E JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE DUP3 PUSH2 0x120 DUP3 ADD MSTORE DUP3 PUSH2 0x140 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x180 DUP3 ADD MSTORE DUP3 PUSH2 0x1A0 DUP3 ADD MSTORE DUP3 PUSH2 0x1C0 DUP3 ADD MSTORE DUP3 PUSH2 0x1E0 DUP3 ADD MSTORE DUP3 PUSH2 0x200 DUP3 ADD MSTORE DUP3 PUSH2 0x220 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD DUP1 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x14DA PUSH1 0x40 DUP4 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x14F2 DUP3 PUSH2 0x345E JUMP JUMPDEST DUP1 SLOAD DUP3 MSTORE PUSH2 0x1502 PUSH1 0x1 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1513 PUSH1 0x2 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1524 PUSH1 0x3 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0x7 DUP2 ADD SLOAD PUSH1 0xE0 DUP4 ADD MSTORE PUSH1 0x8 DUP2 ADD SLOAD PUSH2 0x100 DUP4 ADD MSTORE PUSH1 0x9 DUP2 ADD SLOAD PUSH2 0x120 DUP4 ADD MSTORE PUSH1 0xA DUP2 ADD SLOAD PUSH2 0x140 DUP4 ADD MSTORE PUSH1 0xB DUP2 ADD SLOAD PUSH2 0x1580 DUP2 PUSH2 0x3522 JUMP JUMPDEST SWAP1 PUSH2 0x158E PUSH1 0x40 MLOAD SWAP3 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0xB DUP5 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x17AC JUMPI POP POP POP POP PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x15BF PUSH1 0xC DUP3 ADD PUSH2 0x3CAF JUMP JUMPDEST PUSH2 0x180 DUP4 ADD MSTORE PUSH1 0xD DUP2 ADD SLOAD PUSH1 0x5 PUSH1 0xFF DUP3 AND LT ISZERO PUSH2 0x1798 JUMPI SWAP1 PUSH1 0xFF DUP3 DUP2 PUSH1 0x11 SWAP5 AND PUSH2 0x1A0 DUP7 ADD MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH2 0x1C0 DUP5 ADD MSTORE PUSH1 0xE DUP2 ADD SLOAD PUSH2 0x1E0 DUP5 ADD MSTORE PUSH1 0xF DUP2 ADD SLOAD PUSH2 0x200 DUP5 ADD MSTORE PUSH1 0x10 DUP2 ADD SLOAD PUSH2 0x220 DUP5 ADD MSTORE ADD SLOAD PUSH2 0x240 DUP3 ADD MSTORE PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1676 PUSH2 0x1660 PUSH2 0x164A PUSH1 0x20 DUP5 ADD MLOAD PUSH2 0x260 PUSH1 0x40 DUP8 ADD MSTORE PUSH2 0x280 DUP7 ADD SWAP1 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD MLOAD DUP6 DUP3 SUB PUSH1 0x1F NOT ADD PUSH1 0x60 DUP8 ADD MSTORE PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x1F NOT ADD PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x3619 JUMP JUMPDEST SWAP3 PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0xC0 DUP5 ADD MSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH2 0x120 DUP5 ADD MSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH2 0x160 DUP5 ADD MSTORE PUSH2 0x160 DUP3 ADD MLOAD SWAP4 PUSH1 0x1F NOT DUP5 DUP3 SUB ADD PUSH2 0x180 DUP6 ADD MSTORE DUP5 MLOAD SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 ADD PUSH1 0x20 DUP1 DUP5 PUSH1 0x5 SHL DUP5 ADD ADD SWAP8 ADD SWAP4 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x176B JUMPI DUP7 DUP1 DUP8 PUSH2 0x240 PUSH2 0x171A DUP13 PUSH2 0x180 DUP5 ADD MLOAD PUSH1 0x1F NOT DUP7 DUP4 SUB ADD PUSH2 0x1A0 DUP8 ADD MSTORE PUSH2 0x36C0 JUMP JUMPDEST SWAP2 PUSH2 0x172F PUSH2 0x1A0 DUP3 ADD MLOAD PUSH2 0x1C0 DUP7 ADD SWAP1 PUSH2 0x3659 JUMP JUMPDEST PUSH2 0x1C0 DUP2 ADD MLOAD ISZERO ISZERO PUSH2 0x1E0 DUP6 ADD MSTORE PUSH2 0x1E0 DUP2 ADD MLOAD PUSH2 0x200 DUP6 ADD MSTORE PUSH2 0x200 DUP2 ADD MLOAD PUSH2 0x220 DUP6 ADD MSTORE PUSH2 0x220 DUP2 ADD MLOAD DUP3 DUP6 ADD MSTORE ADD MLOAD PUSH2 0x260 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP7 PUSH1 0x20 DUP1 PUSH2 0x1789 PUSH1 0x1 SWAP4 PUSH1 0x1F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP12 MLOAD PUSH2 0x3619 JUMP JUMPDEST SWAP10 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP4 SWAP3 SWAP1 PUSH2 0x16F1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP5 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP3 PUSH2 0x17BB DUP6 PUSH2 0x3573 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x15A2 JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1809 PUSH1 0xFF PUSH1 0x40 DUP4 KECCAK256 SLOAD AND PUSH2 0x3D07 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x184C JUMPI PUSH1 0x1 SWAP1 PUSH1 0xFF NOT AND OR PUSH1 0x2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD93C0665 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 SWAP1 DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x5 SWAP2 PUSH1 0x4 CALLDATALOAD DUP4 DUP2 LT ISZERO SWAP2 DUP3 PUSH2 0x1A36 JUMPI SWAP2 SWAP3 DUP5 SWAP2 DUP2 SWAP1 PUSH1 0x3 SLOAD PUSH1 0x1 SWAP5 DUP6 JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x19CB JUMPI POP PUSH2 0x1900 PUSH2 0x18EA DUP6 PUSH2 0x3522 JUMP JUMPDEST SWAP5 PUSH2 0x18F8 PUSH1 0x40 MLOAD SWAP7 DUP8 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP7 MSTORE PUSH2 0x3522 JUMP JUMPDEST DUP5 DUP9 ADD SWAP9 SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP11 CALLDATACOPY DUP6 SWAP2 DUP8 JUMPDEST DUP5 DUP2 GT ISZERO PUSH2 0x1954 JUMPI POP POP POP POP POP POP PUSH1 0x40 MLOAD SWAP4 DUP1 DUP6 ADD SWAP2 DUP2 DUP7 MSTORE MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP6 ADD SWAP6 SWAP3 JUMPDEST DUP3 DUP2 LT PUSH2 0x1941 JUMPI DUP6 DUP8 SUB DUP7 RETURN JUMPDEST DUP4 MLOAD DUP8 MSTORE SWAP6 DUP2 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP5 ADD PUSH2 0x1934 JUMP JUMPDEST DUP1 DUP9 SWAP11 SWAP8 SWAP9 SWAP12 SWAP10 SWAP12 MSTORE PUSH1 0x4 DUP8 MSTORE DUP3 PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP14 KECCAK256 ADD SLOAD AND SWAP1 PUSH2 0x19B7 JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x19B7 JUMPI DUP7 EQ PUSH2 0x1996 JUMPI JUMPDEST PUSH2 0x198A SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP10 SWAP8 SWAP10 SWAP9 SWAP7 SWAP6 SWAP9 PUSH2 0x1910 JUMP JUMPDEST SWAP3 PUSH2 0x19AF DUP2 DUP6 PUSH2 0x19A9 PUSH2 0x198A SWAP5 DUP13 PUSH2 0x3BE0 JUMP JUMPDEST MSTORE PUSH2 0x3A03 JUMP JUMPDEST SWAP4 SWAP1 POP PUSH2 0x1981 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP1 DUP7 SWAP9 SWAP6 SWAP7 SWAP10 SWAP8 SWAP10 MSTORE PUSH1 0x4 DUP6 MSTORE DUP7 PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP12 KECCAK256 ADD SLOAD AND SWAP1 PUSH2 0x1A22 JUMPI DUP3 DUP2 LT ISZERO PUSH2 0x1A22 JUMPI DUP5 EQ PUSH2 0x1A0D JUMPI JUMPDEST PUSH2 0x1A01 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST SWAP8 SWAP6 SWAP8 SWAP7 SWAP5 SWAP4 SWAP7 PUSH2 0x18D5 JUMP JUMPDEST SWAP5 PUSH2 0x1A1A PUSH2 0x1A01 SWAP2 PUSH2 0x3A03 JUMP JUMPDEST SWAP6 SWAP1 POP PUSH2 0x19F8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP4 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE PUSH2 0x1A7A PUSH1 0xFF PUSH1 0x40 DUP4 KECCAK256 SLOAD AND PUSH2 0x3D07 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1ABA JUMPI PUSH1 0xFF NOT AND PUSH1 0x2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x8DFC202B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x1C01 JUMPI JUMPDEST PUSH2 0x1B17 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE PUSH2 0x1B2D PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 PUSH1 0xD DUP3 ADD SWAP1 DUP2 SLOAD SWAP1 PUSH1 0xFF DUP3 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x5C7 JUMPI PUSH2 0x1BBC JUMPI PUSH1 0x8 DUP5 ADD SLOAD TIMESTAMP LT PUSH2 0x1B70 JUMPI POP PUSH1 0x1 SWAP1 PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x31 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH17 0x1BDD081C9958591E481D1BC81CDD185C9D PUSH1 0x7A SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x6F742070656E64696E67 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP3 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP4 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1B0E JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP2 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x1E4C JUMPI JUMPDEST PUSH2 0x1C77 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x1C8D PUSH1 0x40 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x1CAB PUSH1 0xFF PUSH1 0xD PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH1 0x8 SHR AND ISZERO PUSH2 0x3AED JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF PUSH1 0xD DUP3 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x1E38 JUMPI SWAP1 PUSH2 0x1CD6 PUSH1 0x3 PUSH1 0xA SWAP4 EQ PUSH2 0x3B4D JUMP JUMPDEST ADD SLOAD SWAP1 DUP2 ISZERO PUSH2 0x1DE6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x3 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x186A0 PUSH1 0x64 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF SWAP3 SWAP1 SWAP3 AND PUSH1 0x84 DUP4 ADD MSTORE DUP1 DUP3 PUSH1 0xA4 DUP2 DUP8 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x1DDB JUMPI DUP5 SWAP1 PUSH2 0x1DAD JUMPI JUMPDEST PUSH1 0x8 SWAP3 POP DUP5 MSTORE MSTORE PUSH1 0x40 DUP3 KECCAK256 SSTORE DUP1 RETURN JUMPDEST POP DUP1 DUP3 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1DD4 JUMPI JUMPDEST PUSH2 0x1DC3 DUP2 DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1A36 JUMPI PUSH1 0x8 SWAP2 MLOAD PUSH2 0x1D9E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1DB9 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE DUP7 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F2070617274696369 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x70616E7473 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1C6E JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x1E90 PUSH2 0x3432 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1EAC JUMPI PUSH2 0x7C3 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x392D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x334BD919 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0xC0 SWAP1 PUSH1 0x40 PUSH1 0x4 CALLDATALOAD SWAP2 PUSH2 0x1EE1 PUSH2 0x3432 JUMP JUMPDEST DUP3 MLOAD SWAP4 PUSH2 0x1EED DUP6 PUSH2 0x3490 JUMP JUMPDEST DUP3 DUP6 MSTORE DUP3 PUSH1 0xA0 PUSH1 0x20 SWAP7 DUP3 DUP9 DUP3 ADD MSTORE DUP3 DUP8 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE DUP1 DUP4 MSTORE PUSH1 0x4 DUP6 MSTORE PUSH2 0x1F23 DUP5 DUP5 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0x3A3F JUMP JUMPDEST DUP3 MSTORE PUSH1 0x5 DUP5 MSTORE DUP3 DUP3 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP3 MSTORE DUP4 MSTORE KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1F49 DUP3 PUSH2 0x3490 JUMP JUMPDEST DUP1 SLOAD SWAP3 DUP4 DUP4 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 DUP5 ADD SWAP1 DUP2 MSTORE PUSH1 0x2 DUP4 ADD SLOAD SWAP2 PUSH1 0x40 DUP6 ADD SWAP2 PUSH1 0xFF DUP5 AND ISZERO ISZERO DUP4 MSTORE PUSH1 0xFF PUSH1 0x60 DUP8 ADD SWAP5 PUSH1 0x8 SHR AND ISZERO ISZERO DUP5 MSTORE PUSH1 0xA0 PUSH1 0x4 PUSH1 0x3 DUP8 ADD SLOAD SWAP7 PUSH1 0x80 DUP10 ADD SWAP8 DUP9 MSTORE ADD SLOAD SWAP7 ADD SWAP6 DUP7 MSTORE PUSH1 0x40 MLOAD SWAP7 DUP8 MSTORE MLOAD SWAP1 DUP7 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x40 DUP6 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE MLOAD PUSH1 0x80 DUP4 ADD MSTORE MLOAD PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH2 0x1FCC CALLDATASIZE PUSH2 0x367C JUMP JUMPDEST SWAP2 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 DUP2 SLOAD DUP4 LT ISZERO PUSH2 0x5ED JUMPI PUSH1 0x20 PUSH2 0x1FEF DUP5 DUP5 PUSH2 0x3692 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x7C3 PUSH1 0x4 CALLDATALOAD PUSH2 0x2028 PUSH2 0x3432 JUMP JUMPDEST SWAP1 DUP1 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE PUSH2 0x2040 PUSH1 0x1 PUSH1 0x40 DUP7 KECCAK256 ADD SLOAD PUSH2 0x3755 JUMP JUMPDEST PUSH2 0x381B JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x1 PUSH1 0x40 PUSH1 0x20 SWAP3 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x5ED JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x5ED JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x20AF DUP4 PUSH2 0x3522 JUMP JUMPDEST SWAP3 PUSH2 0x20BD PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x24 PUSH1 0x20 DUP6 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x1A36 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x24FC JUMPI POP POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP CALLER DUP2 SWAP1 SUB PUSH2 0x24DE JUMPI POP PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2488 JUMPI DUP2 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0xFF PUSH1 0xD DUP3 ADD SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x2474 JUMPI PUSH1 0x3 PUSH2 0x2157 SWAP2 EQ PUSH2 0x3B4D JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP3 DUP3 SWAP4 DUP4 DUP5 SWAP1 PUSH1 0xA DUP4 ADD SLOAD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x23FF JUMPI POP POP POP DUP5 ISZERO PUSH2 0x23A3 JUMPI PUSH1 0xB ADD SLOAD SWAP4 PUSH2 0x218E DUP6 PUSH2 0x3522 JUMP JUMPDEST SWAP6 PUSH2 0x219C PUSH1 0x40 MLOAD SWAP8 DUP9 PUSH2 0x34AB JUMP JUMPDEST DUP6 DUP8 MSTORE PUSH1 0x1F NOT PUSH2 0x21AB DUP8 PUSH2 0x3522 JUMP JUMPDEST ADD CALLDATASIZE PUSH1 0x20 DUP10 ADD CALLDATACOPY DUP5 SWAP4 DUP6 JUMPDEST DUP3 MLOAD DUP2 LT DUP1 PUSH2 0x239A JUMPI JUMPDEST ISZERO PUSH2 0x22B0 JUMPI PUSH2 0x21E2 PUSH2 0x21DC DUP6 PUSH2 0x21D6 DUP5 DUP8 PUSH2 0x3BE0 JUMP JUMPDEST MLOAD PUSH2 0x3B9B JUMP JUMPDEST DUP7 PUSH2 0x3BF4 JUMP JUMPDEST DUP8 DUP9 JUMPDEST DUP9 DUP2 LT PUSH2 0x227B JUMPI JUMPDEST POP ISZERO PUSH2 0x2203 JUMPI JUMPDEST POP PUSH2 0x21FE SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x21B6 JUMP JUMPDEST SWAP1 SWAP6 PUSH2 0x21FE SWAP2 PUSH2 0x2274 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x2222 DUP4 DUP15 PUSH2 0x3BE0 JUMP JUMPDEST MSTORE DUP8 DUP11 MSTORE PUSH1 0x5 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP14 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 SWAP1 SWAP5 AND DUP1 DUP15 MSTORE SWAP4 DUP3 MSTORE DUP1 DUP14 KECCAK256 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE DUP11 DUP14 MSTORE SWAP2 DUP2 MSTORE DUP2 DUP13 KECCAK256 SWAP3 DUP13 MSTORE SWAP2 SWAP1 SWAP2 MSTORE DUP10 KECCAK256 PUSH1 0x3 ADD DUP2 SWAP1 SSTORE PUSH2 0x3A03 JUMP JUMPDEST SWAP6 SWAP1 PUSH2 0x21F4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP1 PUSH2 0x2291 DUP4 DUP16 PUSH2 0x3BE0 JUMP JUMPDEST MLOAD AND EQ PUSH2 0x22A6 JUMPI PUSH2 0x22A1 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x21E5 JUMP JUMPDEST POP POP PUSH1 0x1 CODESIZE PUSH2 0x21ED JUMP JUMPDEST DUP7 DUP6 DUP11 DUP5 PUSH1 0xC DUP2 ADD DUP3 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2386 JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x2386 JUMPI DUP1 SLOAD DUP3 DUP3 SSTORE DUP1 DUP4 LT PUSH2 0x236B JUMPI JUMPDEST POP PUSH1 0x20 DUP5 ADD SWAP1 DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 DUP7 JUMPDEST DUP4 DUP2 LT PUSH2 0x234E JUMPI DUP8 DUP8 PUSH32 0xB7330AB5EFF0061DCC2CE398CDCBA65229F5E42D18318346E19C17B1CC1EBEC6 PUSH2 0x2340 DUP10 DUP10 PUSH1 0x4 CALLDATALOAD PUSH1 0xF DUP3 ADD SSTORE PUSH1 0x11 TIMESTAMP SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x40 DUP4 MSTORE PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x36C0 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE SUB SWAP1 LOG2 DUP1 RETURN JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP4 ADD SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x22EF JUMP JUMPDEST DUP2 DUP8 MSTORE PUSH1 0x20 DUP8 KECCAK256 PUSH2 0x2380 SWAP2 DUP2 ADD SWAP1 DUP5 ADD PUSH2 0x3A28 JUMP JUMPDEST DUP7 PUSH2 0x22E1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP DUP8 DUP7 LT PUSH2 0x21C0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E6F20656C696769626C PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x65207061727469636970616E7473 PUSH1 0x90 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP5 DUP8 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP8 KECCAK256 DUP2 DUP9 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP9 KECCAK256 SLOAD AND DUP6 DUP9 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP9 KECCAK256 SWAP1 DUP9 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP8 KECCAK256 PUSH1 0xFF PUSH1 0x2 DUP3 ADD SLOAD AND PUSH2 0x2450 JUMPI JUMPDEST POP PUSH2 0x244B SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x2170 JUMP JUMPDEST PUSH2 0x2467 PUSH2 0x244B SWAP3 SWAP4 SWAP10 PUSH1 0x1 PUSH2 0x246D SWAP4 ADD SLOAD SWAP1 PUSH2 0x3BBB JUMP JUMPDEST SWAP9 PUSH2 0x3A03 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2441 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20696E76616C6964207265 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x1C5D595CDD081251 PUSH1 0xC2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x20DA JUMP JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH1 0x20 SWAP2 PUSH1 0x4 CALLDATALOAD DUP2 MSTORE PUSH1 0x8 DUP4 MSTORE KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH2 0x2550 PUSH2 0x3448 JUMP JUMPDEST PUSH2 0x2558 PUSH2 0x36FD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 CALLER DUP3 EQ PUSH2 0x259B JUMPI PUSH2 0x2573 SWAP1 PUSH2 0x3894 JUMP JUMPDEST POP PUSH32 0xA3B62BC36326052D97EA62D63C3D60308ED4C3EA8AC079DD8499F1E9C4F80C0F DUP3 DUP1 LOG2 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616E6E6F742072656D PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x37BB329039B2B633 PUSH1 0xC1 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x4 DUP1 CALLDATALOAD DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x261E PUSH1 0x1 DUP4 ADD PUSH2 0x3573 JUMP JUMPDEST SWAP2 PUSH2 0x262B PUSH1 0x2 DUP3 ADD PUSH2 0x3573 JUMP JUMPDEST SWAP3 PUSH2 0x2638 PUSH1 0x3 DUP4 ADD PUSH2 0x3573 JUMP JUMPDEST SWAP4 PUSH1 0x4 DUP4 ADD SLOAD SWAP5 PUSH1 0x5 DUP5 ADD SLOAD PUSH1 0x6 DUP6 ADD SLOAD PUSH1 0x7 DUP7 ADD SLOAD PUSH1 0x8 DUP8 ADD SLOAD SWAP1 PUSH1 0x9 DUP9 ADD SLOAD SWAP3 PUSH1 0xA DUP10 ADD SLOAD SWAP5 PUSH1 0xD DUP11 ADD SLOAD SWAP7 PUSH1 0xE DUP12 ADD SLOAD SWAP9 PUSH1 0xF DUP13 ADD SLOAD SWAP11 PUSH1 0x10 DUP14 ADD SLOAD SWAP13 PUSH1 0x11 ADD SLOAD SWAP14 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 MSTORE MSTORE PUSH2 0x220 DUP1 PUSH1 0x80 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x80 MLOAD ADD PUSH2 0x269D SWAP2 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x80 MLOAD DUP1 DUP3 SUB SWAP1 PUSH1 0x40 ADD MSTORE PUSH2 0x26B1 SWAP2 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0x80 MLOAD DUP1 DUP3 SUB SWAP1 PUSH1 0x60 ADD MSTORE PUSH2 0x26C5 SWAP2 PUSH2 0x3619 JUMP JUMPDEST SWAP12 PUSH1 0x80 MLOAD PUSH1 0x80 ADD MSTORE PUSH1 0x80 MLOAD PUSH1 0xA0 ADD MSTORE PUSH1 0x80 MLOAD PUSH1 0xC0 ADD MSTORE PUSH1 0x80 MLOAD PUSH1 0xE0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x100 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x120 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x140 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x160 ADD PUSH1 0xFF DUP3 AND SWAP1 PUSH2 0x270F SWAP2 PUSH2 0x3659 JUMP JUMPDEST PUSH1 0x8 SHR PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x80 MLOAD PUSH2 0x180 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x1A0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x1C0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x1E0 ADD MSTORE PUSH1 0x80 MLOAD PUSH2 0x200 ADD MSTORE PUSH1 0x80 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH2 0x120 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x708 JUMPI PUSH2 0x277A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34CC JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x708 JUMPI PUSH2 0x279A SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34CC JUMP JUMPDEST SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x708 JUMPI PUSH2 0x27BA SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x34CC JUMP JUMPDEST SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH2 0x104 CALLDATALOAD GT PUSH2 0x708 JUMPI CALLDATASIZE PUSH1 0x23 PUSH2 0x104 CALLDATALOAD ADD SLT ISZERO PUSH2 0x708 JUMPI PUSH2 0x104 CALLDATALOAD PUSH1 0x4 ADD CALLDATALOAD SWAP3 PUSH2 0x27EC DUP5 PUSH2 0x3522 JUMP JUMPDEST SWAP4 PUSH2 0x27FA PUSH1 0x40 MLOAD SWAP6 DUP7 PUSH2 0x34AB JUMP JUMPDEST DUP1 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP1 CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH2 0x104 CALLDATALOAD ADD ADD GT PUSH2 0x3357 JUMPI PUSH1 0x24 PUSH2 0x104 CALLDATALOAD ADD SWAP2 JUMPDEST PUSH1 0x24 DUP3 PUSH1 0x5 SHL PUSH2 0x104 CALLDATALOAD ADD ADD DUP4 LT PUSH2 0x331F JUMPI POP POP POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D86 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 CALLER DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND DUP1 ISZERO PUSH2 0x32F2 JUMPI JUMPDEST PUSH2 0x2869 SWAP1 PUSH2 0x39A2 JUMP JUMPDEST DUP5 MLOAD ISZERO PUSH2 0x329A JUMPI PUSH1 0x64 CALLDATALOAD ISZERO PUSH2 0x3237 JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD GT ISZERO PUSH2 0x31CC JUMPI PUSH1 0xA4 CALLDATALOAD ISZERO PUSH2 0x3161 JUMPI TIMESTAMP PUSH1 0xC4 CALLDATALOAD GT ISZERO PUSH2 0x30FD JUMPI PUSH1 0xC4 CALLDATALOAD PUSH1 0xE4 CALLDATALOAD GT ISZERO PUSH2 0x3092 JUMPI DUP4 MLOAD ISZERO PUSH2 0x3032 JUMPI PUSH2 0x28B4 PUSH1 0x3 SLOAD PUSH2 0x3A03 JUMP JUMPDEST SWAP4 DUP5 PUSH1 0x3 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x20 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP6 ADD GT OR PUSH2 0x301E JUMPI PUSH1 0x20 DUP4 ADD PUSH1 0x40 MSTORE DUP5 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP4 PUSH2 0x28EC DUP6 PUSH2 0x345E JUMP JUMPDEST DUP7 DUP6 MSTORE DUP8 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0xC0 DUP5 ADD MSTORE DUP4 PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0xC4 CALLDATALOAD PUSH2 0x100 DUP5 ADD MSTORE PUSH1 0xE4 CALLDATALOAD PUSH2 0x120 DUP5 ADD MSTORE DUP4 PUSH2 0x140 DUP5 ADD MSTORE PUSH2 0x160 DUP4 ADD MSTORE PUSH2 0x180 DUP3 ADD MSTORE DUP2 PUSH2 0x1A0 DUP3 ADD MSTORE DUP2 PUSH2 0x1C0 DUP3 ADD MSTORE DUP2 PUSH2 0x1E0 DUP3 ADD MSTORE DUP2 PUSH2 0x200 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x220 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x240 DUP3 ADD MSTORE DUP3 DUP3 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP2 DUP2 MLOAD DUP4 SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI DUP2 SWAP1 PUSH2 0x29A2 PUSH1 0x1 DUP8 ADD SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2FEB JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2F7C JUMPI DUP5 SWAP3 PUSH2 0x2F71 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x1 DUP5 ADD SSTORE JUMPDEST PUSH1 0x40 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI DUP2 SWAP1 PUSH2 0x29FE PUSH1 0x2 DUP8 ADD SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2F3E JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2ECF JUMPI DUP5 SWAP3 PUSH2 0x2EC4 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x2 DUP5 ADD SSTORE JUMPDEST PUSH1 0x60 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI DUP2 SWAP1 PUSH2 0x2A5A PUSH1 0x3 DUP8 ADD SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2E91 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2E22 JUMPI DUP5 SWAP3 PUSH2 0x2E17 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 DUP5 ADD SSTORE JUMPDEST PUSH1 0x80 DUP3 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0xA0 DUP3 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0xE0 DUP3 ADD MLOAD PUSH1 0x7 DUP5 ADD SSTORE PUSH2 0x100 DUP3 ADD MLOAD PUSH1 0x8 DUP5 ADD SSTORE PUSH2 0x120 DUP3 ADD MLOAD PUSH1 0x9 DUP5 ADD SSTORE PUSH2 0x140 DUP3 ADD MLOAD PUSH1 0xA DUP5 ADD SSTORE PUSH2 0x160 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x2C75 JUMPI PUSH1 0xB DUP6 ADD SLOAD DUP3 PUSH1 0xB DUP8 ADD SSTORE DUP1 DUP4 LT PUSH2 0x2DA3 JUMPI JUMPDEST POP PUSH1 0x20 ADD PUSH1 0xB DUP6 ADD DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 DUP4 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x2C89 JUMPI POP POP POP POP PUSH2 0x180 DUP3 ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x2C75 JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x2C75 JUMPI PUSH1 0x20 PUSH1 0xC DUP7 ADD SWAP2 DUP3 SLOAD DUP5 DUP5 SSTORE DUP1 DUP6 LT PUSH2 0x2C5B JUMPI JUMPDEST POP ADD SWAP1 DUP4 MSTORE PUSH1 0x20 DUP4 KECCAK256 DUP4 JUMPDEST DUP4 DUP2 LT PUSH2 0x2C3E JUMPI POP POP POP POP PUSH2 0x1A0 DUP3 ADD MLOAD PUSH1 0xD DUP5 ADD SWAP2 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x2C2A JUMPI POP SWAP5 DUP5 SWAP4 PUSH1 0x11 PUSH2 0x240 PUSH32 0x3A495479E40F7BA7D7F6395EDF32B142DC0C2DC52EE9BC5AAE0DD2541321074C SWAP6 DUP6 PUSH1 0x20 SWAP11 PUSH2 0x2C08 SWAP8 SLOAD PUSH1 0xFF PUSH2 0xFF00 PUSH2 0x1C0 DUP7 ADD MLOAD ISZERO ISZERO PUSH1 0x8 SHL AND SWAP3 AND SWAP1 PUSH2 0xFFFF NOT AND OR OR SWAP1 SSTORE PUSH2 0x1E0 DUP2 ADD MLOAD PUSH1 0xE DUP6 ADD SSTORE PUSH2 0x200 DUP2 ADD MLOAD PUSH1 0xF DUP6 ADD SSTORE PUSH2 0x220 DUP2 ADD MLOAD PUSH1 0x10 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x80 DUP4 MSTORE PUSH1 0x80 DUP4 ADD SWAP1 PUSH2 0x3619 JUMP JUMPDEST PUSH1 0xC4 CALLDATALOAD DUP8 DUP4 ADD MSTORE PUSH1 0xE4 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0xA4 CALLDATALOAD PUSH1 0x60 DUP4 ADD MSTORE SUB SWAP1 LOG2 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 DUP4 ADD SSTORE PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2B5E JUMP JUMPDEST DUP4 DUP7 MSTORE DUP3 DUP7 KECCAK256 PUSH2 0x2C6F SWAP2 DUP2 ADD SWAP1 DUP7 ADD PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2B53 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x117E JUMPI PUSH2 0x2CA6 DUP5 SLOAD PUSH2 0x3539 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x2D68 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x2CFB JUMPI SWAP3 DUP3 PUSH1 0x1 SWAP5 SWAP4 PUSH1 0x20 SWAP4 DUP7 SWAP6 DUP12 SWAP3 PUSH2 0x2CF0 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP6 SSTORE JUMPDEST ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 PUSH2 0x2B12 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2CD0 JUMP JUMPDEST SWAP1 DUP5 DUP9 MSTORE PUSH1 0x20 DUP9 KECCAK256 SWAP2 DUP9 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x2D50 JUMPI POP DUP4 PUSH1 0x20 SWAP4 PUSH1 0x1 SWAP7 SWAP4 DUP8 SWAP7 SWAP4 DUP8 SWAP5 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2D37 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP6 SSTORE PUSH2 0x2CE4 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2D2A JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x2D06 JUMP JUMPDEST PUSH2 0x2D93 SWAP1 DUP6 DUP10 MSTORE PUSH1 0x20 DUP10 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2CAF JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x2D86 JUMP JUMPDEST PUSH1 0xB DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP4 DUP3 ADD JUMPDEST DUP2 DUP4 ADD DUP2 LT PUSH2 0x2DC2 JUMPI POP POP PUSH2 0x2B01 JUMP JUMPDEST DUP1 DUP7 PUSH2 0x2DD0 PUSH1 0x1 SWAP4 SLOAD PUSH2 0x3539 JUMP JUMPDEST DUP1 PUSH2 0x2DDE JUMPI JUMPDEST POP POP ADD PUSH2 0x2DB2 JUMP JUMPDEST PUSH1 0x1F DUP2 GT DUP5 EQ PUSH2 0x2DF3 JUMPI POP DUP2 SSTORE JUMPDEST DUP7 CODESIZE PUSH2 0x2DD6 JUMP JUMPDEST DUP3 DUP3 MSTORE PUSH2 0x2E0E PUSH1 0x1F PUSH1 0x20 DUP5 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD DUP6 DUP4 ADD PUSH2 0x3A28 JUMP JUMPDEST DUP2 DUP4 SSTORE SSTORE PUSH2 0x2DEC JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2A79 JUMP JUMPDEST SWAP3 POP PUSH1 0x3 DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP5 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x2E76 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2E5D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 DUP5 ADD SSTORE PUSH2 0x2A91 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2E4D JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2E32 JUMP JUMPDEST PUSH2 0x2EBE SWAP1 PUSH1 0x3 DUP9 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2A63 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2A1D JUMP JUMPDEST SWAP3 POP PUSH1 0x2 DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP5 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x2F23 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2F0A JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x2 DUP5 ADD SSTORE PUSH2 0x2A35 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2EFA JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2EDF JUMP JUMPDEST PUSH2 0x2F6B SWAP1 PUSH1 0x2 DUP9 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x2A07 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x29C1 JUMP JUMPDEST SWAP3 POP PUSH1 0x1 DUP7 ADD DUP5 MSTORE PUSH1 0x20 DUP5 KECCAK256 SWAP1 DUP5 SWAP4 JUMPDEST PUSH1 0x1F NOT DUP5 AND DUP6 LT PUSH2 0x2FD0 JUMPI PUSH1 0x1 SWAP5 POP DUP4 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x2FB7 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x1 DUP5 ADD SSTORE PUSH2 0x29D9 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2FA7 JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2F8C JUMP JUMPDEST PUSH2 0x3018 SWAP1 PUSH1 0x1 DUP9 ADD DUP7 MSTORE PUSH1 0x20 DUP7 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x2D99 JUMPI PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3A28 JUMP JUMPDEST CODESIZE PUSH2 0x29AB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206D757374206861766520 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x6174206C65617374206F6E65207072697A65 PUSH1 0x70 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20656E642064617465206D PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7573742062652061667465722073746172742064617465000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2073746172742064617465 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x206D75737420626520696E2074686520667574757265 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A207469636B657420616D6F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x756E74206D7573742062652067726561746572207468616E2030000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206861726420636170206D PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7573742062652067726561746572207468616E20736F66742063617000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20736F667420636170206D PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0x7573742062652067726561746572207468616E203 PUSH1 0x5C SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206E616D652063616E6E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x7420626520656D707479 PUSH1 0xB0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 MSTORE PUSH1 0x20 DUP4 DUP2 MSTORE PUSH1 0x40 DUP1 DUP6 KECCAK256 CALLER DUP7 MSTORE SWAP1 SWAP2 MSTORE DUP4 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2860 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 CALLDATALOAD GT PUSH2 0x3353 JUMPI PUSH1 0x20 DUP1 PUSH1 0x24 SWAP3 PUSH2 0x3346 CALLDATASIZE DUP6 DUP9 CALLDATALOAD PUSH2 0x104 CALLDATALOAD ADD ADD PUSH2 0x34CC JUMP JUMPDEST DUP2 MSTORE ADD SWAP4 ADD SWAP3 SWAP1 POP PUSH2 0x281D JUMP JUMPDEST DUP6 DUP1 REVERT JUMPDEST DUP5 DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x5ED JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x5ED JUMPI PUSH1 0x40 PUSH1 0xC0 SWAP2 PUSH2 0x337A PUSH2 0x3432 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 DUP3 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0xFF PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x4 PUSH1 0x3 DUP5 ADD SLOAD SWAP4 ADD SLOAD SWAP4 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE PUSH1 0x20 DUP7 ADD MSTORE DUP2 DUP2 AND ISZERO ISZERO PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x8 SHR AND ISZERO ISZERO PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x708 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x708 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x1192 JUMPI PUSH1 0x20 SWAP3 POP PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x3421 JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x341A JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x969 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x969 JUMPI JUMP JUMPDEST PUSH2 0x260 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x347A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x347A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x347A JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x969 JUMPI DUP1 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x347A JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH2 0x3500 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH2 0x34AB JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x969 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x347A JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x3569 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x3553 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x3548 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x3587 DUP5 PUSH2 0x3539 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x35F6 JUMPI POP PUSH1 0x1 EQ PUSH2 0x35B3 JUMPI JUMPDEST POP POP PUSH2 0x35B1 SWAP3 POP SUB DUP4 PUSH2 0x34AB JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x35DE JUMPI POP POP PUSH2 0x35B1 SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x35A3 JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x35C6 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x35B1 SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x35A3 JUMP JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x3645 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x3624 JUMP JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x3666 JUMPI MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 SWAP1 PUSH1 0x3 NOT ADD SLT PUSH2 0x969 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x36AA JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 DUP2 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP1 SWAP4 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x36E0 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x36D2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xAD3228B676F7D3CD4284A5443F17F1962B36E491B30A40B2405849E597BA5FB5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x3737 JUMPI POP JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0xE2517D3F PUSH1 0xE0 SHL DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x3737 JUMPI POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x7D7FFB7A348E1C6A02869081A26547B49160DD3DF72D1D75A570EB9B698292EC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xFF AND PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND ISZERO PUSH1 0x0 EQ PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH32 0x7D7FFB7A348E1C6A02869081A26547B49160DD3DF72D1D75A570EB9B698292EC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3DA6 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH1 0x0 EQ PUSH2 0x3816 JUMPI DUP1 DUP4 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 PUSH1 0x1 SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x39A9 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A206F70657261746F722072 PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1BDB19481C995C5D5A5C9959 PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x3A12 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x3A33 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3A28 JUMP JUMPDEST ISZERO PUSH2 0x3A46 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2063616D706169676E2064 PUSH1 0x44 DUP3 ADD MSTORE PUSH13 0x1BD95CC81B9BDD08195E1A5CDD PUSH1 0x9A SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3AA8 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x6F7420616374697665 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3AF4 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A20746F6B656E7320616C72 PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1958591E48189D5C9B9959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x3B54 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2B PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3D66 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE PUSH11 0x1BDD08199A5B9A5CDA1959 PUSH1 0xAA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x3BA5 JUMPI MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x3A12 JUMPI JUMP JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x969 JUMPI MLOAD DUP1 ISZERO ISZERO DUP2 SUB PUSH2 0x969 JUMPI SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x36AA JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP6 KECCAK256 SWAP1 DUP6 PUSH1 0xA DUP8 SWAP4 ADD SLOAD SWAP3 JUMPDEST DUP4 DUP2 LT PUSH2 0x3C3B JUMPI POP POP POP SWAP1 DUP5 MSTORE POP PUSH1 0x7 DUP2 MSTORE DUP2 DUP4 KECCAK256 DUP4 DUP1 MSTORE SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST DUP5 DUP9 MSTORE PUSH1 0x7 DUP7 MSTORE DUP7 DUP9 KECCAK256 DUP2 DUP10 MSTORE DUP7 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 DUP10 KECCAK256 SLOAD AND DUP6 DUP10 MSTORE PUSH1 0x5 DUP8 MSTORE DUP8 DUP10 KECCAK256 DUP2 DUP11 MSTORE DUP8 MSTORE DUP8 DUP10 KECCAK256 PUSH1 0xFF PUSH1 0x2 DUP3 ADD SLOAD AND PUSH2 0x3C85 JUMPI JUMPDEST POP POP PUSH2 0x3C80 SWAP1 PUSH2 0x3A03 JUMP JUMPDEST PUSH2 0x3C12 JUMP JUMPDEST SWAP3 PUSH1 0x1 PUSH2 0x3C95 SWAP3 SWAP5 ADD SLOAD SWAP1 PUSH2 0x3BBB JUMP JUMPDEST SWAP2 DUP3 DUP5 LT PUSH2 0x3CA3 JUMPI DUP1 PUSH2 0x3C75 JUMP JUMPDEST SWAP8 POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x3CE4 JUMPI POP POP POP PUSH2 0x35B1 SWAP3 POP SUB DUP4 PUSH2 0x34AB JUMP JUMPDEST DUP6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x3CCE JUMP JUMPDEST ISZERO PUSH2 0x3D0E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537175647943616D706169676E4D616E616765723A2061646D696E20726F6C65 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x81C995C5D5A5C9959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID MSTORE8 PUSH18 0x75647943616D706169676E4D616E61676572 GASPRICE KECCAK256 PUSH4 0x616D7061 PUSH10 0x676E206E97667070C54E CALL DUP3 0xB0 CREATE2 DUP6 DUP12 SUB 0x4B 0xEA 0xC1 0xB6 RETURN ADDMOD SWAP11 LOG2 0xD3 XOR DUP12 0xB1 0xE8 SWAP3 SWAP16 0x4F 0xA9 0xB9 0x29 LOG4 SWAP9 SMOD KECCAK256 0x5C 0xE4 0xD3 SSTORE MULMOD 0x2E CREATE2 0xA8 LOG1 DUP16 JUMP 0xE8 SWAP2 EXTCODECOPY DELEGATECALL LOG2 ADD 0xFB 0xE2 DUP8 DUP3 JUMPDEST MULMOD JUMP SWAP4 0xC2 OR PUSH22 0xA264697066735822122087E87B61ABA1C117EFCA5B8A 0xB9 SELFBALANCE 0x2A BYTE 0xCB SWAP16 ADDRESS 0x4B SWAP2 0xED PUSH32 0x697C41BAD84D8BB54064736F6C63430008140033000000000000000000000000 ","sourceMap":"579:22323:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2702:7:12;579:22323:17;1899:1:12;579:22323:17;;2702:18:12;2698:86;;1899:1;579:22323:17;;;;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;;4341:28;579:22323;;;4341:28;579:22323;;;;;;;;4341:53;4333:124;4341:53;;4333:124;:::i;:::-;579:22323;;;;;;;;;13232:10;;;579:22323;;13325:21;;;579:22323;13316:30;;;;;:::i;:::-;579:22323;;13453:22;;;:31;579:22323;;;13453:31;:::i;:::-;579:22323;13488:16;;579:22323;-1:-1:-1;579:22323:17;;;;;;;;;;;13693:10;579:22323;;;;;;;;;;;;;;;;;;;;13789:29;;13785:605;13789:29;;;579:22323;;;;;;13912:23;;;;579:22323;;13986:15;13963:20;;579:22323;;;;13325:21;579:22323;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;:::i;:::-;;;;;;13693:10;;579:22323;;;;;;;;;;;;;;;;;;13453:22;579:22323;;;;;14122:25;;;579:22323;;;;;;;;;;13693:10;579:22323;;;;;;;;;14175:27;579:22323;;14175:27;:::i;:::-;579:22323;;13785:605;14408:32;579:22323;;;14408:32;:::i;:::-;579:22323;;14471:15;14450:18;;;;;579:22323;;;-1:-1:-1;;;14562:58:17;;13693:10;579:22323;14562:58;;579:22323;14606:4;579:22323;;;;;;;;;;;;;;;14562:10;-1:-1:-1;;;;;579:22323:17;14562:58;;;;;;;;;;;13785:605;579:22323;;;;;;;;;;;;14709:55;579:22323;13693:10;14709:55;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;14562:58;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;579:22323;;1147:6;579:22323;;1147:6;;;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;13785:605;14293:34;;;;:::i;:::-;579:22323;;14341:23;:38;579:22323;;;14341:38;:::i;:::-;579:22323;;13785:605;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;2698:86:12;579:22323:17;;-1:-1:-1;;;2743:30:12;;579:22323:17;;2743:30:12;579:22323:17;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;;8576:15;;;579:22323;;;;;;;;;;;8576:40;8568:111;579:22323;8716:21;8576:40;;8568:111;:::i;:::-;579:22323;;;;;;8747:18;8768:15;8747:18;;579:22323;8807:26;;;;579:22323;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;-1:-1:-1;579:22323:17;;;;;;;;;;3947:69;;579:22323;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;:::i;:::-;;;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;16117:12;579:22323;;;;;;;;;;;;;;;;;;;;16164:28;;:62;;;;579:22323;;;;;;;;;;16164:62;579:22323;16196:30;;;;579:22323;;16164:62;;;579:22323;;;;;;;-1:-1:-1;;579:22323:17;;;;4723:26:2;579:22323:17;;;;:::i;:::-;;;;;;;;2484:4:2;579:22323:17;;;;3877:22:2;579:22323:17;2484:4:2;:::i;:::-;4723:26;:::i;:::-;;579:22323:17;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;;;3820:10;579:22323;;;;3792:85;579:22323;;;;;;3792:85;:::i;:::-;-1:-1:-1;;;;;579:22323:17;;;;22632:10;579:22323;22615:28;;579:22323;;;;-1:-1:-1;;;22725:38:17;;22757:4;579:22323;22725:38;;579:22323;;22725:38;579:22323;;;22725:38;;;;;;;;;;;;579:22323;22781:11;;;579:22323;;;;-1:-1:-1;;;22858:35:17;;-1:-1:-1;;;;;579:22323:17;;;;;22858:35;;579:22323;;;;;;;;;;;;;;;;;;22858:35;;;;;;;;579:22323;;;22858:35;;;;;;-1:-1:-1;22858:35:17;;;;;;:::i;:::-;;;;579:22323;;;22858:35;579:22323;;1147:6;579:22323;;1147:6;;;;579:22323;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;22725:38;;;;;;;;;;;;;;;;;:::i;:::-;;;1147:6;;;;;22725:38;;;;1147:6;579:22323;;;22725:38;;;;;;579:22323;;1147:6;579:22323;;1147:6;;;;579:22323;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;15096:12;579:22323;;;;;;-1:-1:-1;;;;;579:22323:17;;;-1:-1:-1;579:22323:17;;;;;;;;;15096:47;579:22323;;;;;15096:12;579:22323;;;;;;;;;;;15228:49;579:22323;;;15228:49;579:22323;;;;;;;15096:12;579:22323;;;;;;;;;;15228:49;579:22323;;;15370:49;579:22323;;;;;;;;;15450:38;;;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;-1:-1:-1;579:22323:17;;;;;;;;;;3947:69;;579:22323;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;;;;9776:15;;;;579:22323;;;;;;;;;;;;;;9776:40;;:84;;;;;579:22323;;;;;9970:16;;;579:22323;9951:15;:35;579:22323;;;;;;;;;;;10122:18;9951:15;10122:18;;579:22323;10182:26;;;;579:22323;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;9776:84;9839:21;9820:40;;;9776:84;;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;-1:-1:-1;579:22323:17;;;;;;;;;;3947:69;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;;;;9106:15;;;;579:22323;;;;;;;;;;;;;9125:21;9106:40;579:22323;;9245:16;;;579:22323;9227:15;:34;579:22323;;;;8237:21;579:22323;;;;;;;9391:18;9227:15;9391:18;;579:22323;9451:27;;;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;-1:-1:-1;579:22323:17;;;;;;;;;;3947:69;;579:22323;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;20999:20;579:22323;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;4542:111;579:22323;4551:37;579:22323;;;4551:37;579:22323;;;;4550:38;4542:111;:::i;:::-;579:22323;;;;;;;;;11468:15;4551:37;11468:15;;579:22323;;;;;;;;;;;;11460:115;11468:42;;11460:115;:::i;:::-;11593:16;;;579:22323;11593:27;579:22323;;11702:22;;;579:22323;;11702:26;;579:22323;;;;11842:10;-1:-1:-1;;;;;579:22323:17;;11842:58;;;;;579:22323;;-1:-1:-1;;;11842:58:17;;11870:4;579:22323;11842:58;;579:22323;;;;;;;;;;;;;;;;;;11842:58;;;;;;;;579:22323;;12075:48;579:22323;;;;;;;;;;;;11960:20;;;;;579:22323;12015:18;12036:15;12015:18;;579:22323;;;;;;12075:48;579:22323;;11842:58;-1:-1:-1;;;;;579:22323:17;;;;;;12075:48;11842:58;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;11842:58;579:22323;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;579:22323;;;;;;;;;3947:69;;579:22323;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;:::i;:::-;2484:4:2;;:::i;:::-;-1:-1:-1;;;;;579:22323:17;;;12274:19;;579:22323;;12351:29;;;:::i;:::-;;12395:17;;;;579:22323;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;:::i;:::-;;;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;15755:12;579:22323;;;;;;;;;;;;;;;;;15755:42;579:22323;;;;;;;;;;;;;;;;;:::i;:::-;;;;1508:73;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1796:7:11;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3820:10;579:22323;;;;3792:85;579:22323;;;;;;3792:85;:::i;:::-;1796:7:11;579:22323:17;;;;1939:61:11;;2408:4;579:22323:17;;;;;1796:7:11;579:22323:17;2427:20:11;579:22323:17;;;3820:10;579:22323;;2427:20:11;579:22323:17;;1939:61:11;579:22323:17;;-1:-1:-1;;;1974:15:11;;579:22323:17;;1974:15:11;579:22323:17;;;;;;;;;;;;;;;1209:39;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21402:17;;;;;579:22323;;;21555:1;21543:13;;21558:19;;;;;;;579:22323;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;-1:-1:-1;;579:22323:17;;;;21820:17;21861:13;;21876:19;;;;;;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21897:3;579:22323;;;;;;;;;;;;;;21602:19;579:22323;;;21920:19;579:22323;;;;;;;;;;;21920:29;;21916:110;;21897:3;;;;:::i;:::-;21861:13;;;;;;;;;21916:110;21969:17;22004:7;21969:17;;;21897:3;21969:17;;;:::i;:::-;579:22323;22004:7;:::i;:::-;21916:110;;;;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;21579:3;579:22323;;;;;;;;;;;;;;21602:19;579:22323;;;21602:19;579:22323;;;;;;;;;;;21602:29;;21598:75;;21579:3;;;;:::i;:::-;21543:13;;;;;;;;;21598:75;21651:7;;21579:3;21651:7;;:::i;:::-;21598:75;;;;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3820:10;579:22323;;;;3792:85;579:22323;;;;;;3792:85;:::i;:::-;1796:7:11;579:22323:17;;;;2140:9:11;2136:62;;579:22323:17;;;1796:7:11;579:22323:17;2674:22:11;579:22323:17;;;3820:10;579:22323;;2674:22:11;579:22323:17;;2136:62:11;579:22323:17;;-1:-1:-1;;;2172:15:11;;579:22323:17;;2172:15:11;579:22323:17;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;;;7969:15;;;;579:22323;;;;;;;;;;;;;;;8111:18;;;579:22323;8092:15;:37;579:22323;;;8237:21;579:22323;;;;;;;8268:18;8092:15;8268:18;;579:22323;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;579:22323;;;;;;;;;3947:69;;579:22323;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;;;;;4542:111;579:22323;4551:37;579:22323;;;4551:37;579:22323;;;;4550:38;4542:111;:::i;:::-;579:22323;;;;;;;;;;4551:37;10540:15;;579:22323;;;;;;;;10540:42;10532:115;579:22323;10665:25;10540:42;;10532:115;:::i;:::-;10665:25;579:22323;10665:29;;;579:22323;;;;-1:-1:-1;;;10844:238:17;;10888:8;579:22323;10844:238;;579:22323;10910:15;-1:-1:-1;;;;;1147:6:17;;;;;579:22323;1147:6;;;;;;;;;1095:1;;;;;1147:6;;;;579:22323;;1147:6;579:22323;;10844:11;-1:-1:-1;;;;;579:22323:17;10844:238;;;;;;;;;;579:22323;;;;;;;;;;;;;10844:238;;;;;;;;;;;;;;;:::i;:::-;;;1147:6;;;;579:22323;1147:6;;10844:238;;;;;;;;579:22323;;1147:6;579:22323;;1147:6;;;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;3970:10;579:22323;;;;;;;;;3947:69;;579:22323;;;;;;;-1:-1:-1;;579:22323:17;;;;;;:::i;:::-;735:10:10;-1:-1:-1;;;;;579:22323:17;;5397:34:2;5393:102;;5505:37;579:22323:17;;;5505:37:2;:::i;5393:102::-;579:22323:17;;-1:-1:-1;;;5454:30:2;;579:22323:17;;5454:30:2;579:22323:17;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4164:87;579:22323;;;;4172:29;;4164:87;:::i;:::-;579:22323;;20708:12;579:22323;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;1445:57;579:22323;;;;;;;;1445:57;;;;;579:22323;1445:57;;;;:::i;:::-;579:22323;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;4306:25:2;579:22323:17;;;;:::i;:::-;;;;;;;;2484:4:2;579:22323:17;;;;3877:22:2;579:22323:17;2484:4:2;:::i;:::-;4306:25;:::i;579:22323:17:-;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;3877:22:2;579:22323:17;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6731:14:1;-1:-1:-1;;;;;579:22323:17;;-1:-1:-1;6717:10:1;:28;;;6713:109;;579:22323:17;;;;;16534:11;579:22323;;;;;;16574:15;;;579:22323;;;;;;;;;;;;16720:15;;;579:22323;;;;;;;;;16712:115;16720:42;;16712:115;:::i;:::-;579:22323;;;;;;;;;17509:24;;17543:32;;17656:13;17675:25;;;;579:22323;17651:352;17671:29;;;;;;18029:16;;;;;579:22323;;18184:15;;579:22323;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;;579:22323:17;;;:::i;:::-;;;;;;;18279:27;18330:13;;18402:3;579:22323;;18345:22;;:55;;;18402:3;18345:55;;;18512:45;18444:29;:14;;;;;:::i;:::-;579:22323;18444:29;:::i;:::-;18512:45;;:::i;:::-;18641:28;18688:13;18703:19;;;;;;18683:202;18915:16;;18911:292;;18683:202;18402:3;;;;:::i;:::-;18330:13;;18911:292;579:22323;;18402:3;;19171:17;;579:22323;-1:-1:-1;;;;;579:22323:17;;18951:41;579:22323;;18951:41;:::i;:::-;579:22323;;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;17869:20;19010:49;579:22323;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;19084:51;579:22323;;;19171:17;:::i;:::-;18911:292;;;;18724:3;-1:-1:-1;;;;;579:22323:17;;;;18751:10;579:22323;;18751:10;:::i;:::-;579:22323;;18751:28;18747:124;;18724:3;;;:::i;:::-;18688:13;;18747:124;18803:22;;579:22323;18847:5;;;18345:55;;;;;16990:16;;;579:22323;;;-1:-1:-1;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;18325:888;579:22323;;;;;;;;;;;;;;;;;;;17147:56;579:22323;;;;;17026:30;;;579:22323;17087:18;17108:15;17087:18;;579:22323;;;;;;;;;;;;;;:::i;:::-;;;;;;;17147:56;;;579:22323;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;18345:55;18371:29;;;;18345:55;;579:22323;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;17702:3;579:22323;;;17743:18;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17869:20;;;579:22323;;17865:128;;17702:3;;;;;:::i;:::-;17656:13;;17865:128;17909:29;17702:3;17925:13;;;579:22323;17956:22;17925:13;;579:22323;17909:29;;:::i;:::-;17956:22;;:::i;:::-;17865:128;;;;579:22323;-1:-1:-1;;;579:22323:17;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;6713:109:1;579:22323:17;;;;6762:53:1;;;;;;6717:10;579:22323:17;6762:53:1;;579:22323:17;;;;;6762:53:1;579:22323:17;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;1620:46;579:22323;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;:::i;:::-;2484:4:2;;:::i;:::-;-1:-1:-1;;;;;579:22323:17;;;12575:10;12566:19;;579:22323;;12640:30;;;:::i;:::-;;12685:19;;;;579:22323;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;1317:45;579:22323;1317:45;;;:::i;:::-;;;;;;;:::i;:::-;;;579:22323;1317:45;;;:::i;:::-;;579:22323;1317:45;;579:22323;1317:45;;;;579:22323;1317:45;;;579:22323;1317:45;;;579:22323;1317:45;;;579:22323;1317:45;;;;579:22323;1317:45;;;;579:22323;1317:45;;;;579:22323;1317:45;;;;579:22323;1317:45;;;;579:22323;1317:45;;;;579:22323;1317:45;;;579:22323;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1317:45;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;:::i;:::-;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;;;579:22323;3939:143;;;:::i;:::-;579:22323;;6139:22;579:22323;;;;6226:11;579:22323;;;;;;6313:17;579:22323;;;;;6413:16;579:22323;;6522:15;579:22323;;6510:27;579:22323;;;;;;;6614:19;579:22323;;;;;6711:17;579:22323;;6802:14;579:22323;;6802:14;:::i;:::-;579:22323;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;6902:671;579:22323;6902:671;;579:22323;;6902:671;;579:22323;;6902:671;;579:22323;;;;6902:671;;579:22323;;;;6902:671;;579:22323;;;;6902:671;;579:22323;6902:671;579:22323;6902:671;;579:22323;;;;6902:671;;579:22323;;;;6902:671;;579:22323;6902:671;;;;579:22323;6902:671;;;579:22323;6902:671;;;579:22323;6902:671;;;;579:22323;6902:671;;;;579:22323;6902:671;;;;579:22323;6902:671;;;;579:22323;6522:15;6902:671;;;579:22323;6522:15;6902:671;;;579:22323;;;;;;;;;;;;;;;;6902:671;;579:22323;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6902:671;;579:22323;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6902:671;;579:22323;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6902:671;;579:22323;;;;;;6902:671;;579:22323;;;;;;6902:671;;579:22323;;;;;;6902:671;;579:22323;;;;;;6902:671;;579:22323;;;;;;6902:671;;579:22323;;;;;6902:671;;;579:22323;;;;;6902:671;;;579:22323;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6902:671;;;;;;;579:22323;;;;-1:-1:-1;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;6902:671:17;;;579:22323;;;;;;;;;;;;;;;;6902:671;7597:67;579:22323;;;;;;;;;6902:671;;;579:22323;;;;;;;;;;;;;;;;6902:671;;;579:22323;;;;;6902:671;;;579:22323;;;;;6902:671;;;579:22323;;;;;6902:671;579:22323;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;7597:67;;;579:22323;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;3947:69;-1:-1:-1;;;;;;;;;;;;579:22323:17;;;;;;;;;;3970:10;579:22323;;;;;;;;;;3947:69;;579:22323;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;:::i;:::-;;;;;1368:71;579:22323;;;;;;;;;;;;;;;;;;;1368:71;579:22323;1368:71;;579:22323;1368:71;579:22323;1368:71;;;579:22323;;;1368:71;;579:22323;1368:71;;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;2649:47:2;;;:87;;;;579:22323:17;;;;;;;2649:87:2;-1:-1:-1;;;829:40:13;;-1:-1:-1;2649:87:2;;;579:22323:17;;;;-1:-1:-1;;;;;579:22323:17;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;579:22323:17;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;:::o;:::-;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;-1:-1:-1;;579:22323:17;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;579:22323:17;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;579:22323:17;;;;-1:-1:-1;579:22323:17;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;579:22323:17;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;579:22323:17;;-1:-1:-1;579:22323:17;;;-1:-1:-1;579:22323:17;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;;;;;;3175:103:2;735:10:10;579:22323:17;;;;;;;;;;;;;3495:23:2;3491:108;;3175:103;:::o;3491:108::-;579:22323:17;;;;3541:47:2;;;;;;735:10:10;3541:47:2;;;579:22323:17;;;;;3541:47:2;3175:103;579:22323:17;2930:6:2;579:22323:17;2930:6:2;579:22323:17;;;2930:6:2;579:22323:17;735:10:10;2930:6:2;579:22323:17;;;;;2930:6:2;579:22323:17;;;3495:23:2;3491:108;;3175:103;:::o;6155:316::-;-1:-1:-1;;;;;579:22323:17;2930:6:2;579:22323:17;;;;;;;;;;2930:6:2;;579:22323:17;-1:-1:-1;;;;;;;;;;;759:23:17;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6346:40:2;735:10:10;6346:40:2;;;579:22323:17;6400:11:2;:::o;6248:217::-;6442:12;;;:::o;6155:316::-;;2930:6;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6252:23:2;6248:217;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6346:40:2;735:10:10;6346:40:2;;;579:22323:17;6400:11:2;:::o;6708:317::-;-1:-1:-1;;;;;579:22323:17;2930:6:2;579:22323:17;;;;;;;;;;2930:6:2;;579:22323:17;-1:-1:-1;;;;;;;;;;;759:23:17;579:22323;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6900:40:2;735:10:10;6900:40:2;;;579:22323:17;6954:11:2;:::o;6708:317::-;;2930:6;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6802:217:2;579:22323:17;;;;;;;;;;;;;;;;;;;;;;;;;;;6900:40:2;735:10:10;6900:40:2;;;579:22323:17;6954:11:2;:::o;579:22323:17:-;;;;:::o;:::-;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;-1:-1:-1;;579:22323:17;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;579:22323:17;;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;19340:816::-;;-1:-1:-1;579:22323:17;;;;;;19513:9;579:22323;;;;;;;19544:25;;19612;19593:13;19612:25;;579:22323;19588:436;19608:29;;;;;;-1:-1:-1;;;579:22323:17;;;-1:-1:-1;19680:18:17;579:22323;;;;;;;;;;;;;-1:-1:-1;;;;;579:22323:17;;19340:816::o;19639:3::-;579:22323;;;19680:18;579:22323;;;;;;;;;;;;;;;;;;;;;;;19751:12;579:22323;;;;;;;;;;;;;;19819:20;;;579:22323;;19815:199;;19639:3;;;;;;:::i;:::-;19593:13;;19815:199;19876:13;579:22323;19859:30;19876:13;;;579:22323;19859:30;;:::i;:::-;;;19911:28;;19907:93;;19815:199;;;19907:93;19963:18;;;;;;;;;;:::o;579:22323::-;;;;;;;;;;;;;;;;;;-1:-1:-1;579:22323:17;;-1:-1:-1;579:22323:17;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;579:22323:17;;;;;;;;;;-1:-1:-1;579:22323:17;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;579:22323:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;579:22323:17;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"3173400","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"727","DEFAULT_ADMIN_ROLE()":"807","OPERATOR_ROLE()":"991","activateCampaign(uint256)":"infinite","addAdmin(address)":"32642","burnAllTokens(uint256)":"infinite","campaignParticipants(uint256,uint256)":"6957","campaigns(uint256)":"infinite","closeCampaign(uint256)":"infinite","confirmSocialTasks(uint256,address)":"infinite","createCampaign(string,string,string,uint256,uint256,uint256,uint256,uint256,string[])":"infinite","emergencyPause()":"infinite","emergencyRecoverTokens(address,address)":"infinite","emergencyUnpause()":"infinite","getCampaign(uint256)":"infinite","getCampaignCount()":"2753","getCampaignParticipants(uint256)":"infinite","getCampaignsByStatus(uint8)":"infinite","getParticipant(uint256,address)":"infinite","getRoleAdmin(bytes32)":"2495","getTicketCount(uint256,address)":"5172","grantRole(bytes32,address)":"33406","hasRole(bytes32,address)":"3095","isEligibleForWinning(uint256,address)":"7620","participantIndexes(uint256,uint256)":"2901","participants(uint256,address)":"11067","pauseCampaign(uint256)":"infinite","paused()":"2699","rawFulfillRandomWords(uint256,uint256[])":"infinite","removeAdmin(address)":"32223","renounceRole(bytes32,address)":"29054","resumeCampaign(uint256)":"infinite","revokeRole(bytes32,address)":"33947","selectWinners(uint256)":"infinite","squdyToken()":"infinite","stakeSQUDY(uint256,uint256)":"infinite","supportsInterface(bytes4)":"283","vrfRequests(uint256)":"2445"},"internal":{"_findWinnerByTicket(uint256,uint256)":"infinite","_selectWinners(uint256,uint256[] memory)":"infinite","fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","DEFAULT_ADMIN_ROLE()":"a217fddf","OPERATOR_ROLE()":"f5b541a6","activateCampaign(uint256)":"493f1726","addAdmin(address)":"70480275","burnAllTokens(uint256)":"8c0c5902","campaignParticipants(uint256,uint256)":"35abd49b","campaigns(uint256)":"141961bc","closeCampaign(uint256)":"b0e1c1e1","confirmSocialTasks(uint256,address)":"b5801d91","createCampaign(string,string,string,uint256,uint256,uint256,uint256,uint256,string[])":"03463dd9","emergencyPause()":"51858e27","emergencyRecoverTokens(address,address)":"b7e26a2e","emergencyUnpause()":"4a4e3bd5","getCampaign(uint256)":"5598f8cc","getCampaignCount()":"6caa9218","getCampaignParticipants(uint256)":"8c6ab238","getCampaignsByStatus(uint8)":"4e182157","getParticipant(uint256,address)":"35f3ad7a","getRoleAdmin(bytes32)":"248a9ca3","getTicketCount(uint256,address)":"6a14dffd","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isEligibleForWinning(uint256,address)":"da8125fb","participantIndexes(uint256,uint256)":"5e3583f5","participants(uint256,address)":"02e060c6","pauseCampaign(uint256)":"de99347a","paused()":"5c975abb","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3","removeAdmin(address)":"1785f53c","renounceRole(bytes32,address)":"36568abe","resumeCampaign(uint256)":"9e3696d9","revokeRole(bytes32,address)":"d547741f","selectWinners(uint256)":"39a2eb2a","squdyToken()":"4eb53f99","stakeSQUDY(uint256,uint256)":"f8ec73d1","supportsInterface(bytes4)":"01ffc9a7","vrfRequests(uint256)":"1a1d9252"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_squdyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"CampaignResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prizeIndex\",\"type\":\"uint256\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"SocialTasksCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tickets\",\"type\":\"uint256\"}],\"name\":\"UserStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"WinnersSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"activateCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"burnAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaignParticipants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"campaigns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"enum SqudyCampaignManager.CampaignStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tokensAreBurned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winnerSelectionTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"closeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"confirmSocialTasks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"prizes\",\"type\":\"string[]\"}],\"name\":\"createCampaign\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyRecoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaign\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"participantCount\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"prizes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"internalType\":\"enum SqudyCampaignManager.CampaignStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"tokensAreBurned\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalBurned\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"winnerSelectionTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"createdAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SqudyCampaignManager.Campaign\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCampaignCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"getCampaignParticipants\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SqudyCampaignManager.CampaignStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"getCampaignsByStatus\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getParticipant\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCompletedSocial\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"prizeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinedAt\",\"type\":\"uint256\"}],\"internalType\":\"struct SqudyCampaignManager.Participant\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isEligibleForWinning\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantIndexes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasCompletedSocial\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isWinner\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"prizeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinedAt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"pauseCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"resumeCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"}],\"name\":\"selectWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squdyToken\",\"outputs\":[{\"internalType\":\"contract ISqudyToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"campaignId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeSQUDY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Squdy Team\",\"details\":\"Manages burn-to-win campaigns for SQUDY tokens\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted to signal this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call. This account bears the admin role (for the granted role). Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"activateCampaign(uint256)\":{\"details\":\"Activates a pending campaign\"},\"addAdmin(address)\":{\"details\":\"Adds a new admin\"},\"burnAllTokens(uint256)\":{\"details\":\"Burns all staked tokens after winner selection\"},\"closeCampaign(uint256)\":{\"details\":\"Closes a campaign and prepares for winner selection\"},\"confirmSocialTasks(uint256,address)\":{\"details\":\"Marks social media tasks as completed for a user\",\"params\":{\"campaignId\":\"The campaign ID\",\"user\":\"The user address\"}},\"createCampaign(string,string,string,uint256,uint256,uint256,uint256,uint256,string[])\":{\"details\":\"Creates a new campaign\",\"params\":{\"description\":\"Campaign description\",\"endDate\":\"Campaign end timestamp\",\"hardCap\":\"Maximum amount of tokens that can be staked\",\"imageUrl\":\"Campaign image URL\",\"name\":\"Campaign name\",\"prizes\":\"Array of prize descriptions\",\"softCap\":\"Minimum amount of tokens required\",\"startDate\":\"Campaign start timestamp\",\"ticketAmount\":\"Amount of tokens per ticket\"}},\"emergencyPause()\":{\"details\":\"Emergency pause function\"},\"emergencyRecoverTokens(address,address)\":{\"details\":\"Emergency function to recover tokens (only if not burned)\"},\"emergencyUnpause()\":{\"details\":\"Emergency unpause function\"},\"getCampaign(uint256)\":{\"details\":\"Gets campaign details\"},\"getCampaignCount()\":{\"details\":\"Gets total number of campaigns\"},\"getCampaignParticipants(uint256)\":{\"details\":\"Gets all participants for a campaign\"},\"getCampaignsByStatus(uint8)\":{\"details\":\"Gets campaigns by status\"},\"getParticipant(uint256,address)\":{\"details\":\"Gets participant details\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTicketCount(uint256,address)\":{\"details\":\"Gets the ticket count for a user in a campaign\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isEligibleForWinning(uint256,address)\":{\"details\":\"Checks if a user is eligible for winning (has completed social tasks)\"},\"pauseCampaign(uint256)\":{\"details\":\"Pauses an active campaign\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeAdmin(address)\":{\"details\":\"Removes an admin\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"resumeCampaign(uint256)\":{\"details\":\"Resumes a paused campaign\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"selectWinners(uint256)\":{\"details\":\"Initiates winner selection using Chainlink VRF\"},\"stakeSQUDY(uint256,uint256)\":{\"details\":\"Allows users to stake SQUDY tokens in a campaign\",\"params\":{\"amount\":\"Amount of tokens to stake (must be multiple of ticketAmount)\",\"campaignId\":\"The campaign ID to stake in\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"SqudyCampaignManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SqudyCampaignManager.sol\":\"SqudyCampaignManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1a6b4f6b7798ab80929d491b89d5427a9b3338c0fd1acd0ba325f69c6f1646af\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\\n\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC-165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted to signal this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xbff9f59c84e5337689161ce7641c0ef8e872d6a7536fbc1f5133f128887aba3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdb484371dfbb848cb6f5d70464e9ac9b2900e4164ead76bbce4fef0b44bcc68f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x2d9dc2fe26180f74c11c13663647d38e259e45f95eb88f57b61d2160b0109d3e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"contracts/ISqudyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ISqudyToken\\n * @dev Interface for the SQUDY token contract (BEP-20)\\n */\\ninterface ISqudyToken {\\n    /**\\n     * @dev Returns the name of the token\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals of the token\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the total supply of the token\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the balance of the specified account\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Transfers tokens from the caller to the specified recipient\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the allowance given to spender by owner\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Approves the specified address to spend the specified amount of tokens\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Transfers tokens from one address to another using the allowance mechanism\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Burns tokens from the caller's account\\n     */\\n    function burn(uint256 amount) external;\\n\\n    /**\\n     * @dev Burns tokens from the specified account (requires allowance)\\n     */\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /**\\n     * @dev Emitted when tokens are transferred\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when allowance is set\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Emitted when tokens are burned\\n     */\\n    event Burn(address indexed from, uint256 value);\\n} \",\"keccak256\":\"0xd25ab99dc276d6078a8779b0cfd054f10c983c17abf8b34b4d478b3d5d7dfbb8\",\"license\":\"MIT\"},\"contracts/SqudyCampaignManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"./ISqudyToken.sol\\\";\\n\\n/**\\n * @title SqudyCampaignManager\\n * @dev Manages burn-to-win campaigns for SQUDY tokens\\n * @author Squdy Team\\n */\\ncontract SqudyCampaignManager is AccessControl, ReentrancyGuard, Pausable, VRFConsumerBaseV2 {\\n\\n    // ============ CONSTANTS ============\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    \\n    // Chainlink VRF Configuration\\n    VRFCoordinatorV2Interface private immutable COORDINATOR;\\n    bytes32 private immutable KEY_HASH;\\n    uint64 private immutable SUBSCRIPTION_ID;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant CALLBACK_GAS_LIMIT = 100000;\\n\\n    // ============ STATE VARIABLES ============\\n    ISqudyToken public immutable squdyToken;\\n    uint256 private _campaignIds;\\n    \\n    // Campaign storage\\n    mapping(uint256 => Campaign) public campaigns;\\n    mapping(uint256 => mapping(address => Participant)) public participants;\\n    mapping(uint256 => address[]) public campaignParticipants;\\n    mapping(uint256 => mapping(uint256 => address)) public participantIndexes;\\n    \\n    // VRF request tracking\\n    mapping(uint256 => uint256) public vrfRequests; // requestId => campaignId\\n    \\n    // ============ STRUCTS ============\\n    struct Campaign {\\n        uint256 id;\\n        string name;\\n        string description;\\n        string imageUrl;\\n        uint256 softCap;\\n        uint256 hardCap;\\n        uint256 ticketAmount;\\n        uint256 currentAmount;\\n        uint256 startDate;\\n        uint256 endDate;\\n        uint256 participantCount;\\n        string[] prizes;\\n        address[] winners;\\n        CampaignStatus status;\\n        bool tokensAreBurned;\\n        uint256 totalBurned;\\n        bytes32 winnerSelectionTxHash;\\n        uint256 createdAt;\\n        uint256 updatedAt;\\n    }\\n    \\n    struct Participant {\\n        uint256 stakedAmount;\\n        uint256 ticketCount;\\n        bool hasCompletedSocial;\\n        bool isWinner;\\n        uint256 prizeIndex;\\n        uint256 joinedAt;\\n    }\\n    \\n    enum CampaignStatus {\\n        PENDING,\\n        ACTIVE,\\n        PAUSED,\\n        FINISHED,\\n        BURNED\\n    }\\n\\n    // ============ EVENTS ============\\n    event CampaignCreated(\\n        uint256 indexed campaignId,\\n        string name,\\n        uint256 startDate,\\n        uint256 endDate,\\n        uint256 ticketAmount\\n    );\\n    \\n    event UserStaked(\\n        uint256 indexed campaignId,\\n        address indexed user,\\n        uint256 amount,\\n        uint256 tickets\\n    );\\n    \\n    event SocialTasksCompleted(\\n        uint256 indexed campaignId,\\n        address indexed user\\n    );\\n    \\n    event CampaignPaused(uint256 indexed campaignId);\\n    event CampaignResumed(uint256 indexed campaignId);\\n    event CampaignClosed(uint256 indexed campaignId);\\n    \\n    event WinnersSelected(\\n        uint256 indexed campaignId,\\n        address[] winners,\\n        bytes32 requestId\\n    );\\n    \\n    event TokensBurned(\\n        uint256 indexed campaignId,\\n        uint256 totalBurned\\n    );\\n    \\n    event PrizeClaimed(\\n        uint256 indexed campaignId,\\n        address indexed winner,\\n        uint256 prizeIndex\\n    );\\n    \\n    event AdminAdded(address indexed admin);\\n    event AdminRemoved(address indexed admin);\\n\\n    // ============ MODIFIERS ============\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"SqudyCampaignManager: admin role required\\\");\\n        _;\\n    }\\n    \\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, msg.sender) || hasRole(ADMIN_ROLE, msg.sender), \\n                \\\"SqudyCampaignManager: operator role required\\\");\\n        _;\\n    }\\n    \\n    modifier campaignExists(uint256 campaignId) {\\n        require(campaigns[campaignId].id != 0, \\\"SqudyCampaignManager: campaign does not exist\\\");\\n        _;\\n    }\\n    \\n    modifier campaignActive(uint256 campaignId) {\\n        require(campaigns[campaignId].status == CampaignStatus.ACTIVE, \\n                \\\"SqudyCampaignManager: campaign not active\\\");\\n        _;\\n    }\\n    \\n    modifier campaignNotBurned(uint256 campaignId) {\\n        require(!campaigns[campaignId].tokensAreBurned, \\n                \\\"SqudyCampaignManager: tokens already burned\\\");\\n        _;\\n    }\\n\\n    // ============ CONSTRUCTOR ============\\n    constructor(\\n        address _squdyToken,\\n        address _vrfCoordinator,\\n        bytes32 _keyHash,\\n        uint64 _subscriptionId\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n        squdyToken = ISqudyToken(_squdyToken);\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        KEY_HASH = _keyHash;\\n        SUBSCRIPTION_ID = _subscriptionId;\\n        \\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(ADMIN_ROLE, msg.sender);\\n        _grantRole(OPERATOR_ROLE, msg.sender);\\n    }\\n\\n    // ============ ADMIN FUNCTIONS ============\\n    \\n    /**\\n     * @dev Creates a new campaign\\n     * @param name Campaign name\\n     * @param description Campaign description\\n     * @param imageUrl Campaign image URL\\n     * @param softCap Minimum amount of tokens required\\n     * @param hardCap Maximum amount of tokens that can be staked\\n     * @param ticketAmount Amount of tokens per ticket\\n     * @param startDate Campaign start timestamp\\n     * @param endDate Campaign end timestamp\\n     * @param prizes Array of prize descriptions\\n     */\\n    function createCampaign(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        uint256 softCap,\\n        uint256 hardCap,\\n        uint256 ticketAmount,\\n        uint256 startDate,\\n        uint256 endDate,\\n        string[] memory prizes\\n    ) external onlyOperator returns (uint256) {\\n        require(bytes(name).length > 0, \\\"SqudyCampaignManager: name cannot be empty\\\");\\n        require(softCap > 0, \\\"SqudyCampaignManager: soft cap must be greater than 0\\\");\\n        require(hardCap > softCap, \\\"SqudyCampaignManager: hard cap must be greater than soft cap\\\");\\n        require(ticketAmount > 0, \\\"SqudyCampaignManager: ticket amount must be greater than 0\\\");\\n        require(startDate > block.timestamp, \\\"SqudyCampaignManager: start date must be in the future\\\");\\n        require(endDate > startDate, \\\"SqudyCampaignManager: end date must be after start date\\\");\\n        require(prizes.length > 0, \\\"SqudyCampaignManager: must have at least one prize\\\");\\n        \\n        _campaignIds++;\\n        uint256 campaignId = _campaignIds;\\n        \\n        campaigns[campaignId] = Campaign({\\n            id: campaignId,\\n            name: name,\\n            description: description,\\n            imageUrl: imageUrl,\\n            softCap: softCap,\\n            hardCap: hardCap,\\n            ticketAmount: ticketAmount,\\n            currentAmount: 0,\\n            startDate: startDate,\\n            endDate: endDate,\\n            participantCount: 0,\\n            prizes: prizes,\\n            winners: new address[](0),\\n            status: CampaignStatus.PENDING,\\n            tokensAreBurned: false,\\n            totalBurned: 0,\\n            winnerSelectionTxHash: bytes32(0),\\n            createdAt: block.timestamp,\\n            updatedAt: block.timestamp\\n        });\\n        \\n        emit CampaignCreated(campaignId, name, startDate, endDate, ticketAmount);\\n        return campaignId;\\n    }\\n    \\n    /**\\n     * @dev Activates a pending campaign\\n     */\\n    function activateCampaign(uint256 campaignId) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.PENDING, \\n                \\\"SqudyCampaignManager: campaign not pending\\\");\\n        require(block.timestamp >= campaign.startDate, \\n                \\\"SqudyCampaignManager: campaign not ready to start\\\");\\n        \\n        campaign.status = CampaignStatus.ACTIVE;\\n        campaign.updatedAt = block.timestamp;\\n    }\\n    \\n    /**\\n     * @dev Pauses an active campaign\\n     */\\n    function pauseCampaign(uint256 campaignId) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.ACTIVE, \\n                \\\"SqudyCampaignManager: campaign not active\\\");\\n        \\n        campaign.status = CampaignStatus.PAUSED;\\n        campaign.updatedAt = block.timestamp;\\n        \\n        emit CampaignPaused(campaignId);\\n    }\\n    \\n    /**\\n     * @dev Resumes a paused campaign\\n     */\\n    function resumeCampaign(uint256 campaignId) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.PAUSED, \\n                \\\"SqudyCampaignManager: campaign not paused\\\");\\n        require(block.timestamp < campaign.endDate, \\n                \\\"SqudyCampaignManager: campaign has ended\\\");\\n        \\n        campaign.status = CampaignStatus.ACTIVE;\\n        campaign.updatedAt = block.timestamp;\\n        \\n        emit CampaignResumed(campaignId);\\n    }\\n    \\n    /**\\n     * @dev Closes a campaign and prepares for winner selection\\n     */\\n    function closeCampaign(uint256 campaignId) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.ACTIVE || campaign.status == CampaignStatus.PAUSED, \\n                \\\"SqudyCampaignManager: campaign not active or paused\\\");\\n        require(block.timestamp >= campaign.endDate, \\n                \\\"SqudyCampaignManager: campaign not ended yet\\\");\\n        \\n        campaign.status = CampaignStatus.FINISHED;\\n        campaign.updatedAt = block.timestamp;\\n        \\n        emit CampaignClosed(campaignId);\\n    }\\n    \\n    /**\\n     * @dev Initiates winner selection using Chainlink VRF\\n     */\\n    function selectWinners(uint256 campaignId) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n        campaignNotBurned(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.FINISHED, \\n                \\\"SqudyCampaignManager: campaign not finished\\\");\\n        require(campaign.participantCount > 0, \\n                \\\"SqudyCampaignManager: no participants\\\");\\n        \\n        // Request random number from Chainlink VRF\\n        uint256 requestId = COORDINATOR.requestRandomWords(\\n            KEY_HASH,\\n            SUBSCRIPTION_ID,\\n            REQUEST_CONFIRMATIONS,\\n            CALLBACK_GAS_LIMIT,\\n            uint32(campaign.participantCount) // number of random words needed\\n        );\\n        \\n        vrfRequests[requestId] = campaignId;\\n    }\\n    \\n    /**\\n     * @dev Burns all staked tokens after winner selection\\n     */\\n    function burnAllTokens(uint256 campaignId) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n        campaignNotBurned(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.FINISHED, \\n                \\\"SqudyCampaignManager: campaign not finished\\\");\\n        require(campaign.winners.length > 0, \\n                \\\"SqudyCampaignManager: winners not selected\\\");\\n        require(campaign.currentAmount > 0, \\n                \\\"SqudyCampaignManager: no tokens to burn\\\");\\n        \\n        // Burn all staked tokens\\n        squdyToken.burnFrom(address(this), campaign.currentAmount);\\n        \\n        campaign.tokensAreBurned = true;\\n        campaign.totalBurned = campaign.currentAmount;\\n        campaign.updatedAt = block.timestamp;\\n        \\n        emit TokensBurned(campaignId, campaign.currentAmount);\\n    }\\n    \\n    /**\\n     * @dev Adds a new admin\\n     */\\n    function addAdmin(address admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(admin != address(0), \\\"SqudyCampaignManager: invalid admin address\\\");\\n        _grantRole(ADMIN_ROLE, admin);\\n        emit AdminAdded(admin);\\n    }\\n    \\n    /**\\n     * @dev Removes an admin\\n     */\\n    function removeAdmin(address admin) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(admin != msg.sender, \\\"SqudyCampaignManager: cannot remove self\\\");\\n        _revokeRole(ADMIN_ROLE, admin);\\n        emit AdminRemoved(admin);\\n    }\\n\\n    // ============ USER FUNCTIONS ============\\n    \\n    /**\\n     * @dev Allows users to stake SQUDY tokens in a campaign\\n     * @param campaignId The campaign ID to stake in\\n     * @param amount Amount of tokens to stake (must be multiple of ticketAmount)\\n     */\\n    function stakeSQUDY(uint256 campaignId, uint256 amount) \\n        external \\n        nonReentrant \\n        campaignExists(campaignId) \\n        campaignActive(campaignId) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(amount > 0, \\\"SqudyCampaignManager: amount must be greater than 0\\\");\\n        require(amount % campaign.ticketAmount == 0, \\n                \\\"SqudyCampaignManager: amount must be multiple of ticket amount\\\");\\n        require(campaign.currentAmount + amount <= campaign.hardCap, \\n                \\\"SqudyCampaignManager: would exceed hard cap\\\");\\n        \\n        // Check if user already participated\\n        Participant storage participant = participants[campaignId][msg.sender];\\n        uint256 ticketCount = amount / campaign.ticketAmount;\\n        \\n        if (participant.stakedAmount == 0) {\\n            // New participant\\n            participant.stakedAmount = amount;\\n            participant.ticketCount = ticketCount;\\n            participant.joinedAt = block.timestamp;\\n            \\n            campaignParticipants[campaignId].push(msg.sender);\\n            participantIndexes[campaignId][campaign.participantCount] = msg.sender;\\n            campaign.participantCount++;\\n        } else {\\n            // Existing participant - add to existing stake\\n            participant.stakedAmount += amount;\\n            participant.ticketCount += ticketCount;\\n        }\\n        \\n        campaign.currentAmount += amount;\\n        campaign.updatedAt = block.timestamp;\\n        \\n        // Transfer tokens from user to contract\\n        require(squdyToken.transferFrom(msg.sender, address(this), amount), \\n                \\\"SqudyCampaignManager: token transfer failed\\\");\\n        \\n        emit UserStaked(campaignId, msg.sender, amount, ticketCount);\\n    }\\n    \\n    /**\\n     * @dev Marks social media tasks as completed for a user\\n     * @param campaignId The campaign ID\\n     * @param user The user address\\n     */\\n    function confirmSocialTasks(uint256 campaignId, address user) \\n        external \\n        onlyOperator \\n        campaignExists(campaignId) \\n    {\\n        require(participants[campaignId][user].stakedAmount > 0, \\n                \\\"SqudyCampaignManager: user not participating\\\");\\n        require(!participants[campaignId][user].hasCompletedSocial, \\n                \\\"SqudyCampaignManager: social tasks already completed\\\");\\n        \\n        participants[campaignId][user].hasCompletedSocial = true;\\n        \\n        emit SocialTasksCompleted(campaignId, user);\\n    }\\n    \\n    /**\\n     * @dev Gets the ticket count for a user in a campaign\\n     */\\n    function getTicketCount(uint256 campaignId, address user) \\n        external \\n        view \\n        campaignExists(campaignId) \\n        returns (uint256) \\n    {\\n        return participants[campaignId][user].ticketCount;\\n    }\\n    \\n    /**\\n     * @dev Checks if a user is eligible for winning (has completed social tasks)\\n     */\\n    function isEligibleForWinning(uint256 campaignId, address user) \\n        external \\n        view \\n        campaignExists(campaignId) \\n        returns (bool) \\n    {\\n        Participant storage participant = participants[campaignId][user];\\n        return participant.stakedAmount > 0 && participant.hasCompletedSocial;\\n    }\\n\\n    // ============ VRF CALLBACK ============\\n    \\n    /**\\n     * @dev Callback function used by VRF Coordinator to return random numbers\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) \\n        internal \\n        override \\n    {\\n        uint256 campaignId = vrfRequests[requestId];\\n        require(campaignId != 0, \\\"SqudyCampaignManager: invalid request ID\\\");\\n        \\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.FINISHED, \\n                \\\"SqudyCampaignManager: campaign not finished\\\");\\n        \\n        // Select winners based on random numbers and ticket counts\\n        address[] memory winners = _selectWinners(campaignId, randomWords);\\n        campaign.winners = winners;\\n        campaign.winnerSelectionTxHash = bytes32(requestId);\\n        campaign.updatedAt = block.timestamp;\\n        \\n        emit WinnersSelected(campaignId, winners, bytes32(requestId));\\n    }\\n    \\n    /**\\n     * @dev Internal function to select winners using weighted lottery\\n     */\\n    function _selectWinners(uint256 campaignId, uint256[] memory randomWords) \\n        internal \\n        returns (address[] memory) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        uint256 totalTickets = 0;\\n        uint256 eligibleParticipants = 0;\\n        \\n        // Count total tickets and eligible participants\\n        for (uint256 i = 0; i < campaign.participantCount; i++) {\\n            address participant = participantIndexes[campaignId][i];\\n            Participant storage p = participants[campaignId][participant];\\n            if (p.hasCompletedSocial) {\\n                totalTickets += p.ticketCount;\\n                eligibleParticipants++;\\n            }\\n        }\\n        \\n        require(totalTickets > 0, \\\"SqudyCampaignManager: no eligible participants\\\");\\n        \\n        // Select winners based on prize count\\n        uint256 winnerCount = campaign.prizes.length;\\n        address[] memory winners = new address[](winnerCount);\\n        uint256 winnersSelected = 0;\\n        \\n        for (uint256 i = 0; i < randomWords.length && winnersSelected < winnerCount; i++) {\\n            uint256 randomTicket = randomWords[i] % totalTickets;\\n            address selectedWinner = _findWinnerByTicket(campaignId, randomTicket);\\n            \\n            // Check if this winner was already selected\\n            bool alreadySelected = false;\\n            for (uint256 j = 0; j < winnersSelected; j++) {\\n                if (winners[j] == selectedWinner) {\\n                    alreadySelected = true;\\n                    break;\\n                }\\n            }\\n            \\n            if (!alreadySelected) {\\n                winners[winnersSelected] = selectedWinner;\\n                participants[campaignId][selectedWinner].isWinner = true;\\n                participants[campaignId][selectedWinner].prizeIndex = winnersSelected;\\n                winnersSelected++;\\n            }\\n        }\\n        \\n        return winners;\\n    }\\n    \\n    /**\\n     * @dev Internal function to find winner by ticket number\\n     */\\n    function _findWinnerByTicket(uint256 campaignId, uint256 targetTicket) \\n        internal \\n        view \\n        returns (address) \\n    {\\n        Campaign storage campaign = campaigns[campaignId];\\n        uint256 currentTicket = 0;\\n        \\n        for (uint256 i = 0; i < campaign.participantCount; i++) {\\n            address participant = participantIndexes[campaignId][i];\\n            Participant storage p = participants[campaignId][participant];\\n            \\n            if (p.hasCompletedSocial) {\\n                currentTicket += p.ticketCount;\\n                if (targetTicket < currentTicket) {\\n                    return participant;\\n                }\\n            }\\n        }\\n        \\n        // Fallback (should not happen if totalTickets is correct)\\n        return participantIndexes[campaignId][0];\\n    }\\n\\n    // ============ VIEW FUNCTIONS ============\\n    \\n    /**\\n     * @dev Gets campaign details\\n     */\\n    function getCampaign(uint256 campaignId) \\n        external \\n        view \\n        campaignExists(campaignId) \\n        returns (Campaign memory) \\n    {\\n        return campaigns[campaignId];\\n    }\\n    \\n    /**\\n     * @dev Gets participant details\\n     */\\n    function getParticipant(uint256 campaignId, address user) \\n        external \\n        view \\n        campaignExists(campaignId) \\n        returns (Participant memory) \\n    {\\n        return participants[campaignId][user];\\n    }\\n    \\n    /**\\n     * @dev Gets all participants for a campaign\\n     */\\n    function getCampaignParticipants(uint256 campaignId) \\n        external \\n        view \\n        campaignExists(campaignId) \\n        returns (address[] memory) \\n    {\\n        return campaignParticipants[campaignId];\\n    }\\n    \\n    /**\\n     * @dev Gets total number of campaigns\\n     */\\n    function getCampaignCount() external view returns (uint256) {\\n        return _campaignIds;\\n    }\\n    \\n    /**\\n     * @dev Gets campaigns by status\\n     */\\n    function getCampaignsByStatus(CampaignStatus status) \\n        external \\n        view \\n        returns (uint256[] memory) \\n    {\\n        uint256 count = 0;\\n        uint256 totalCampaigns = _campaignIds;\\n        \\n        // Count campaigns with the specified status\\n        for (uint256 i = 1; i <= totalCampaigns; i++) {\\n            if (campaigns[i].status == status) {\\n                count++;\\n            }\\n        }\\n        \\n        // Create array with campaigns of the specified status\\n        uint256[] memory result = new uint256[](count);\\n        uint256 index = 0;\\n        \\n        for (uint256 i = 1; i <= totalCampaigns; i++) {\\n            if (campaigns[i].status == status) {\\n                result[index] = i;\\n                index++;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n\\n    // ============ EMERGENCY FUNCTIONS ============\\n    \\n    /**\\n     * @dev Emergency pause function\\n     */\\n    function emergencyPause() external onlyAdmin {\\n        _pause();\\n    }\\n    \\n    /**\\n     * @dev Emergency unpause function\\n     */\\n    function emergencyUnpause() external onlyAdmin {\\n        _unpause();\\n    }\\n    \\n    /**\\n     * @dev Emergency function to recover tokens (only if not burned)\\n     */\\n    function emergencyRecoverTokens(address token, address to) \\n        external \\n        onlyAdmin \\n    {\\n        require(token != address(squdyToken), \\\"SqudyCampaignManager: cannot recover SQUDY tokens\\\");\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n        require(balance > 0, \\\"SqudyCampaignManager: no tokens to recover\\\");\\n        \\n        IERC20(token).transfer(to, balance);\\n    }\\n} \",\"keccak256\":\"0x10589b11b9cb938d827c7edb201127e85850026c31a8b40e0a9014a399000ea6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":181,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)176_storage)"},{"astId":1632,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"_status","offset":0,"slot":"1","type":"t_uint256"},{"astId":1522,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"_paused","offset":0,"slot":"2","type":"t_bool"},{"astId":1980,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"_campaignIds","offset":0,"slot":"3","type":"t_uint256"},{"astId":1985,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"campaigns","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_struct(Campaign)2049_storage)"},{"astId":1992,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"participants","offset":0,"slot":"5","type":"t_mapping(t_uint256,t_mapping(t_address,t_struct(Participant)2062_storage))"},{"astId":1997,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"campaignParticipants","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_array(t_address)dyn_storage)"},{"astId":2003,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"participantIndexes","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_mapping(t_uint256,t_address))"},{"astId":2007,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"vrfRequests","offset":0,"slot":"8","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_string_storage)dyn_storage":{"base":"t_string_storage","encoding":"dynamic_array","label":"string[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_enum(CampaignStatus)2068":{"encoding":"inplace","label":"enum SqudyCampaignManager.CampaignStatus","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_struct(Participant)2062_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct SqudyCampaignManager.Participant)","numberOfBytes":"32","value":"t_struct(Participant)2062_storage"},"t_mapping(t_bytes32,t_struct(RoleData)176_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)176_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_array(t_address)dyn_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address[])","numberOfBytes":"32","value":"t_array(t_address)dyn_storage"},"t_mapping(t_uint256,t_mapping(t_address,t_struct(Participant)2062_storage))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => struct SqudyCampaignManager.Participant))","numberOfBytes":"32","value":"t_mapping(t_address,t_struct(Participant)2062_storage)"},"t_mapping(t_uint256,t_mapping(t_uint256,t_address))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(uint256 => address))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_address)"},"t_mapping(t_uint256,t_struct(Campaign)2049_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct SqudyCampaignManager.Campaign)","numberOfBytes":"32","value":"t_struct(Campaign)2049_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Campaign)2049_storage":{"encoding":"inplace","label":"struct SqudyCampaignManager.Campaign","members":[{"astId":2009,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"id","offset":0,"slot":"0","type":"t_uint256"},{"astId":2011,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"name","offset":0,"slot":"1","type":"t_string_storage"},{"astId":2013,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"description","offset":0,"slot":"2","type":"t_string_storage"},{"astId":2015,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"imageUrl","offset":0,"slot":"3","type":"t_string_storage"},{"astId":2017,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"softCap","offset":0,"slot":"4","type":"t_uint256"},{"astId":2019,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"hardCap","offset":0,"slot":"5","type":"t_uint256"},{"astId":2021,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"ticketAmount","offset":0,"slot":"6","type":"t_uint256"},{"astId":2023,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"currentAmount","offset":0,"slot":"7","type":"t_uint256"},{"astId":2025,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"startDate","offset":0,"slot":"8","type":"t_uint256"},{"astId":2027,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"endDate","offset":0,"slot":"9","type":"t_uint256"},{"astId":2029,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"participantCount","offset":0,"slot":"10","type":"t_uint256"},{"astId":2032,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"prizes","offset":0,"slot":"11","type":"t_array(t_string_storage)dyn_storage"},{"astId":2035,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"winners","offset":0,"slot":"12","type":"t_array(t_address)dyn_storage"},{"astId":2038,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"status","offset":0,"slot":"13","type":"t_enum(CampaignStatus)2068"},{"astId":2040,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"tokensAreBurned","offset":1,"slot":"13","type":"t_bool"},{"astId":2042,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"totalBurned","offset":0,"slot":"14","type":"t_uint256"},{"astId":2044,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"winnerSelectionTxHash","offset":0,"slot":"15","type":"t_bytes32"},{"astId":2046,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"createdAt","offset":0,"slot":"16","type":"t_uint256"},{"astId":2048,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"updatedAt","offset":0,"slot":"17","type":"t_uint256"}],"numberOfBytes":"576"},"t_struct(Participant)2062_storage":{"encoding":"inplace","label":"struct SqudyCampaignManager.Participant","members":[{"astId":2051,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"stakedAmount","offset":0,"slot":"0","type":"t_uint256"},{"astId":2053,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"ticketCount","offset":0,"slot":"1","type":"t_uint256"},{"astId":2055,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"hasCompletedSocial","offset":0,"slot":"2","type":"t_bool"},{"astId":2057,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"isWinner","offset":1,"slot":"2","type":"t_bool"},{"astId":2059,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"prizeIndex","offset":0,"slot":"3","type":"t_uint256"},{"astId":2061,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"joinedAt","offset":0,"slot":"4","type":"t_uint256"}],"numberOfBytes":"160"},"t_struct(RoleData)176_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":173,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"hasRole","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":175,"contract":"contracts/SqudyCampaignManager.sol:SqudyCampaignManager","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}