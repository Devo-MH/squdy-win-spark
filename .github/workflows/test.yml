name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:ui:coverage
      
    - name: Run accessibility tests
      run: npm run test:a11y
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          test-results.xml

  contract-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npm run compile
      
    - name: Run contract tests
      run: npm run test
      
    - name: Run enhanced contract tests
      run: npm run test:enhanced
      
    - name: Generate contract coverage
      run: npm run test:coverage
      
    - name: Upload contract coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: contracts
        name: codecov-contracts

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
    - name: Build frontend
      run: npm run build
      
    - name: Start backend server
      run: |
        cd backend && node simple-server.js &
        echo $! > backend.pid
        
    - name: Start frontend server
      run: |
        npm run preview &
        echo $! > frontend.pid
        
    - name: Wait for servers to be ready
      run: |
        npx wait-on http://localhost:8080 http://localhost:3001 --timeout 60000
        
    - name: Run Playwright tests
      run: npm run test:playwright
      
    - name: Stop servers
      if: always()
      run: |
        if [ -f backend.pid ]; then kill $(cat backend.pid) || true; fi
        if [ -f frontend.pid ]; then kill $(cat frontend.pid) || true; fi
        
    - name: Upload Playwright results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-tests:
    name: Security & Audit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install backend dependencies
      run: cd backend && npm ci
      
    - name: Run dependency audit
      run: npm run audit:deps
      continue-on-error: true
      
    - name: Run security audit
      run: npm run audit:security
      continue-on-error: true
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-results
        path: |
          security/
          .snyk

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Analyze bundle size
      run: |
        npm install -g bundlesize
        bundlesize
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        temporaryPublicStorage: true
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: .lighthouseci/

  build-test:
    name: Build & Deploy Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [development, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for ${{ matrix.environment }}
      run: |
        if [ "${{ matrix.environment }}" = "production" ]; then
          npm run build
        else
          npm run build:dev
        fi
        
    - name: Test build artifacts
      run: |
        test -f dist/index.html
        test -d dist/assets
        ls -la dist/
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ matrix.environment }}
        path: dist/

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: false
        tags: squdy-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: squdy-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config
        echo "Docker Compose configuration is valid"

  coverage-report:
    name: Coverage Report
    needs: [unit-tests, contract-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Combine coverage reports
      run: |
        mkdir -p combined-coverage
        find . -name "lcov.info" -exec cp {} combined-coverage/ \;
        ls -la combined-coverage/
        
    - name: Generate combined coverage report
      uses: codecov/codecov-action@v3
      with:
        directory: ./combined-coverage
        flags: combined
        name: codecov-combined

  quality-gate:
    name: Quality Gate
    needs: [unit-tests, contract-tests, e2e-tests, security-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Contract tests: ${{ needs.contract-tests.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"
        echo "Security tests: ${{ needs.security-tests.result }}"
        
        if [ "${{ needs.unit-tests.result }}" != "success" ]; then
          echo "‚ùå Unit tests failed"
          exit 1
        fi
        
        if [ "${{ needs.contract-tests.result }}" != "success" ]; then
          echo "‚ùå Contract tests failed"
          exit 1
        fi
        
        if [ "${{ needs.e2e-tests.result }}" != "success" ]; then
          echo "‚ùå E2E tests failed"
          exit 1
        fi
        
        echo "‚úÖ All quality gates passed!"

  notify:
    name: Notification
    needs: [quality-gate]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.quality-gate.result == 'success'
      run: |
        echo "üéâ All tests passed successfully!"
        echo "Build is ready for deployment"
        
    - name: Notify failure
      if: needs.quality-gate.result != 'success'
      run: |
        echo "‚ùå Some tests failed"
        echo "Please check the test results and fix issues before merging"