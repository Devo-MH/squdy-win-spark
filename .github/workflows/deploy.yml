name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Deploy (skip if no token)
        if: env.VERCEL_TOKEN && env.VERCEL_PROJECT_ID && env.VERCEL_ORG_ID
        run: |
          npm i -g vercel@latest
          vercel pull --yes --token ${{ env.VERCEL_TOKEN }} --environment=production
          vercel build --prod --token ${{ env.VERCEL_TOKEN }}
          vercel deploy --prebuilt --prod --token ${{ env.VERCEL_TOKEN }}
      - name: Skipping Vercel deploy (missing secrets)
        if: ${{ ! (env.VERCEL_TOKEN && env.VERCEL_PROJECT_ID && env.VERCEL_ORG_ID) }}
        run: echo "Vercel secrets not set; skipping deploy"

  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Deploy (skip if no token)
        if: env.RAILWAY_TOKEN
        run: |
          curl -fsSL https://railway.app/install.sh | sh
          railway up --service squdy --ci
      - name: Skipping Railway deploy (missing token)
        if: ${{ ! env.RAILWAY_TOKEN }}
        run: echo "RAILWAY_TOKEN not set; skipping deploy"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Production deploy step (gated)
        if: env.RUN_PRODUCTION_DEPLOY == 'true'
        run: echo "Run your prod deploy here (gated by RUN_PRODUCTION_DEPLOY)"
      - name: Skipping production deploy
        if: env.RUN_PRODUCTION_DEPLOY != 'true'
        run: echo "RUN_PRODUCTION_DEPLOY not enabled; skipping"

name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Run lint
        run: npm run lint
      
      - name: Build frontend
        run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service == 'backend' && 'backend/Dockerfile' || 'Dockerfile.frontend' }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd ${{ secrets.DEPLOY_PATH }}
            git pull origin main
            docker-compose pull
            docker-compose up -d --remove-orphans
            docker image prune -f
          EOF
      
      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.DEPLOY_URL }}/health || exit 1
          curl -f ${{ secrets.DEPLOY_URL }}/api/health || exit 1

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}