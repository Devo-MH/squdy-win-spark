// Vercel serverless function for Squdy backend (consolidated, ESM)
import express from 'express';
import cors from 'cors';
import { ethers } from 'ethers';
import { randomBytes } from 'crypto';

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Health endpoint
app.get('/api/health', (req, res) => res.send('OK'));

// In-memory demo campaigns (ephemeral)
const demoCampaigns = [1,2,3,4,5].map((i) => ({
    id: i,
    contractId: i,
    name: `Demo Campaign ${i}`,
    description: 'Demo campaign generated by backend.',
    imageUrl: 'https://images.unsplash.com/photo-1640340434855-6084b1f4901c?w=800&h=400&fit=crop',
    status: 'active',
    currentAmount: 0,
    hardCap: 50000,
    participantCount: 0,
    softCap: 5000,
    ticketAmount: 100,
    startDate: new Date().toISOString(),
    endDate: new Date(Date.now() + 7*24*60*60*1000).toISOString(),
    prizes: [
      { name: 'First Prize', description: 'Winner takes all', value: '10000', currency: 'USD', quantity: 1 },
      { name: 'Second Prize', description: 'Runner up reward', value: '5000', currency: 'USD', quantity: 1 },
      { name: 'Third Prize', description: 'Bronze medal', value: '2500', currency: 'USD', quantity: 1 },
    ],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
}));

let campaignsInMemory = [...demoCampaigns];

// Campaigns list
app.get(['/api/campaigns','/campaigns'], (req, res) => {
  const limit = parseInt(req.query.limit || '10', 10);
  const page = 1;
  res.json({
    campaigns: campaignsInMemory.slice(0, limit),
    pagination: { page, limit, total: campaignsInMemory.length, totalPages: 1 }
  });
});

// Admin stats (Mongo optional)
app.get(['/api/admin/stats','/admin/stats'], async (req, res) => {
  try {
    const stats = {
      platform: { totalCampaigns: 0, activeCampaigns: 0, totalParticipants: 0, totalRaised: 0, status: 'operational' },
      blockchain: {
        network: process.env.VITE_NETWORK || 'sepolia',
        chainId: process.env.VITE_CHAIN_ID || '11155111',
        squdyTokenAddress: process.env.VITE_SQUDY_TOKEN_ADDRESS,
        campaignManagerAddress: process.env.VITE_CAMPAIGN_MANAGER_ADDRESS,
        connected: true,
      },
      database: { status: 'unknown', lastCheck: new Date().toISOString() },
    };
    res.json({ stats });
  } catch (e) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Admin create campaign (mock; ephemeral)
app.post(['/api/admin/campaigns','/admin/campaigns'], (req, res) => {
  const data = req.body || {};
  if (!data.name || !data.description || !data.softCap || !data.hardCap || !data.ticketAmount) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  const newCampaign = {
    id: campaignsInMemory.length + 1,
    contractId: campaignsInMemory.length + 1,
    name: data.name,
    description: data.description,
    imageUrl: data.imageUrl || 'https://images.unsplash.com/photo-1640340434855-6084b1f4901c?w=800&h=400&fit=crop',
    status: 'active',
    currentAmount: 0,
    hardCap: Number(data.hardCap),
    participantCount: 0,
    softCap: Number(data.softCap),
    ticketAmount: Number(data.ticketAmount),
    startDate: data.startDate || new Date().toISOString(),
    endDate: data.endDate || new Date(Date.now() + 7*24*60*60*1000).toISOString(),
    prizes: data.prizes || [],
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
  };
  campaignsInMemory = [newCampaign, ...campaignsInMemory];
  return res.status(201).json({ message: 'Campaign created (mock)', campaign: newCampaign });
});

// Single campaign
app.get(['/api/campaigns/:id','/campaigns/:id'], (req, res) => {
  const id = Number(req.params.id);
  const campaign = campaignsInMemory.find(c => c.id === id || c.contractId === id);
  if (!campaign) return res.status(404).json({ error: 'Campaign not found' });
  return res.json({ campaign });
});

// My status for campaign (mock)
app.get(['/api/campaigns/:id/my-status','/campaigns/:id/my-status'], (req, res) => {
  return res.json({ isParticipating: false, status: null, stakeAmount: 0, socialTasks: {} });
});

// Auth (nonce + verify)
app.get('/api/auth', (req, res) => {
  const { action, walletAddress } = req.query;
  if (action !== 'nonce') return res.status(400).json({ error: 'Invalid action' });
  if (!walletAddress || !/^0x[a-fA-F0-9]{40}$/.test(walletAddress)) return res.status(400).json({ error: 'Invalid wallet address' });

  const nonce = randomBytes(16).toString('hex');
  const timestamp = Date.now();
  const message = `Welcome to Squdy Platform!\n\nThis request will not trigger a blockchain transaction or cost any gas fees.\n\nWallet: ${walletAddress}\nNonce: ${nonce}\nTimestamp: ${timestamp}\n\nSign this message to authenticate your wallet.`;
  res.json({ message, nonce, timestamp, walletAddress: walletAddress.toLowerCase() });
});

app.post('/api/auth', (req, res) => {
  const { message, signature, walletAddress } = req.body || {};
  if (!message || !signature || !walletAddress) return res.status(400).json({ error: 'Missing required fields' });
  if (!/^0x[a-fA-F0-9]{40}$/.test(walletAddress)) return res.status(400).json({ error: 'Invalid wallet address' });

  let recovered;
  try { recovered = ethers.utils.verifyMessage(message, signature); } catch { return res.status(400).json({ error: 'Invalid signature', verified: false }); }
  if (recovered.toLowerCase() !== walletAddress.toLowerCase()) return res.status(400).json({ error: 'Signature verification failed', verified: false });

  const adminWallets = (process.env.ADMIN_WALLETS || '').split(',').map(w => w.trim().toLowerCase()).filter(Boolean);
  const isAdmin = adminWallets.includes(walletAddress.toLowerCase());
  res.json({ verified: true, walletAddress: walletAddress.toLowerCase(), isAdmin, timestamp: Date.now() });
});

export default app;